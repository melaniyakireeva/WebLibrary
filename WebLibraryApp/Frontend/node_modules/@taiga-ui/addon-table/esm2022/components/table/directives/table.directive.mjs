import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, inject, Input, Output, signal, ViewEncapsulation, } from '@angular/core';
import { WA_INTERSECTION_ROOT_MARGIN } from '@ng-web-apis/intersection-observer';
import { tuiProvide, tuiWithStyles } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiButtonOptionsProvider } from '@taiga-ui/core/components/button';
import { TUI_TEXTFIELD_OPTIONS } from '@taiga-ui/core/components/textfield';
import { tuiBadgeOptionsProvider } from '@taiga-ui/kit/components/badge';
import { tuiChipOptionsProvider } from '@taiga-ui/kit/components/chip';
import { tuiProgressOptionsProvider } from '@taiga-ui/kit/components/progress';
import { Subject } from 'rxjs';
import { TUI_TABLE_OPTIONS } from '../table.options';
import { TuiStuck } from './stuck.directive';
import * as i0 from "@angular/core";
import * as i1 from "./stuck.directive";
class TuiTableStyles {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTableStyles, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTableStyles, isStandalone: true, selector: "ng-component", host: { classAttribute: "tui-table" }, ngImport: i0, template: '', isInline: true, styles: ["table[tuiTable]{border-collapse:separate}table[tuiTable] [tuiCell]{padding:0}table[tuiTable] [tuiTitle]{white-space:nowrap}table[tuiTable] [tuiTitle] tui-icon{font-size:1rem}table[tuiTable] [tuiSubtitle]{color:var(--tui-text-secondary)}table[tuiTable] [tuiTh] [tuiCell],table[tuiTable] [tuiTh] [tuiTitle]{font:inherit;color:inherit}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTableStyles, decorators: [{
            type: Component,
            args: [{ standalone: true, template: '', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'tui-table',
                    }, styles: ["table[tuiTable]{border-collapse:separate}table[tuiTable] [tuiCell]{padding:0}table[tuiTable] [tuiTitle]{white-space:nowrap}table[tuiTable] [tuiTitle] tui-icon{font-size:1rem}table[tuiTable] [tuiSubtitle]{color:var(--tui-text-secondary)}table[tuiTable] [tuiTh] [tuiCell],table[tuiTable] [tuiTh] [tuiTitle]{font:inherit;color:inherit}\n"] }]
        }] });
class TuiTableDirective {
    constructor() {
        this.options = inject(TUI_TABLE_OPTIONS);
        this.cdr = inject(ChangeDetectorRef);
        this.nothing = tuiWithStyles(TuiTableStyles);
        this.columns = [];
        this.direction = this.options.direction;
        this.directionChange = new EventEmitter();
        this.sorterChange = new EventEmitter();
        this.appearance = signal('table');
        this.size = signal(this.options.size);
        this.cleaner = signal(false);
        // TODO: refactor to signal inputs after Angular update
        this.change$ = new Subject();
        this.sorter = () => 0;
    }
    set sizeSetter(size) {
        this.size.set(size);
    }
    updateSorterAndDirection(sorter) {
        if (this.sorter === sorter) {
            this.updateDirection(this.direction === 1 ? -1 : 1);
        }
        else {
            this.updateSorter(sorter);
            this.updateDirection(1);
        }
    }
    ngOnChanges() {
        this.change$.next();
    }
    ngAfterViewInit() {
        this.cdr.detectChanges();
    }
    updateSorter(sorter) {
        this.sorter = sorter || (() => 0);
        this.sorterChange.emit(this.sorter);
        this.change$.next();
    }
    updateDirection(direction) {
        this.direction = direction;
        this.directionChange.emit(this.direction);
        this.change$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTableDirective, isStandalone: true, selector: "table[tuiTable]", inputs: { columns: "columns", direction: "direction", sizeSetter: ["size", "sizeSetter"], sorter: "sorter" }, outputs: { directionChange: "directionChange", sorterChange: "sorterChange" }, host: { properties: { "attr.data-size": "size()" } }, providers: [
            {
                provide: WA_INTERSECTION_ROOT_MARGIN,
                useValue: '10000px 10000px 10000px 0px',
            },
            tuiProvide(TUI_TEXTFIELD_OPTIONS, TuiTableDirective),
            tuiButtonOptionsProvider({ size: 's' }),
            tuiBadgeOptionsProvider({ size: 'm', appearance: 'neutral' }),
            tuiChipOptionsProvider({ size: 'xxs', appearance: 'neutral' }),
            tuiProgressOptionsProvider({ size: 's', color: 'var(--tui-text-action)' }),
        ], usesOnChanges: true, hostDirectives: [{ directive: i1.TuiStuck }], ngImport: i0 }); }
}
export { TuiTableDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTableDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'table[tuiTable]',
                    providers: [
                        {
                            provide: WA_INTERSECTION_ROOT_MARGIN,
                            useValue: '10000px 10000px 10000px 0px',
                        },
                        tuiProvide(TUI_TEXTFIELD_OPTIONS, TuiTableDirective),
                        tuiButtonOptionsProvider({ size: 's' }),
                        tuiBadgeOptionsProvider({ size: 'm', appearance: 'neutral' }),
                        tuiChipOptionsProvider({ size: 'xxs', appearance: 'neutral' }),
                        tuiProgressOptionsProvider({ size: 's', color: 'var(--tui-text-action)' }),
                    ],
                    hostDirectives: [TuiStuck],
                    host: {
                        '[attr.data-size]': 'size()',
                    },
                }]
        }], propDecorators: { columns: [{
                type: Input
            }], direction: [{
                type: Input
            }], directionChange: [{
                type: Output
            }], sorterChange: [{
                type: Output
            }], sizeSetter: [{
                type: Input,
                args: ['size']
            }], sorter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,