import { Directive, inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiButton } from '@taiga-ui/core/components/button';
import { TUI_DATA_LIST_HOST, TuiDataListComponent, } from '@taiga-ui/core/components/data-list';
import { TUI_DROPDOWN_OPTIONS, TuiDropdownDirective, TuiDropdownManual, TuiDropdownPositionSided, } from '@taiga-ui/core/directives/dropdown';
import { TuiIcons } from '@taiga-ui/core/directives/icons';
import { TUI_COMMON_ICONS, TUI_ICON_END } from '@taiga-ui/core/tokens';
import { TUI_CHEVRON, TuiChevron } from '@taiga-ui/kit/directives/chevron';
import { TuiHintAsideDirective } from './hint-aside.directive';
import * as i0 from "@angular/core";
import * as i1 from "./hint-aside.directive";
import * as i2 from "@taiga-ui/core/directives/dropdown";
import * as i3 from "@taiga-ui/core/components/button";
import * as i4 from "@angular/router";
class TuiAsideItemDirective {
    constructor() {
        this.icon = inject(TUI_COMMON_ICONS).check;
        this.icons = inject(TuiIcons);
        this.link = inject(RouterLink, { self: true, optional: true });
        this.active = toSignal(inject(RouterLinkActive).isActiveChange);
        this.size = 's';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiAsideItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiAsideItemDirective, isStandalone: true, selector: "[tuiAsideItem]", host: { attributes: { "tuiButton": "" }, properties: { "class._link": "link", "class._active": "active()", "class._custom": "icon !== icons.iconEnd" } }, providers: [
            tuiProvide(TUI_DATA_LIST_HOST, TuiAsideItemDirective),
            provideIcon(),
            provideDropdown(),
        ], hostDirectives: [{ directive: i1.TuiHintAsideDirective }, { directive: i2.TuiDropdownManual }, { directive: i2.TuiDropdownPositionSided }, { directive: i3.TuiButton }, { directive: i4.RouterLinkActive, inputs: ["routerLinkActiveOptions", "routerLinkActiveOptions"] }], ngImport: i0 }); }
}
export { TuiAsideItemDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiAsideItemDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiAsideItem]',
                    providers: [
                        tuiProvide(TUI_DATA_LIST_HOST, TuiAsideItemDirective),
                        provideIcon(),
                        provideDropdown(),
                    ],
                    hostDirectives: [
                        TuiHintAsideDirective,
                        TuiDropdownManual,
                        TuiDropdownPositionSided,
                        TuiButton,
                        {
                            directive: RouterLinkActive,
                            inputs: ['routerLinkActiveOptions'],
                        },
                    ],
                    host: {
                        tuiButton: '',
                        '[class._link]': 'link',
                        '[class._active]': 'active()',
                        '[class._custom]': 'icon !== icons.iconEnd',
                    },
                }]
        }] });
function provideIcon() {
    return {
        provide: TUI_ICON_END,
        useFactory: () => {
            if (inject(TuiChevron, { optional: true, self: true })) {
                return inject(TUI_CHEVRON);
            }
            const { check, more } = inject(TUI_COMMON_ICONS);
            const active = inject(TuiDataListComponent, { optional: true }) &&
                inject(RouterLink, { self: true, optional: true })
                ? check
                : '';
            return inject(TuiDropdownDirective, { self: true, optional: true })
                ? more
                : active;
        },
    };
}
function provideDropdown() {
    return {
        provide: TUI_DROPDOWN_OPTIONS,
        useFactory: () => ({
            ...inject(TUI_DROPDOWN_OPTIONS, { skipSelf: true }),
            offset: inject(TuiDataListComponent, { optional: true }) ? 8 : 12,
        }),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNpZGUtaXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sYXlvdXQvY29tcG9uZW50cy9uYXZpZ2F0aW9uL2FzaWRlLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzdELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUUzRCxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLG9CQUFvQixHQUN2QixNQUFNLHFDQUFxQyxDQUFDO0FBRTdDLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsb0JBQW9CLEVBQ3BCLGlCQUFpQixFQUNqQix3QkFBd0IsR0FDM0IsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDekQsT0FBTyxFQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3JFLE9BQU8sRUFBQyxXQUFXLEVBQUUsVUFBVSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFFekUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7Ozs7OztBQUU3RCxNQXlCYSxxQkFBcUI7SUF6QmxDO1FBMEJ1QixTQUFJLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RDLFVBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekIsU0FBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3hELFdBQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFOUQsU0FBSSxHQUFHLEdBQUcsQ0FBQztLQUM5QjsrR0FQWSxxQkFBcUI7bUdBQXJCLHFCQUFxQix1TkF0Qm5CO1lBQ1AsVUFBVSxDQUFDLGtCQUFrQixFQUFFLHFCQUFxQixDQUFDO1lBQ3JELFdBQVcsRUFBRTtZQUNiLGVBQWUsRUFBRTtTQUNwQjs7U0FrQlEscUJBQXFCOzRGQUFyQixxQkFBcUI7a0JBekJqQyxTQUFTO21CQUFDO29CQUNQLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixTQUFTLEVBQUU7d0JBQ1AsVUFBVSxDQUFDLGtCQUFrQix3QkFBd0I7d0JBQ3JELFdBQVcsRUFBRTt3QkFDYixlQUFlLEVBQUU7cUJBQ3BCO29CQUNELGNBQWMsRUFBRTt3QkFDWixxQkFBcUI7d0JBQ3JCLGlCQUFpQjt3QkFDakIsd0JBQXdCO3dCQUN4QixTQUFTO3dCQUNUOzRCQUNJLFNBQVMsRUFBRSxnQkFBZ0I7NEJBQzNCLE1BQU0sRUFBRSxDQUFDLHlCQUF5QixDQUFDO3lCQUN0QztxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YsU0FBUyxFQUFFLEVBQUU7d0JBQ2IsZUFBZSxFQUFFLE1BQU07d0JBQ3ZCLGlCQUFpQixFQUFFLFVBQVU7d0JBQzdCLGlCQUFpQixFQUFFLHdCQUF3QjtxQkFDOUM7aUJBQ0o7O0FBVUQsU0FBUyxXQUFXO0lBQ2hCLE9BQU87UUFDSCxPQUFPLEVBQUUsWUFBWTtRQUNyQixVQUFVLEVBQUUsR0FBVyxFQUFFO1lBQ3JCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLEVBQUU7Z0JBQ2xELE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzlCO1lBRUQsTUFBTSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxNQUFNLE1BQU0sR0FDUixNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUFDLEtBQUs7Z0JBQ1AsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUViLE9BQU8sTUFBTSxDQUFDLG9CQUFvQixFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7Z0JBQzdELENBQUMsQ0FBQyxJQUFJO2dCQUNOLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDakIsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxlQUFlO0lBQ3BCLE9BQU87UUFDSCxPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLFVBQVUsRUFBRSxHQUF1QixFQUFFLENBQUMsQ0FBQztZQUNuQyxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztZQUNqRCxNQUFNLEVBQUUsTUFBTSxDQUFDLG9CQUFvQixFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtTQUNsRSxDQUFDO0tBQ0wsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7RmFjdG9yeVByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlyZWN0aXZlLCBpbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0b1NpZ25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHtSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rQWN0aXZlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHt0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtUdWlCdXR0b259IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvYnV0dG9uJztcbmltcG9ydCB0eXBlIHtUdWlEYXRhTGlzdEhvc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcbmltcG9ydCB7XG4gICAgVFVJX0RBVEFfTElTVF9IT1NULFxuICAgIFR1aURhdGFMaXN0Q29tcG9uZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2RhdGEtbGlzdCc7XG5pbXBvcnQgdHlwZSB7VHVpRHJvcGRvd25PcHRpb25zfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL2Ryb3Bkb3duJztcbmltcG9ydCB7XG4gICAgVFVJX0RST1BET1dOX09QVElPTlMsXG4gICAgVHVpRHJvcGRvd25EaXJlY3RpdmUsXG4gICAgVHVpRHJvcGRvd25NYW51YWwsXG4gICAgVHVpRHJvcGRvd25Qb3NpdGlvblNpZGVkLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL2Ryb3Bkb3duJztcbmltcG9ydCB7VHVpSWNvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvaWNvbnMnO1xuaW1wb3J0IHtUVUlfQ09NTU9OX0lDT05TLCBUVUlfSUNPTl9FTkR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1RVSV9DSEVWUk9OLCBUdWlDaGV2cm9ufSBmcm9tICdAdGFpZ2EtdWkva2l0L2RpcmVjdGl2ZXMvY2hldnJvbic7XG5cbmltcG9ydCB7VHVpSGludEFzaWRlRGlyZWN0aXZlfSBmcm9tICcuL2hpbnQtYXNpZGUuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ1t0dWlBc2lkZUl0ZW1dJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgdHVpUHJvdmlkZShUVUlfREFUQV9MSVNUX0hPU1QsIFR1aUFzaWRlSXRlbURpcmVjdGl2ZSksXG4gICAgICAgIHByb3ZpZGVJY29uKCksXG4gICAgICAgIHByb3ZpZGVEcm9wZG93bigpLFxuICAgIF0sXG4gICAgaG9zdERpcmVjdGl2ZXM6IFtcbiAgICAgICAgVHVpSGludEFzaWRlRGlyZWN0aXZlLFxuICAgICAgICBUdWlEcm9wZG93bk1hbnVhbCxcbiAgICAgICAgVHVpRHJvcGRvd25Qb3NpdGlvblNpZGVkLFxuICAgICAgICBUdWlCdXR0b24sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZTogUm91dGVyTGlua0FjdGl2ZSxcbiAgICAgICAgICAgIGlucHV0czogWydyb3V0ZXJMaW5rQWN0aXZlT3B0aW9ucyddLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICB0dWlCdXR0b246ICcnLFxuICAgICAgICAnW2NsYXNzLl9saW5rXSc6ICdsaW5rJyxcbiAgICAgICAgJ1tjbGFzcy5fYWN0aXZlXSc6ICdhY3RpdmUoKScsXG4gICAgICAgICdbY2xhc3MuX2N1c3RvbV0nOiAnaWNvbiAhPT0gaWNvbnMuaWNvbkVuZCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQXNpZGVJdGVtRGlyZWN0aXZlIGltcGxlbWVudHMgVHVpRGF0YUxpc3RIb3N0PHVua25vd24+IHtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaWNvbiA9IGluamVjdChUVUlfQ09NTU9OX0lDT05TKS5jaGVjaztcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaWNvbnMgPSBpbmplY3QoVHVpSWNvbnMpO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBsaW5rID0gaW5qZWN0KFJvdXRlckxpbmssIHtzZWxmOiB0cnVlLCBvcHRpb25hbDogdHJ1ZX0pO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBhY3RpdmUgPSB0b1NpZ25hbChpbmplY3QoUm91dGVyTGlua0FjdGl2ZSkuaXNBY3RpdmVDaGFuZ2UpO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHNpemUgPSAncyc7XG59XG5cbmZ1bmN0aW9uIHByb3ZpZGVJY29uKCk6IEZhY3RvcnlQcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0lDT05fRU5ELFxuICAgICAgICB1c2VGYWN0b3J5OiAoKTogc3RyaW5nID0+IHtcbiAgICAgICAgICAgIGlmIChpbmplY3QoVHVpQ2hldnJvbiwge29wdGlvbmFsOiB0cnVlLCBzZWxmOiB0cnVlfSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5qZWN0KFRVSV9DSEVWUk9OKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qge2NoZWNrLCBtb3JlfSA9IGluamVjdChUVUlfQ09NTU9OX0lDT05TKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9XG4gICAgICAgICAgICAgICAgaW5qZWN0KFR1aURhdGFMaXN0Q29tcG9uZW50LCB7b3B0aW9uYWw6IHRydWV9KSAmJlxuICAgICAgICAgICAgICAgIGluamVjdChSb3V0ZXJMaW5rLCB7c2VsZjogdHJ1ZSwgb3B0aW9uYWw6IHRydWV9KVxuICAgICAgICAgICAgICAgICAgICA/IGNoZWNrXG4gICAgICAgICAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgICAgIHJldHVybiBpbmplY3QoVHVpRHJvcGRvd25EaXJlY3RpdmUsIHtzZWxmOiB0cnVlLCBvcHRpb25hbDogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgPyBtb3JlXG4gICAgICAgICAgICAgICAgOiBhY3RpdmU7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcHJvdmlkZURyb3Bkb3duKCk6IEZhY3RvcnlQcm92aWRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0RST1BET1dOX09QVElPTlMsXG4gICAgICAgIHVzZUZhY3Rvcnk6ICgpOiBUdWlEcm9wZG93bk9wdGlvbnMgPT4gKHtcbiAgICAgICAgICAgIC4uLmluamVjdChUVUlfRFJPUERPV05fT1BUSU9OUywge3NraXBTZWxmOiB0cnVlfSksXG4gICAgICAgICAgICBvZmZzZXQ6IGluamVjdChUdWlEYXRhTGlzdENvbXBvbmVudCwge29wdGlvbmFsOiB0cnVlfSkgPyA4IDogMTIsXG4gICAgICAgIH0pLFxuICAgIH07XG59XG4iXX0=