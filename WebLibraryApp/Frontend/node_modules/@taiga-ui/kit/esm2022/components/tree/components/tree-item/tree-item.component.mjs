import { NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, inject, SkipSelf, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiExpandComponent } from '@taiga-ui/core/components/expand';
import { PolymorpheusOutlet } from '@taiga-ui/polymorpheus';
import { distinctUntilChanged, map, startWith, Subject } from 'rxjs';
import { TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_LEVEL, TUI_TREE_NODE, } from '../../misc/tree.tokens';
import * as i0 from "@angular/core";
class TuiTreeItem {
    constructor() {
        this.nested = EMPTY_QUERY;
        this.el = tuiInjectElement();
        this.controller = inject(forwardRef(() => TUI_TREE_CONTROLLER));
        this.change$ = new Subject();
        this.level = inject(forwardRef(() => TUI_TREE_LEVEL));
        this.content = inject(forwardRef(() => TUI_TREE_CONTENT));
        this.expanded = toSignal(this.change$.pipe(startWith(null), map(() => this.isExpanded)), { initialValue: this.isExpanded });
        this.attached = toSignal(this.change$.pipe(map(() => this.el.isConnected), distinctUntilChanged()), { initialValue: this.el.isConnected });
    }
    get isExpandable() {
        return !!this.nested.length;
    }
    get isExpanded() {
        return this.controller.isExpanded(this);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        this.change$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeItem, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTreeItem, isStandalone: true, selector: "tui-tree-item", host: { attributes: { "role": "treeitem" }, properties: { "class._expandable": "isExpandable" } }, providers: [
            tuiProvide(TUI_TREE_NODE, TuiTreeItem),
            {
                provide: TUI_TREE_LEVEL,
                deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
                useFactory: (level) => ++level,
            },
        ], queries: [{ propertyName: "nested", predicate: TUI_TREE_NODE }], ngImport: i0, template: "<ng-template #template>\n    <ng-content />\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded()\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\" />\n        <ng-content select=\"tui-tree\" />\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached()\" />\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiTreeItem };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeItem, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-tree-item', imports: [NgIf, PolymorpheusOutlet, TuiExpandComponent], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiProvide(TUI_TREE_NODE, TuiTreeItem),
                        {
                            provide: TUI_TREE_LEVEL,
                            deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
                            useFactory: (level) => ++level,
                        },
                    ], host: {
                        role: 'treeitem',
                        '[class._expandable]': 'isExpandable',
                    }, template: "<ng-template #template>\n    <ng-content />\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded()\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\" />\n        <ng-content select=\"tui-tree\" />\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached()\" />\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"] }]
        }], propDecorators: { nested: [{
                type: ContentChildren,
                args: [TUI_TREE_NODE]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRXJDLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULGVBQWUsRUFDZixVQUFVLEVBQ1YsTUFBTSxFQUNOLFFBQVEsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUVwRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHbkUsT0FBTyxFQUNILGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLGFBQWEsR0FDaEIsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFaEMsTUFvQmEsV0FBVztJQXBCeEI7UUFzQnFCLFdBQU0sR0FBdUIsV0FBVyxDQUFDO1FBRXpDLE9BQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhCLGVBQVUsR0FBRyxNQUFNLENBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUN4QyxDQUFDO1FBRWUsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFFNUIsVUFBSyxHQUFHLE1BQU0sQ0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUV6RCxZQUFPLEdBQUcsTUFBTSxDQUMvQixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FDckMsQ0FBQztRQUVpQixhQUFRLEdBQUcsUUFBUSxDQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDYixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDN0IsRUFDRCxFQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFDLENBQ2xDLENBQUM7UUFFaUIsYUFBUSxHQUFHLFFBQVEsQ0FDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2IsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQzlCLG9CQUFvQixFQUFFLENBQ3pCLEVBQ0QsRUFBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUMsQ0FDdEMsQ0FBQztLQWlCTDtJQWZHLElBQVcsWUFBWTtRQUNuQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLFNBQVM7UUFDWixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVNLFlBQVk7UUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7K0dBaERRLFdBQVc7bUdBQVgsV0FBVywrSkFiVDtZQUNQLFVBQVUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDO1lBQ3RDO2dCQUNJLE9BQU8sRUFBRSxjQUFjO2dCQUN2QixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7Z0JBQ3hDLFVBQVUsRUFBRSxDQUFDLEtBQWEsRUFBVSxFQUFFLENBQUMsRUFBRSxLQUFLO2FBQ2pEO1NBQ0osaURBT2dCLGFBQWEsNkJDaERsQywyZUFrQkEsOEpEWWMsSUFBSSw2RkFBRSxrQkFBa0IsOEhBQUUsa0JBQWtCOztTQWlCN0MsV0FBVzs0RkFBWCxXQUFXO2tCQXBCdkIsU0FBUztpQ0FDTSxJQUFJLFlBQ04sZUFBZSxXQUNoQixDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQyxtQkFHdEMsdUJBQXVCLENBQUMsTUFBTSxhQUNwQzt3QkFDUCxVQUFVLENBQUMsYUFBYSxjQUFjO3dCQUN0Qzs0QkFDSSxPQUFPLEVBQUUsY0FBYzs0QkFDdkIsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDOzRCQUN4QyxVQUFVLEVBQUUsQ0FBQyxLQUFhLEVBQVUsRUFBRSxDQUFDLEVBQUUsS0FBSzt5QkFDakQ7cUJBQ0osUUFDSzt3QkFDRixJQUFJLEVBQUUsVUFBVTt3QkFDaEIscUJBQXFCLEVBQUUsY0FBYztxQkFDeEM7OEJBSWdCLE1BQU07c0JBRHRCLGVBQWU7dUJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdJZn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB0eXBlIHtEb0NoZWNrLCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIGZvcndhcmRSZWYsXG4gICAgaW5qZWN0LFxuICAgIFNraXBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dG9TaWduYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7RU1QVFlfUVVFUll9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB7dHVpSW5qZWN0RWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHt0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtUdWlFeHBhbmRDb21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZXhwYW5kJztcbmltcG9ydCB0eXBlIHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzT3V0bGV0fSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc3RhcnRXaXRoLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHR5cGUge1R1aVRyZWVDb250cm9sbGVyLCBUdWlUcmVlSXRlbUNvbnRleHR9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7XG4gICAgVFVJX1RSRUVfQ09OVEVOVCxcbiAgICBUVUlfVFJFRV9DT05UUk9MTEVSLFxuICAgIFRVSV9UUkVFX0xFVkVMLFxuICAgIFRVSV9UUkVFX05PREUsXG59IGZyb20gJy4uLy4uL21pc2MvdHJlZS50b2tlbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAndHVpLXRyZWUtaXRlbScsXG4gICAgaW1wb3J0czogW05nSWYsIFBvbHltb3JwaGV1c091dGxldCwgVHVpRXhwYW5kQ29tcG9uZW50XSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZS1pdGVtLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3RyZWUtaXRlbS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aVByb3ZpZGUoVFVJX1RSRUVfTk9ERSwgVHVpVHJlZUl0ZW0pLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfVFJFRV9MRVZFTCxcbiAgICAgICAgICAgIGRlcHM6IFtbbmV3IFNraXBTZWxmKCksIFRVSV9UUkVFX0xFVkVMXV0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiAobGV2ZWw6IG51bWJlcik6IG51bWJlciA9PiArK2xldmVsLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICByb2xlOiAndHJlZWl0ZW0nLFxuICAgICAgICAnW2NsYXNzLl9leHBhbmRhYmxlXSc6ICdpc0V4cGFuZGFibGUnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRyZWVJdGVtIGltcGxlbWVudHMgRG9DaGVjayB7XG4gICAgQENvbnRlbnRDaGlsZHJlbihUVUlfVFJFRV9OT0RFKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgbmVzdGVkOiBRdWVyeUxpc3Q8dW5rbm93bj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50KCk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRyb2xsZXIgPSBpbmplY3Q8VHVpVHJlZUNvbnRyb2xsZXI+KFxuICAgICAgICBmb3J3YXJkUmVmKCgpID0+IFRVSV9UUkVFX0NPTlRST0xMRVIpLFxuICAgICk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGxldmVsID0gaW5qZWN0PG51bWJlcj4oZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9MRVZFTCkpO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbnRlbnQgPSBpbmplY3Q8UG9seW1vcnBoZXVzQ29udGVudDxUdWlUcmVlSXRlbUNvbnRleHQ+PihcbiAgICAgICAgZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9DT05URU5UKSxcbiAgICApO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4cGFuZGVkID0gdG9TaWduYWwoXG4gICAgICAgIHRoaXMuY2hhbmdlJC5waXBlKFxuICAgICAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICAgICAgbWFwKCgpID0+IHRoaXMuaXNFeHBhbmRlZCksXG4gICAgICAgICksXG4gICAgICAgIHtpbml0aWFsVmFsdWU6IHRoaXMuaXNFeHBhbmRlZH0sXG4gICAgKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBhdHRhY2hlZCA9IHRvU2lnbmFsKFxuICAgICAgICB0aGlzLmNoYW5nZSQucGlwZShcbiAgICAgICAgICAgIG1hcCgoKSA9PiB0aGlzLmVsLmlzQ29ubmVjdGVkKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICksXG4gICAgICAgIHtpbml0aWFsVmFsdWU6IHRoaXMuZWwuaXNDb25uZWN0ZWR9LFxuICAgICk7XG5cbiAgICBwdWJsaWMgZ2V0IGlzRXhwYW5kYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5uZXN0ZWQubGVuZ3RoO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5pc0V4cGFuZGVkKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hlY2tDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoKTtcbiAgICB9XG59XG4iLCI8bmctdGVtcGxhdGUgI3RlbXBsYXRlPlxuICAgIDxuZy1jb250ZW50IC8+XG48L25nLXRlbXBsYXRlPlxuPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiY29udGVudCBhcyB0ZXh0OyBjb250ZXh0OiB7JGltcGxpY2l0OiB0aGlzLCB0ZW1wbGF0ZTogdGVtcGxhdGV9XCI+XG4gICAge3sgdGV4dCB9fVxuPC9uZy1jb250YWluZXI+XG48dHVpLWV4cGFuZFxuICAgICpuZ0lmPVwiaXNFeHBhbmRhYmxlXCJcbiAgICByb2xlPVwiZ3JvdXBcIlxuICAgIGNsYXNzPVwidC1jaGlsZHJlblwiXG4gICAgW2V4cGFuZGVkXT1cImV4cGFuZGVkKClcIlxuPlxuICAgIDxkaXY+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cInR1aS10cmVlLWl0ZW1cIiAvPlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJ0dWktdHJlZVwiIC8+XG4gICAgPC9kaXY+XG48L3R1aS1leHBhbmQ+XG48bmctY29udGFpbmVyICpuZ0lmPVwiYXR0YWNoZWQoKVwiIC8+XG4iXX0=