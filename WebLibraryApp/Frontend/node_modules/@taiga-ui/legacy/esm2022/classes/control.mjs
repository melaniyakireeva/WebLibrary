/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
import { ChangeDetectorRef, DestroyRef, Directive, inject, Input } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { NgControl, NgModel } from '@angular/forms';
import { TuiControl, TuiValueTransformer } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiIsPresent, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { delay, distinctUntilChanged, EMPTY, filter, map, merge, startWith, Subject, switchMap, } from 'rxjs';
import { AbstractTuiInteractive } from './interactive';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0
 * Basic ControlValueAccessor class to build form components upon
 */
class AbstractTuiControl extends AbstractTuiInteractive {
    constructor() {
        super();
        this.ngControl = inject(NgControl, { optional: true });
        this.refresh$ = new Subject();
        this.onTouched = EMPTY_FUNCTION;
        this.onChange = EMPTY_FUNCTION;
        this.fallbackValue = this.getFallbackValue();
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.valueTransformer = inject(TuiValueTransformer, { optional: true });
        this.readOnly = false;
        this.pseudoInvalid = null;
        if (ngDevMode && this.ngControl === null) {
            console.assert(false, `NgControl not injected in ${this.constructor.name}!\n`, 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
        }
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    get computedInvalid() {
        return (this.interactive &&
            (this.pseudoInvalid !== null
                ? this.pseudoInvalid
                : this.touched && this.invalid));
    }
    get value() {
        return this.previousInternalValue ?? this.fallbackValue;
    }
    set value(value) {
        this.updateValue(value);
    }
    get safeCurrentValue() {
        return this.rawValue ?? this.fallbackValue;
    }
    get invalid() {
        return this.safeNgControlData(({ invalid }) => invalid, false);
    }
    get valid() {
        return this.safeNgControlData(({ valid }) => valid, false);
    }
    get touched() {
        return this.safeNgControlData(({ touched }) => touched, false);
    }
    get disabled() {
        return this.safeNgControlData(({ disabled }) => disabled, false);
    }
    get interactive() {
        return !this.readOnly && !this.computedDisabled;
    }
    get control() {
        return this.safeNgControlData(({ control }) => control, null);
    }
    get computedName() {
        return this.controlName?.toString() ?? null;
    }
    get controlName() {
        return this.ngControl?.name?.toString() ?? null;
    }
    ngOnInit() {
        this.refresh$
            .pipe(delay(0), startWith(null), map(() => this.ngControl?.control), filter(tuiIsPresent), distinctUntilChanged(), switchMap((control) => merge(control.valueChanges, control.statusChanges, control.events || EMPTY)), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.refreshLocalValue(this.safeCurrentValue);
        });
    }
    checkControlUpdate() {
        this.cdr.markForCheck();
    }
    registerOnChange(onChange) {
        this.onChange = (componentValue) => {
            onChange(this.toControlValue(componentValue));
        };
        this.refresh$.next();
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState() {
        this.checkControlUpdate();
    }
    writeValue(value) {
        const controlValue = this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value;
        this.refreshLocalValue(this.fromControlValue(controlValue));
    }
    updateFocused(focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        super.updateFocused(focused);
    }
    /**
     * @deprecated use `value` setter
     */
    updateValue(value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    }
    valueIdenticalComparator(oldValue, newValue) {
        return oldValue === newValue;
    }
    get rawValue() {
        const { ngControl } = this;
        if (ngControl === null) {
            return undefined;
        }
        const controlValue = ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? ngControl.viewModel
            : ngControl.value;
        return this.fromControlValue(controlValue);
    }
    safeNgControlData(extractor, defaultFieldValue) {
        return (this.ngControl && extractor(this.ngControl)) ?? defaultFieldValue;
    }
    controlMarkAsTouched() {
        this.onTouched();
        this.checkControlUpdate();
    }
    controlSetValue(value) {
        this.onChange(value);
        this.checkControlUpdate();
    }
    refreshLocalValue(value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    }
    fromControlValue(controlValue) {
        return this.valueTransformer
            ? this.valueTransformer.fromControlValue(controlValue)
            : controlValue;
    }
    toControlValue(componentValue) {
        return this.valueTransformer
            ? this.valueTransformer.toControlValue(componentValue)
            : componentValue;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiControl, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: AbstractTuiControl, inputs: { readOnly: "readOnly", pseudoInvalid: "pseudoInvalid" }, host: { properties: { "class._readonly": "readOnly", "class._invalid": "computedInvalid" } }, usesInheritance: true, ngImport: i0 }); }
}
export { AbstractTuiControl };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiControl, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    host: {
                        '[class._readonly]': 'readOnly',
                        '[class._invalid]': 'computedInvalid',
                    },
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { readOnly: [{
                type: Input
            }], pseudoInvalid: [{
                type: Input
            }] } });
export function tuiAsControl(control) {
    return [tuiProvide(AbstractTuiControl, control), tuiProvide(TuiControl, control)];
}
//# sourceMappingURL=data:application/json;base64,