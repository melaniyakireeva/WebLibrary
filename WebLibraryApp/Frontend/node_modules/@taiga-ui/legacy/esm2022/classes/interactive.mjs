import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
const TUI = 'tui_interactive_';
/**
 * @deprecated: drop in v5.0
 */
class AbstractTuiInteractive {
    constructor() {
        this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;
        this.focusVisible = false;
        this.pseudoHover = null;
        this.pseudoActive = null;
        this.pseudoFocus = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = '';
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
    }
    static { this.autoId = 0; }
    get computedDisabled() {
        return this.disabled;
    }
    get computedFocused() {
        return !this.computedDisabled && (this.pseudoFocus ?? this.focused);
    }
    get computedFocusVisible() {
        return !this.computedDisabled && (this.pseudoFocus ?? this.focusVisible);
    }
    get computedFocusable() {
        return !this.computedDisabled && (this.focusable || this.focused);
    }
    // TODO: 3.0 Consider removing since native input is exposed
    get id() {
        return this.nativeId || this.autoIdString;
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
    updateFocusVisible(focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiInteractive, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: AbstractTuiInteractive, inputs: { pseudoHover: "pseudoHover", pseudoActive: "pseudoActive", pseudoFocus: "pseudoFocus", focusable: "focusable", nativeId: "nativeId" }, outputs: { focusedChange: "focusedChange", focusVisibleChange: "focusVisibleChange" }, host: { properties: { "attr.data-focused": "pseudoFocus", "class._disabled": "computedDisabled", "class._focused": "computedFocused", "class._focus-visible": "computedFocusVisible" } }, ngImport: i0 }); }
}
export { AbstractTuiInteractive };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiInteractive, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    host: {
                        '[attr.data-focused]': 'pseudoFocus',
                        '[class._disabled]': 'computedDisabled',
                        '[class._focused]': 'computedFocused',
                        '[class._focus-visible]': 'computedFocusVisible',
                    },
                }]
        }], propDecorators: { pseudoHover: [{
                type: Input
            }], pseudoActive: [{
                type: Input
            }], pseudoFocus: [{
                type: Input
            }], focusable: [{
                type: Input
            }], nativeId: [{
                type: Input
            }], focusedChange: [{
                type: Output
            }], focusVisibleChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY2xhc3Nlcy9pbnRlcmFjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUVyRSxNQUFNLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztBQUUvQjs7R0FFRztBQUNILE1BU3NCLHNCQUFzQjtJQVQ1QztRQWdCcUIsaUJBQVksR0FBVyxHQUFHLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUV0RixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUd4QixnQkFBVyxHQUFtQixJQUFJLENBQUM7UUFHbkMsaUJBQVksR0FBbUIsSUFBSSxDQUFDO1FBR3BDLGdCQUFXLEdBQW1CLElBQUksQ0FBQztRQUUxQzs7V0FFRztRQUVJLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFHakIsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUVyQjs7V0FFRztRQUVhLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUc1Qyx1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0tBbUNwRTthQXRFa0IsV0FBTSxHQUFHLENBQUMsQUFBSixDQUFLO0lBcUMxQixJQUFXLGdCQUFnQjtRQUN2QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELElBQVcsZUFBZTtRQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELElBQVcsb0JBQW9CO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsSUFBVyxpQkFBaUI7UUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCw0REFBNEQ7SUFDNUQsSUFBVyxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDOUMsQ0FBQztJQUVTLGFBQWEsQ0FBQyxPQUFnQjtRQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRVMsa0JBQWtCLENBQUMsWUFBcUI7UUFDOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFlBQVksRUFBRTtZQUNwQyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQy9DLENBQUM7K0dBdEVpQixzQkFBc0I7bUdBQXRCLHNCQUFzQjs7U0FBdEIsc0JBQXNCOzRGQUF0QixzQkFBc0I7a0JBVDNDLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLElBQUksRUFBRTt3QkFDRixxQkFBcUIsRUFBRSxhQUFhO3dCQUNwQyxtQkFBbUIsRUFBRSxrQkFBa0I7d0JBQ3ZDLGtCQUFrQixFQUFFLGlCQUFpQjt3QkFDckMsd0JBQXdCLEVBQUUsc0JBQXNCO3FCQUNuRDtpQkFDSjs4QkFhVSxXQUFXO3NCQURqQixLQUFLO2dCQUlDLFlBQVk7c0JBRGxCLEtBQUs7Z0JBSUMsV0FBVztzQkFEakIsS0FBSztnQkFPQyxTQUFTO3NCQURmLEtBQUs7Z0JBSUMsUUFBUTtzQkFEZCxLQUFLO2dCQU9VLGFBQWE7c0JBRDVCLE1BQU07Z0JBSVMsa0JBQWtCO3NCQURqQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IFRVSSA9ICd0dWlfaW50ZXJhY3RpdmVfJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogZHJvcCBpbiB2NS4wXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IGZhbHNlLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmRhdGEtZm9jdXNlZF0nOiAncHNldWRvRm9jdXMnLFxuICAgICAgICAnW2NsYXNzLl9kaXNhYmxlZF0nOiAnY29tcHV0ZWREaXNhYmxlZCcsXG4gICAgICAgICdbY2xhc3MuX2ZvY3VzZWRdJzogJ2NvbXB1dGVkRm9jdXNlZCcsXG4gICAgICAgICdbY2xhc3MuX2ZvY3VzLXZpc2libGVdJzogJ2NvbXB1dGVkRm9jdXNWaXNpYmxlJyxcbiAgICB9LFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aUludGVyYWN0aXZlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBhdXRvSWQgPSAwO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGRpc2FibGVkOiBib29sZWFuO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dG9JZFN0cmluZzogc3RyaW5nID0gYCR7VFVJfSR7QWJzdHJhY3RUdWlJbnRlcmFjdGl2ZS5hdXRvSWQrK30ke0RhdGUubm93KCl9YDtcblxuICAgIHByb3RlY3RlZCBmb2N1c1Zpc2libGUgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHBzZXVkb0hvdmVyOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBwc2V1ZG9BY3RpdmU6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHBzZXVkb0ZvY3VzOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGNvbXBvbmVudCBpcyBmb2N1c2FibGUgd2l0aCBrZXlib2FyZC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBmb2N1c2FibGUgPSB0cnVlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbmF0aXZlSWQgPSAnJztcblxuICAgIC8qKlxuICAgICAqIEVtaXRzICd0cnVlJyBvbiBmb2N1cyBhbmQgJ2ZhbHNlJyBvbiBibHVyLlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyByZWFkb25seSBmb2N1c2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHJlYWRvbmx5IGZvY3VzVmlzaWJsZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIHB1YmxpYyBnZXQgY29tcHV0ZWREaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb21wdXRlZEZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb21wdXRlZERpc2FibGVkICYmICh0aGlzLnBzZXVkb0ZvY3VzID8/IHRoaXMuZm9jdXNlZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb21wdXRlZEZvY3VzVmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmNvbXB1dGVkRGlzYWJsZWQgJiYgKHRoaXMucHNldWRvRm9jdXMgPz8gdGhpcy5mb2N1c1Zpc2libGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY29tcHV0ZWRGb2N1c2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb21wdXRlZERpc2FibGVkICYmICh0aGlzLmZvY3VzYWJsZSB8fCB0aGlzLmZvY3VzZWQpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IDMuMCBDb25zaWRlciByZW1vdmluZyBzaW5jZSBuYXRpdmUgaW5wdXQgaXMgZXhwb3NlZFxuICAgIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlSWQgfHwgdGhpcy5hdXRvSWRTdHJpbmc7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUZvY3VzZWQoZm9jdXNlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmZvY3VzZWRDaGFuZ2UuZW1pdChmb2N1c2VkKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlRm9jdXNWaXNpYmxlKGZvY3VzVmlzaWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5mb2N1c1Zpc2libGUgPT09IGZvY3VzVmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mb2N1c1Zpc2libGUgPSBmb2N1c1Zpc2libGU7XG4gICAgICAgIHRoaXMuZm9jdXNWaXNpYmxlQ2hhbmdlLmVtaXQoZm9jdXNWaXNpYmxlKTtcbiAgICB9XG59XG4iXX0=