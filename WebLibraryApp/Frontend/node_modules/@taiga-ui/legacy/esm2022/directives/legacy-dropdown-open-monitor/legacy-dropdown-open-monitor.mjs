import { Directive, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiGetClosestFocusable } from '@taiga-ui/cdk/utils/focus';
import { TuiDropdownOpen, TuiDropdownOpenLegacy } from '@taiga-ui/core/directives/dropdown';
import { distinctUntilChanged } from 'rxjs';
import * as i0 from "@angular/core";
class TuiLegacyDropdownOpenMonitorDirective {
    constructor() {
        this.el = tuiInjectElement();
        this.host = inject(TuiDropdownOpen, { self: true });
        this.external = inject(TuiDropdownOpenLegacy, {
            optional: true,
        });
        this.$ = this.host.driver
            .pipe(distinctUntilChanged(), takeUntilDestroyed())
            .subscribe((open) => this.external?.tuiDropdownOpenChange.next(open));
        this.$1 = this.external?.tuiDropdownOpenChange
            .pipe(distinctUntilChanged(), takeUntilDestroyed())
            .subscribe((open) => {
            if (open) {
                tuiGetClosestFocusable({
                    initial: this.el,
                    root: this.el,
                })?.focus();
            }
            this.host.toggle(open);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLegacyDropdownOpenMonitorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiLegacyDropdownOpenMonitorDirective, isStandalone: true, selector: "[tuiDropdownOpenMonitor]", ngImport: i0 }); }
}
export { TuiLegacyDropdownOpenMonitorDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLegacyDropdownOpenMonitorDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiDropdownOpenMonitor]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWRyb3Bkb3duLW9wZW4tbW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9kaXJlY3RpdmVzL2xlZ2FjeS1kcm9wZG93bi1vcGVuLW1vbml0b3IvbGVnYWN5LWRyb3Bkb3duLW9wZW4tbW9uaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDMUYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUUxQyxNQUlhLHFDQUFxQztJQUpsRDtRQUtxQixPQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixTQUFJLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzdDLGFBQVEsR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUU7WUFDdEQsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRWdCLE1BQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDbEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQzthQUNsRCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdkQsT0FBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUscUJBQXFCO2FBQ3ZELElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLGtCQUFrQixFQUFFLENBQUM7YUFDbEQsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDaEIsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sc0JBQXNCLENBQUM7b0JBQ25CLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRTtvQkFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO2lCQUNoQixDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7YUFDZjtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0tBQ1Y7K0dBdkJZLHFDQUFxQzttR0FBckMscUNBQXFDOztTQUFyQyxxQ0FBcUM7NEZBQXJDLHFDQUFxQztrQkFKakQsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLDBCQUEwQjtpQkFDdkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dGFrZVVudGlsRGVzdHJveWVkfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7dHVpR2V0Q2xvc2VzdEZvY3VzYWJsZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9mb2N1cyc7XG5pbXBvcnQge1R1aURyb3Bkb3duT3BlbiwgVHVpRHJvcGRvd25PcGVuTGVnYWN5fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL2Ryb3Bkb3duJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWR9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnW3R1aURyb3Bkb3duT3Blbk1vbml0b3JdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTGVnYWN5RHJvcGRvd25PcGVuTW9uaXRvckRpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCA9IHR1aUluamVjdEVsZW1lbnQoKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhvc3QgPSBpbmplY3QoVHVpRHJvcGRvd25PcGVuLCB7c2VsZjogdHJ1ZX0pO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZXh0ZXJuYWwgPSBpbmplY3QoVHVpRHJvcGRvd25PcGVuTGVnYWN5LCB7XG4gICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5ICQgPSB0aGlzLmhvc3QuZHJpdmVyXG4gICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHRha2VVbnRpbERlc3Ryb3llZCgpKVxuICAgICAgICAuc3Vic2NyaWJlKChvcGVuKSA9PiB0aGlzLmV4dGVybmFsPy50dWlEcm9wZG93bk9wZW5DaGFuZ2UubmV4dChvcGVuKSk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgJDEgPSB0aGlzLmV4dGVybmFsPy50dWlEcm9wZG93bk9wZW5DaGFuZ2VcbiAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgdGFrZVVudGlsRGVzdHJveWVkKCkpXG4gICAgICAgIC5zdWJzY3JpYmUoKG9wZW4pID0+IHtcbiAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgdHVpR2V0Q2xvc2VzdEZvY3VzYWJsZSh7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWw6IHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgfSk/LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaG9zdC50b2dnbGUob3Blbik7XG4gICAgICAgIH0pO1xufVxuIl19