import { DestroyRef, Directive, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { distinctUntilChanged, filter, map, throttleTime, timer, withLatestFrom, } from 'rxjs';
import { TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
class TuiSheetStopDirective {
    constructor() {
        this.scrollRef = inject(TUI_SCROLL_REF).nativeElement;
        this.destroyRef = inject(DestroyRef);
        this.el = tuiInjectElement();
        this.$ = inject(TUI_SHEET_SCROLL)
            .pipe(map((y) => Math.floor(y) > this.el.offsetTop), distinctUntilChanged(), withLatestFrom(inject(TUI_SHEET_DRAGGED)), map(([above, dragged]) => !above && !dragged), filter(Boolean), throttleTime(100), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.scrollRef.style.overflow = 'hidden';
            this.scrollRef.classList.remove('_stuck'); // iOS
            this.scrollRef.scrollTop = this.el.offsetTop;
            timer(100)
                .pipe(takeUntilDestroyed(this.destroyRef))
                // eslint-disable-next-line rxjs/no-nested-subscribe
                .subscribe(() => {
                this.scrollRef.style.overflow = '';
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetStopDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetStopDirective, selector: "[tuiSheetStop]", ngImport: i0 }); }
}
export { TuiSheetStopDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetStopDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiSheetStop]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQtc3RvcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9zaGVldC9kaXJlY3RpdmVzL3NoZWV0LXN0b3Avc2hlZXQtc3RvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLE1BQU0sRUFDTixHQUFHLEVBQ0gsWUFBWSxFQUNaLEtBQUssRUFDTCxjQUFjLEdBQ2pCLE1BQU0sTUFBTSxDQUFDO0FBRWQsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7O0FBRXZFLE1BSWEscUJBQXFCO0lBSmxDO1FBS3FCLGNBQVMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ2pELGVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEMsT0FBRSxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFFdEIsTUFBQyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQzthQUMxQyxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQzdDLG9CQUFvQixFQUFFLEVBQ3RCLGNBQWMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUN6QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUN0QzthQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFFN0MsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDTCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMxQyxvREFBb0Q7aUJBQ25ELFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0tBQ1Y7K0dBM0JZLHFCQUFxQjttR0FBckIscUJBQXFCOztTQUFyQixxQkFBcUI7NEZBQXJCLHFCQUFxQjtrQkFKakMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsS0FBSztvQkFDakIsUUFBUSxFQUFFLGdCQUFnQjtpQkFDN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Rlc3Ryb3lSZWYsIERpcmVjdGl2ZSwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dGFrZVVudGlsRGVzdHJveWVkfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7VFVJX1NDUk9MTF9SRUZ9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBtYXAsXG4gICAgdGhyb3R0bGVUaW1lLFxuICAgIHRpbWVyLFxuICAgIHdpdGhMYXRlc3RGcm9tLFxufSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUVUlfU0hFRVRfRFJBR0dFRCwgVFVJX1NIRUVUX1NDUk9MTH0gZnJvbSAnLi4vLi4vc2hlZXQtdG9rZW5zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdbdHVpU2hlZXRTdG9wXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNoZWV0U3RvcERpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxSZWYgPSBpbmplY3QoVFVJX1NDUk9MTF9SRUYpLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95UmVmID0gaW5qZWN0KERlc3Ryb3lSZWYpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50KCk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgJCA9IGluamVjdChUVUlfU0hFRVRfU0NST0xMKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcCgoeSkgPT4gTWF0aC5mbG9vcih5KSA+IHRoaXMuZWwub2Zmc2V0VG9wKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICB3aXRoTGF0ZXN0RnJvbShpbmplY3QoVFVJX1NIRUVUX0RSQUdHRUQpKSxcbiAgICAgICAgICAgIG1hcCgoW2Fib3ZlLCBkcmFnZ2VkXSkgPT4gIWFib3ZlICYmICFkcmFnZ2VkKSxcbiAgICAgICAgICAgIGZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgICAgIHRocm90dGxlVGltZSgxMDApLFxuICAgICAgICAgICAgdGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZiksXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFJlZi5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxSZWYuY2xhc3NMaXN0LnJlbW92ZSgnX3N0dWNrJyk7IC8vIGlPU1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxSZWYuc2Nyb2xsVG9wID0gdGhpcy5lbC5vZmZzZXRUb3A7XG5cbiAgICAgICAgICAgIHRpbWVyKDEwMClcbiAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSlcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcnhqcy9uby1uZXN0ZWQtc3Vic2NyaWJlXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsUmVmLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xufVxuIl19