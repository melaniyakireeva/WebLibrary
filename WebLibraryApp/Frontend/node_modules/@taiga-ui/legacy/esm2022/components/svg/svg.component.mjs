import { __decorate } from "tslib";
/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
import { AsyncPipe, DOCUMENT, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject, Input, SecurityContext, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { WA_WINDOW } from '@ng-web-apis/common';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { TUI_BASE_HREF } from '@taiga-ui/cdk/tokens';
import { tuiGetDocumentOrShadowRoot, tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsString, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiStaticRequestService } from '@taiga-ui/legacy/services';
import { TUI_SANITIZER } from '@taiga-ui/legacy/tokens';
import { TUI_CACHE_BUSTING_PAYLOAD, tuiIsPresumedHTMLString } from '@taiga-ui/legacy/utils';
import { catchError, map, of, ReplaySubject, startWith, switchMap } from 'rxjs';
import { TuiSvgService } from './svg.service';
import { TUI_SVG_OPTIONS, TUI_SVG_SRC_INTERCEPTORS } from './svg-options';
import * as i0 from "@angular/core";
const UNDEFINED_NAMED_ICON = 'Attempted to use undefined named icon';
const MISSING_EXTERNAL_ICON = 'External icon is missing on the given URL';
const FAILED_EXTERNAL_ICON = 'Failed to load external SVG';
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
class TuiSvgComponent {
    constructor() {
        this.icon = '';
        this.doc = inject(DOCUMENT);
        this.win = inject(WA_WINDOW);
        this.options = inject(TUI_SVG_OPTIONS);
        this.tuiSanitizer = inject(TUI_SANITIZER, { optional: true });
        this.svgService = inject(TuiSvgService);
        this.staticRequestService = inject(TuiStaticRequestService);
        this.sanitizer = inject(DomSanitizer);
        this.el = tuiInjectElement();
        this.baseHref = inject(TUI_BASE_HREF);
        this.src$ = new ReplaySubject(1);
        this.srcInterceptors = inject(TUI_SVG_SRC_INTERCEPTORS, {
            optional: true,
        });
        this.innerHTML$ = this.src$.pipe(switchMap(() => {
            if (tuiIsString(this.icon)) {
                return this.isExternal
                    ? this.getExternalIcon(this.icon)
                    : of(this.getSafeHtml(this.icon));
            }
            return of(this.icon);
        }), startWith(''));
    }
    set src(src) {
        const deprecated = this.options.deprecated(String(src));
        ngDevMode && console.assert(!deprecated, deprecated);
        this.icon = (this.srcInterceptors ?? []).reduce((newSrc, interceptor) => interceptor(newSrc, this.options), this.options.srcProcessor(src || ''));
        this.src$.next();
    }
    get src() {
        return this.icon;
    }
    get use() {
        if (tuiIsString(this.icon)) {
            return this.icon.includes('.svg#')
                ? this.icon
                : this.resolveName(this.icon, this.options.path);
        }
        return '';
    }
    get isInnerHTML() {
        return (!tuiIsString(this.icon) ||
            this.isSrc ||
            this.isExternal ||
            (this.isName && this.isShadowDOM));
    }
    onError(message = MISSING_EXTERNAL_ICON) {
        const { icon } = this;
        const event = new CustomEvent('tui-icon-error', {
            bubbles: true,
            detail: {
                message,
                icon: icon,
            },
        });
        ngDevMode && console.assert(false, message, icon);
        this.el.dispatchEvent(event);
    }
    get isShadowDOM() {
        return tuiGetDocumentOrShadowRoot(this.el) !== this.doc;
    }
    get isUse() {
        return this.use.replace(TUI_CACHE_BUSTING_PAYLOAD, '').includes('.svg#');
    }
    get isExternal() {
        return (this.isUrl ||
            this.isCrossDomain ||
            (!this.isSrc && !this.svgService.getOriginal(String(this.icon))));
    }
    get isUrl() {
        return (tuiIsString(this.icon) &&
            this.icon.replace(TUI_CACHE_BUSTING_PAYLOAD, '').endsWith('.svg'));
    }
    get isSrc() {
        return tuiIsString(this.icon) && tuiIsPresumedHTMLString(this.icon);
    }
    get isName() {
        return !this.isUrl && !this.isUse && !this.isSrc;
    }
    get isCrossDomain() {
        const { use, isUse, win } = this;
        return (isUse && use.startsWith('http') && !!win.origin && !use.startsWith(win.origin));
    }
    resolveName(name, iconsPath) {
        return iconsPath(name, this.baseHref);
    }
    getSafeHtml(src) {
        return this.isSrc ? this.sanitize(src) : this.process(src);
    }
    process(src) {
        const icon = this.svgService.getOriginal(src);
        if (this.isName && !icon && !!src) {
            this.onError(UNDEFINED_NAMED_ICON);
        }
        return this.sanitize(icon || '');
    }
    sanitize(src) {
        src = this.options.contentProcessor(src);
        return this.tuiSanitizer && tuiIsString(src)
            ? this.sanitizer.bypassSecurityTrustHtml(this.tuiSanitizer.sanitize(SecurityContext.HTML, src) || '')
            : src;
    }
    getExternalIcon(src) {
        const url = src.includes('.svg') ? src : this.use;
        return this.staticRequestService.request(url).pipe(catchError(() => {
            this.onError(FAILED_EXTERNAL_ICON);
            return of('');
        }), map((response) => this.sanitize(response.replace('<svg', '<svg focusable="false"'))));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSvgComponent, isStandalone: true, selector: "tui-svg", inputs: { src: "src" }, ngImport: i0, template: "<div\n    class=\"t-src\"\n    [innerHTML]=\"innerHTML$ | async\"\n></div>\n", styles: [":host{display:inline-flex;vertical-align:middle;flex-shrink:0;align-items:center;justify-content:center;line-height:0;block-size:1.5rem;inline-size:1.5rem;fill:transparent;stroke:transparent;font-size:1rem}.t-src{display:flex;inline-size:100%;block-size:100%;align-items:center;justify-content:center}.t-svg{overflow:visible}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiSvgComponent.prototype, "resolveName", null);
export { TuiSvgComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-svg', imports: [AsyncPipe, NgIf, TuiLet], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n    class=\"t-src\"\n    [innerHTML]=\"innerHTML$ | async\"\n></div>\n", styles: [":host{display:inline-flex;vertical-align:middle;flex-shrink:0;align-items:center;justify-content:center;line-height:0;block-size:1.5rem;inline-size:1.5rem;fill:transparent;stroke:transparent;font-size:1rem}.t-src{display:flex;inline-size:100%;block-size:100%;align-items:center;justify-content:center}.t-svg{overflow:visible}\n"] }]
        }], propDecorators: { src: [{
                type: Input
            }], resolveName: [] } });
//# sourceMappingURL=data:application/json;base64,