import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, inject, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { EMPTY_ARRAY, TUI_TRUE_HANDLER } from '@taiga-ui/cdk/constants';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiGetClipboardDataText } from '@taiga-ui/cdk/utils/dom';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiArrayToggle, tuiIsString, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_ACCESSOR, tuiAsDataListHost, TuiDataListDirective, } from '@taiga-ui/core/components/data-list';
import { TuiDropdownFixed, TuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { AbstractTuiMultipleControl, tuiAsControl, TuiStringifiableItem, } from '@taiga-ui/legacy/classes';
import { TUI_ARROW_MODE } from '@taiga-ui/legacy/components/arrow';
import { TUI_INPUT_TAG_OPTIONS, TuiInputTagComponent, } from '@taiga-ui/legacy/components/input-tag';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { TUI_MULTI_SELECT_OPTIONS } from './multi-select.options';
import { AbstractTuiNativeMultiSelect } from './native-multi-select/native-multi-select';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/dropdown";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@taiga-ui/polymorpheus";
import * as i5 from "@taiga-ui/legacy/directives";
import * as i6 from "@taiga-ui/legacy/components/input-tag";
import * as i7 from "@taiga-ui/cdk/pipes/mapper";
class TuiMultiSelectComponent extends AbstractTuiMultipleControl {
    constructor() {
        super(...arguments);
        this.arrowMode = inject(TUI_ARROW_MODE);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.options = inject(TUI_MULTI_SELECT_OPTIONS);
        this.inputTagOptions = inject(TUI_INPUT_TAG_OPTIONS);
        this.open = false;
        this.controller = inject(TUI_TEXTFIELD_WATCHED_CONTROLLER);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.search = '';
        this.placeholder = '';
        this.editable = true;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.valueContent = this.options.valueContent;
        this.tagValidator = TUI_TRUE_HANDLER;
        this.rows = this.options.rows;
        this.autoColor = false;
        this.searchChange = new EventEmitter();
        this.valueMapper = (value, stringify, group) => group
            ? EMPTY_ARRAY
            : value.map((item) => new TuiStringifiableItem(item, stringify));
        this.disabledItemHandlerWrapper = (handler) => (stringifiable) => tuiIsString(stringifiable) || handler(stringifiable.item);
    }
    get size() {
        return this.controller.size;
    }
    get nativeFocusableElement() {
        return this.input?.nativeFocusableElement ?? null;
    }
    get focused() {
        return !!this.input?.focused || !!this.dropdown?.tuiDropdownOpen;
    }
    onValueChange(value) {
        this.value = value;
    }
    onSearch(search) {
        // Clearing sets the empty value, the dropdown should not be opened on clear.
        if (search !== '') {
            this.open = true;
        }
        this.updateSearch(search);
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    handleOption(option) {
        const { value, identityMatcher } = this;
        const index = value.findIndex((item) => identityMatcher(item, option));
        this.value =
            index === -1 ? [...value, option] : value.filter((_, i) => i !== index);
        this.updateSearch(null);
    }
    get arrow() {
        return this.interactive ? this.arrowMode.interactive : this.arrowMode.disabled;
    }
    get nativeDropdownMode() {
        return !!this.nativeSelect && this.isMobile && !this.editable;
    }
    get computedValue() {
        return this.computedGroup ? EMPTY_ARRAY : this.value;
    }
    // @bad TODO: think of a better way
    get searchOrSpace() {
        return this.computedGroup ? ' ' : this.searchString;
    }
    get searchString() {
        return this.search === null ? '' : this.search;
    }
    get computedGroup() {
        return (!!this.valueContent &&
            this.value.length > 0 &&
            (!this.focused || !this.editable));
    }
    getStringifier(stringify) {
        return ({ $implicit }) => stringify($implicit);
    }
    onSpace(event) {
        if (!this.editable) {
            event.preventDefault();
        }
        if (!this.readOnly) {
            this.open = true;
        }
    }
    onEnter(event) {
        const { value } = this;
        const options = this.accessor ? this.accessor.getOptions() : [];
        if (options.length !== 1) {
            return;
        }
        event.preventDefault();
        this.value = options[0] ? tuiArrayToggle(value, options[0]) : value;
        this.updateSearch(null);
    }
    onKeyDown(event) {
        if (event.key === this.inputTagOptions.separator) {
            this.onEnter(event);
        }
    }
    onPaste(event) {
        const pasted = tuiGetClipboardDataText(event);
        const tags = pasted
            .split(this.inputTagOptions.separator)
            .map((tag) => tag.trim());
        const options = this.accessor?.getOptions() ?? [];
        const separator = tuiIsString(this.inputTagOptions.separator)
            ? this.inputTagOptions.separator
            : ',';
        const matches = options?.filter((option) => tags.includes(this.stringify(option))) ?? [];
        const matchingStrings = matches.map((v) => String(v));
        const invalid = tags.filter((value) => !matchingStrings.includes(value));
        this.value = this.filterValue([...this.value, ...matches]);
        this.updateSearch(invalid.length ? invalid.join(separator) : null);
    }
    onClick({ nativeFocusableElement }) {
        if (this.interactive &&
            nativeFocusableElement &&
            tuiIsNativeFocused(nativeFocusableElement)) {
            this.open = !this.open;
        }
    }
    onInput(value) {
        this.value = value.map(({ item }) => item);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    filterValue(value) {
        const seen = new Set();
        return value
            .reverse()
            .filter((item) => item && !seen.has(item) && seen.add(item))
            .reverse();
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectComponent, selector: "tui-multi-select", inputs: { stringify: "stringify", identityMatcher: "identityMatcher", search: "search", placeholder: "placeholder", editable: "editable", disabledItemHandler: "disabledItemHandler", valueContent: "valueContent", tagValidator: "tagValidator", rows: "rows", autoColor: "autoColor" }, outputs: { searchChange: "searchChange" }, host: { properties: { "attr.data-size": "size", "class._editable": "editable", "class._expandable": "rows > 1" } }, providers: [
            tuiAsFocusableItemAccessor(TuiMultiSelectComponent),
            tuiAsControl(TuiMultiSelectComponent),
            tuiAsDataListHost(TuiMultiSelectComponent),
            TEXTFIELD_CONTROLLER_PROVIDER,
        ], queries: [{ propertyName: "accessor", first: true, predicate: TUI_DATA_LIST_ACCESSOR, descendants: true }, { propertyName: "nativeSelect", first: true, predicate: AbstractTuiNativeMultiSelect, descendants: true, static: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }, { propertyName: "input", first: true, predicate: TuiInputTagComponent, descendants: true }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiDropdownFixed }], ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [autoColor]=\"autoColor\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"false\"\n        [inputHidden]=\"!editable\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper : stringify\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [pseudoOpen]=\"open\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [search]=\"searchOrSpace\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        (click.prevent)=\"onClick(inputTag)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (keydown)=\"onKeyDown($event)\"\n        (ngModelChange)=\"onInput($event)\"\n        (paste.capture.stop.prevent)=\"onPaste($event)\"\n        (searchChange)=\"onSearch($event)\"\n    >\n        <ng-content />\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"computedGroup\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-content\"\n            [class.t-content_fullsize]=\"inputTag.labelOutside\"\n        >\n            <span\n                *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </span>\n        </div>\n    </tui-input-tag>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            automation-id=\"tui-multi-select__arrow\"\n            tuiWrapper\n            class=\"t-arrow\"\n            [class.t-arrow_native-dropdown]=\"nativeDropdownMode\"\n            (mousedown.prevent.silent)=\"(0)\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow as text\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-content{display:flex;align-items:center;pointer-events:none;box-sizing:border-box}.t-primitive{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-arrow{pointer-events:auto;cursor:pointer}.t-arrow_native-dropdown{pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: i5.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { kind: "component", type: i6.TuiInputTagComponent, selector: "tui-input-tag", inputs: ["separator", "search", "editable", "tagValidator", "rows", "inputHidden", "uniqueTags", "autoColor", "maxLength", "placeholder", "removable", "pseudoOpen", "disabledItemHandler", "pseudoFocused"], outputs: ["searchChange"] }, { kind: "directive", type: i1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "directive", type: i5.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i5.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "pipe", type: i7.TuiMapperPipe, name: "tuiMapper" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiMultiSelectComponent.prototype, "getStringifier", null);
export { TuiMultiSelectComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-multi-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiMultiSelectComponent),
                        tuiAsControl(TuiMultiSelectComponent),
                        tuiAsDataListHost(TuiMultiSelectComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ], hostDirectives: [TuiDropdownFixed], host: {
                        '[attr.data-size]': 'size',
                        '[class._editable]': 'editable',
                        '[class._expandable]': 'rows > 1',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [autoColor]=\"autoColor\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"false\"\n        [inputHidden]=\"!editable\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper : stringify\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [pseudoOpen]=\"open\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [search]=\"searchOrSpace\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        (click.prevent)=\"onClick(inputTag)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (keydown)=\"onKeyDown($event)\"\n        (ngModelChange)=\"onInput($event)\"\n        (paste.capture.stop.prevent)=\"onPaste($event)\"\n        (searchChange)=\"onSearch($event)\"\n    >\n        <ng-content />\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"computedGroup\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-content\"\n            [class.t-content_fullsize]=\"inputTag.labelOutside\"\n        >\n            <span\n                *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </span>\n        </div>\n    </tui-input-tag>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            automation-id=\"tui-multi-select__arrow\"\n            tuiWrapper\n            class=\"t-arrow\"\n            [class.t-arrow_native-dropdown]=\"nativeDropdownMode\"\n            (mousedown.prevent.silent)=\"(0)\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow as text\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-content{display:flex;align-items:center;pointer-events:none;box-sizing:border-box}.t-primitive{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-arrow{pointer-events:auto;cursor:pointer}.t-arrow_native-dropdown{pointer-events:none}\n"] }]
        }], propDecorators: { accessor: [{
                type: ContentChild,
                args: [TUI_DATA_LIST_ACCESSOR]
            }], nativeSelect: [{
                type: ContentChild,
                args: [AbstractTuiNativeMultiSelect, { static: true }]
            }], dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], input: [{
                type: ViewChild,
                args: [TuiInputTagComponent]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], search: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], editable: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], tagValidator: [{
                type: Input
            }], rows: [{
                type: Input
            }], autoColor: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], getStringifier: [] } });
//# sourceMappingURL=data:application/json;base64,