import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';
export const TUI_COLOR_SELECTOR_MODE_NAMES = tuiCreateToken([
    'Solid color',
    'Gradient',
]);
export const TUI_DEFAULT_INPUT_COLORS = new Map([
    ['color-black-100', '#909090'],
    ['color-black-200', '#666666'],
    ['color-black-300', '#333333'],
    ['color-blue-100', '#1771e6'],
    ['color-blue-200', '#1464cc'],
    ['color-blue-300', '#0953b3'],
    ['color-gray-100', '#f5f5f6'],
    ['color-gray-200', '#e7e8ea'],
    ['color-gray-300', '#cbcfd3'],
    ['color-gray-400', '#959ba4'],
    ['color-gray-500', '#79818c'],
    ['color-gray-600', '#616871'],
    ['color-green-100', '#39b54a'],
    ['color-green-200', '#2ca53a'],
    ['color-green-300', '#168a21'],
    ['color-light-blue-100', '#ecf1f7'],
    ['color-light-blue-200', '#e4ebf3'],
    ['color-light-blue-300', '#dde4ed'],
    ['color-red-100', '#e01f19'],
    ['color-red-200', '#d3120e'],
    ['color-red-300', '#c40b08'],
    ['color-yellow-100', '#FFDD2C'],
    ['color-yellow-200', '#FCC521'],
    ['color-yellow-300', '#FAB618'],
    ['transparent', 'transparent'],
]);
export const TuiColorSelectorMode = {
    SolidColor: 0,
    Gradient: 1,
};
export const TUI_COLOR_SELECTOR_DEFAULT_OPTIONS = {
    selectorMode: true,
    mode: TuiColorSelectorMode.SolidColor,
    color: [0, 0, 0, 1],
    colors: new Map(),
    gradient: {
        icons: {
            'to top right': '@tui.move-up-right',
            'to right': '@tui.move-right',
            'to bottom right': '@tui.move-down-right',
            'to bottom': '@tui.move-down',
            'to bottom left': '@tui.move-down-left',
            'to left': '@tui.move-left',
            'to top left': '@tui.move-up-left',
            'to top': '@tui.move-up',
        },
        steps: [
            [0, [0, 0, 0, 1]],
            [1, [255, 255, 255, 1]],
        ],
        stop: 0,
        direction: 'to bottom',
        emptyStop: [0, 0, 0, 0],
        buttons: [
            'to top right',
            'to right',
            'to bottom right',
            'to bottom',
            'to bottom left',
            'to left',
            'to top left',
            'to top',
        ],
    },
};
export const TUI_COLOR_SELECTOR_OPTIONS = tuiCreateToken(TUI_COLOR_SELECTOR_DEFAULT_OPTIONS);
export function tuiColorSelectorOptionsProvider(options) {
    return tuiProvideOptions(TUI_COLOR_SELECTOR_OPTIONS, options, TUI_COLOR_SELECTOR_DEFAULT_OPTIONS);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3Itc2VsZWN0b3Iub3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL2NvbG9yLXNlbGVjdG9yL2NvbG9yLXNlbGVjdG9yLm9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXBGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLGNBQWMsQ0FBbUI7SUFDMUUsYUFBYTtJQUNiLFVBQVU7Q0FDYixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM1QyxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztJQUM3QixDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDLHNCQUFzQixFQUFFLFNBQVMsQ0FBQztJQUNuQyxDQUFDLHNCQUFzQixFQUFFLFNBQVMsQ0FBQztJQUNuQyxDQUFDLHNCQUFzQixFQUFFLFNBQVMsQ0FBQztJQUNuQyxDQUFDLGVBQWUsRUFBRSxTQUFTLENBQUM7SUFDNUIsQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDO0lBQzVCLENBQUMsZUFBZSxFQUFFLFNBQVMsQ0FBQztJQUM1QixDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQztJQUMvQixDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQztJQUMvQixDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQztJQUMvQixDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUM7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUc7SUFDaEMsVUFBVSxFQUFFLENBQUM7SUFDYixRQUFRLEVBQUUsQ0FBQztDQUNMLENBQUM7QUFpQlgsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQTRCO0lBQ3ZFLFlBQVksRUFBRSxJQUFJO0lBQ2xCLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxVQUFVO0lBQ3JDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQWtCO0lBQ2pDLFFBQVEsRUFBRTtRQUNOLEtBQUssRUFBRTtZQUNILGNBQWMsRUFBRSxvQkFBb0I7WUFDcEMsVUFBVSxFQUFFLGlCQUFpQjtZQUM3QixpQkFBaUIsRUFBRSxzQkFBc0I7WUFDekMsV0FBVyxFQUFFLGdCQUFnQjtZQUM3QixnQkFBZ0IsRUFBRSxxQkFBcUI7WUFDdkMsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixhQUFhLEVBQUUsbUJBQW1CO1lBQ2xDLFFBQVEsRUFBRSxjQUFjO1NBQzNCO1FBQ0QsS0FBSyxFQUFFO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqQixDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxFQUFFLENBQUM7UUFDUCxTQUFTLEVBQUUsV0FBVztRQUN0QixTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkIsT0FBTyxFQUFFO1lBQ0wsY0FBYztZQUNkLFVBQVU7WUFDVixpQkFBaUI7WUFDakIsV0FBVztZQUNYLGdCQUFnQjtZQUNoQixTQUFTO1lBQ1QsYUFBYTtZQUNiLFFBQVE7U0FDWDtLQUNKO0NBQ0osQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLGNBQWMsQ0FDcEQsa0NBQWtDLENBQ3JDLENBQUM7QUFFRixNQUFNLFVBQVUsK0JBQStCLENBQzNDLE9BQXlDO0lBRXpDLE9BQU8saUJBQWlCLENBQ3BCLDBCQUEwQixFQUMxQixPQUFPLEVBQ1Asa0NBQWtDLENBQ3JDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1Byb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHtUdWlHcmFkaWVudERpcmVjdGlvbn0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9jb2xvcic7XG5pbXBvcnQge3R1aUNyZWF0ZVRva2VuLCB0dWlQcm92aWRlT3B0aW9uc30gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9DT0xPUl9TRUxFQ1RPUl9NT0RFX05BTUVTID0gdHVpQ3JlYXRlVG9rZW48W3N0cmluZywgc3RyaW5nXT4oW1xuICAgICdTb2xpZCBjb2xvcicsXG4gICAgJ0dyYWRpZW50Jyxcbl0pO1xuXG5leHBvcnQgY29uc3QgVFVJX0RFRkFVTFRfSU5QVVRfQ09MT1JTID0gbmV3IE1hcChbXG4gICAgWydjb2xvci1ibGFjay0xMDAnLCAnIzkwOTA5MCddLFxuICAgIFsnY29sb3ItYmxhY2stMjAwJywgJyM2NjY2NjYnXSxcbiAgICBbJ2NvbG9yLWJsYWNrLTMwMCcsICcjMzMzMzMzJ10sXG4gICAgWydjb2xvci1ibHVlLTEwMCcsICcjMTc3MWU2J10sXG4gICAgWydjb2xvci1ibHVlLTIwMCcsICcjMTQ2NGNjJ10sXG4gICAgWydjb2xvci1ibHVlLTMwMCcsICcjMDk1M2IzJ10sXG4gICAgWydjb2xvci1ncmF5LTEwMCcsICcjZjVmNWY2J10sXG4gICAgWydjb2xvci1ncmF5LTIwMCcsICcjZTdlOGVhJ10sXG4gICAgWydjb2xvci1ncmF5LTMwMCcsICcjY2JjZmQzJ10sXG4gICAgWydjb2xvci1ncmF5LTQwMCcsICcjOTU5YmE0J10sXG4gICAgWydjb2xvci1ncmF5LTUwMCcsICcjNzk4MThjJ10sXG4gICAgWydjb2xvci1ncmF5LTYwMCcsICcjNjE2ODcxJ10sXG4gICAgWydjb2xvci1ncmVlbi0xMDAnLCAnIzM5YjU0YSddLFxuICAgIFsnY29sb3ItZ3JlZW4tMjAwJywgJyMyY2E1M2EnXSxcbiAgICBbJ2NvbG9yLWdyZWVuLTMwMCcsICcjMTY4YTIxJ10sXG4gICAgWydjb2xvci1saWdodC1ibHVlLTEwMCcsICcjZWNmMWY3J10sXG4gICAgWydjb2xvci1saWdodC1ibHVlLTIwMCcsICcjZTRlYmYzJ10sXG4gICAgWydjb2xvci1saWdodC1ibHVlLTMwMCcsICcjZGRlNGVkJ10sXG4gICAgWydjb2xvci1yZWQtMTAwJywgJyNlMDFmMTknXSxcbiAgICBbJ2NvbG9yLXJlZC0yMDAnLCAnI2QzMTIwZSddLFxuICAgIFsnY29sb3ItcmVkLTMwMCcsICcjYzQwYjA4J10sXG4gICAgWydjb2xvci15ZWxsb3ctMTAwJywgJyNGRkREMkMnXSxcbiAgICBbJ2NvbG9yLXllbGxvdy0yMDAnLCAnI0ZDQzUyMSddLFxuICAgIFsnY29sb3IteWVsbG93LTMwMCcsICcjRkFCNjE4J10sXG4gICAgWyd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBUdWlDb2xvclNlbGVjdG9yTW9kZSA9IHtcbiAgICBTb2xpZENvbG9yOiAwLFxuICAgIEdyYWRpZW50OiAxLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGludGVyZmFjZSBUdWlDb2xvclNlbGVjdG9yT3B0aW9ucyB7XG4gICAgcmVhZG9ubHkgbW9kZTogKHR5cGVvZiBUdWlDb2xvclNlbGVjdG9yTW9kZSlba2V5b2YgdHlwZW9mIFR1aUNvbG9yU2VsZWN0b3JNb2RlXTtcbiAgICByZWFkb25seSBzZWxlY3Rvck1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY29sb3I6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIHJlYWRvbmx5IGNvbG9yczogUmVhZG9ubHlNYXA8c3RyaW5nLCBzdHJpbmc+O1xuICAgIHJlYWRvbmx5IGdyYWRpZW50OiB7XG4gICAgICAgIHJlYWRvbmx5IGljb25zOiBSZWNvcmQ8VHVpR3JhZGllbnREaXJlY3Rpb24sIHN0cmluZz47XG4gICAgICAgIHJlYWRvbmx5IHN0ZXBzOiBSZWFkb25seUFycmF5PFtudW1iZXIsIFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdXT47XG4gICAgICAgIHJlYWRvbmx5IHN0b3A6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgZGlyZWN0aW9uOiBUdWlHcmFkaWVudERpcmVjdGlvbjtcbiAgICAgICAgcmVhZG9ubHkgZW1wdHlTdG9wOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICAgICAgcmVhZG9ubHkgYnV0dG9uczogcmVhZG9ubHkgVHVpR3JhZGllbnREaXJlY3Rpb25bXTtcbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgVFVJX0NPTE9SX1NFTEVDVE9SX0RFRkFVTFRfT1BUSU9OUzogVHVpQ29sb3JTZWxlY3Rvck9wdGlvbnMgPSB7XG4gICAgc2VsZWN0b3JNb2RlOiB0cnVlLFxuICAgIG1vZGU6IFR1aUNvbG9yU2VsZWN0b3JNb2RlLlNvbGlkQ29sb3IsXG4gICAgY29sb3I6IFswLCAwLCAwLCAxXSxcbiAgICBjb2xvcnM6IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCksXG4gICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICd0byB0b3AgcmlnaHQnOiAnQHR1aS5tb3ZlLXVwLXJpZ2h0JyxcbiAgICAgICAgICAgICd0byByaWdodCc6ICdAdHVpLm1vdmUtcmlnaHQnLFxuICAgICAgICAgICAgJ3RvIGJvdHRvbSByaWdodCc6ICdAdHVpLm1vdmUtZG93bi1yaWdodCcsXG4gICAgICAgICAgICAndG8gYm90dG9tJzogJ0B0dWkubW92ZS1kb3duJyxcbiAgICAgICAgICAgICd0byBib3R0b20gbGVmdCc6ICdAdHVpLm1vdmUtZG93bi1sZWZ0JyxcbiAgICAgICAgICAgICd0byBsZWZ0JzogJ0B0dWkubW92ZS1sZWZ0JyxcbiAgICAgICAgICAgICd0byB0b3AgbGVmdCc6ICdAdHVpLm1vdmUtdXAtbGVmdCcsXG4gICAgICAgICAgICAndG8gdG9wJzogJ0B0dWkubW92ZS11cCcsXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZXBzOiBbXG4gICAgICAgICAgICBbMCwgWzAsIDAsIDAsIDFdXSxcbiAgICAgICAgICAgIFsxLCBbMjU1LCAyNTUsIDI1NSwgMV1dLFxuICAgICAgICBdLFxuICAgICAgICBzdG9wOiAwLFxuICAgICAgICBkaXJlY3Rpb246ICd0byBib3R0b20nLFxuICAgICAgICBlbXB0eVN0b3A6IFswLCAwLCAwLCAwXSxcbiAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgICAgJ3RvIHRvcCByaWdodCcsXG4gICAgICAgICAgICAndG8gcmlnaHQnLFxuICAgICAgICAgICAgJ3RvIGJvdHRvbSByaWdodCcsXG4gICAgICAgICAgICAndG8gYm90dG9tJyxcbiAgICAgICAgICAgICd0byBib3R0b20gbGVmdCcsXG4gICAgICAgICAgICAndG8gbGVmdCcsXG4gICAgICAgICAgICAndG8gdG9wIGxlZnQnLFxuICAgICAgICAgICAgJ3RvIHRvcCcsXG4gICAgICAgIF0sXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBUVUlfQ09MT1JfU0VMRUNUT1JfT1BUSU9OUyA9IHR1aUNyZWF0ZVRva2VuKFxuICAgIFRVSV9DT0xPUl9TRUxFQ1RPUl9ERUZBVUxUX09QVElPTlMsXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gdHVpQ29sb3JTZWxlY3Rvck9wdGlvbnNQcm92aWRlcihcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFR1aUNvbG9yU2VsZWN0b3JPcHRpb25zPixcbik6IFByb3ZpZGVyIHtcbiAgICByZXR1cm4gdHVpUHJvdmlkZU9wdGlvbnMoXG4gICAgICAgIFRVSV9DT0xPUl9TRUxFQ1RPUl9PUFRJT05TLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBUVUlfQ09MT1JfU0VMRUNUT1JfREVGQVVMVF9PUFRJT05TLFxuICAgICk7XG59XG4iXX0=