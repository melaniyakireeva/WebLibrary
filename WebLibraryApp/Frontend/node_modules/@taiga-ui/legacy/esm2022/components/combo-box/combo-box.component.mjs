import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, inject, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { TUI_STRICT_MATCHER } from '@taiga-ui/cdk/constants';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_ACCESSOR, tuiAsDataListHost, tuiAsOptionContent, TuiDataListDirective, } from '@taiga-ui/core/components/data-list';
import { TuiDropdownFixed, TuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { AbstractTuiNullableControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TUI_ARROW_MODE } from '@taiga-ui/legacy/components/arrow';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_SELECT_OPTION } from '@taiga-ui/legacy/components/select-option';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/dropdown";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/polymorpheus";
import * as i4 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i5 from "@taiga-ui/legacy/directives";
class TuiComboBoxComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.arrowMode = inject(TUI_ARROW_MODE);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.stringify = this.itemsHandlers.stringify;
        this.strictMatcher = TUI_STRICT_MATCHER;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.strict = true;
        this.search = null;
        this.searchChange = new EventEmitter();
        this.open = false;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement ?? null;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            !!this.dropdown?.tuiDropdownOpen);
    }
    get nativeValue() {
        return this.value === null ? this.search || '' : this.stringify(this.value);
    }
    checkOption(option) {
        if (!this.isStrictMatch(option)) {
            return;
        }
        this.value = option;
        this.updateSearch(null);
    }
    handleOption(item) {
        this.focusInput();
        this.close();
        this.updateSearch(null);
        this.value = item;
        if (this.value) {
            this.setNativeValue(this.stringify(item));
        }
    }
    onValueChange(value) {
        this.updateSearch(value);
        const match = this.accessor
            ?.getOptions()
            .find((item) => this.isStrictMatch(item));
        if (match !== undefined) {
            this.value = match;
            this.updateSearch(null);
            return;
        }
        if (this.strict || this.search === '') {
            this.value = null;
        }
        // Clearing sets the empty value, the dropdown should not be opened on clear.
        if (this.search !== '') {
            this.open = true;
        }
    }
    toggle() {
        this.open = !this.open;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get showValueTemplate() {
        return tuiIsPresent(this.value) && !this.focused;
    }
    get computedContent() {
        return this.valueContent || this.nativeValue;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onFieldKeyDownEnter(event) {
        if (this.open) {
            event.preventDefault();
        }
        const options = this.accessor?.getOptions() || [];
        if (options.length !== 1) {
            return;
        }
        this.value = options[0] ?? null;
        this.updateSearch(null);
        this.close();
    }
    isStrictMatch(item) {
        return !!this.search && !!this.strictMatcher?.(item, this.search, this.stringify);
    }
    close() {
        this.open = false;
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    setNativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiComboBoxComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiComboBoxComponent, selector: "tui-combo-box", inputs: { stringify: "stringify", strictMatcher: "strictMatcher", identityMatcher: "identityMatcher", valueContent: "valueContent", strict: "strict", search: "search" }, outputs: { searchChange: "searchChange" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiComboBoxComponent),
            tuiAsDataListHost(TuiComboBoxComponent),
            tuiAsControl(TuiComboBoxComponent),
            tuiAsOptionContent(TUI_SELECT_OPTION),
        ], queries: [{ propertyName: "accessor", first: true, predicate: TUI_DATA_LIST_ACCESSOR, descendants: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }, { propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiDropdownFixed }], ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !!datalist\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-combo-box__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"nativeValue\"\n        (click)=\"toggle()\"\n        (keydown.enter)=\"onFieldKeyDownEnter($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n        <div\n            *ngIf=\"showValueTemplate\"\n            automation-id=\"tui-combo-box__template\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <ng-container\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value!, active: computedFocused}\"\n            >\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;inline-size:100%;align-items:center}.t-icon{pointer-events:auto}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i4.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i4.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i5.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { kind: "directive", type: i5.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i5.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "directive", type: i1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiComboBoxComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiComboBoxComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-combo-box', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiComboBoxComponent),
                        tuiAsDataListHost(TuiComboBoxComponent),
                        tuiAsControl(TuiComboBoxComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ], hostDirectives: [TuiDropdownFixed], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !!datalist\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-combo-box__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"nativeValue\"\n        (click)=\"toggle()\"\n        (keydown.enter)=\"onFieldKeyDownEnter($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n        <div\n            *ngIf=\"showValueTemplate\"\n            automation-id=\"tui-combo-box__template\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <ng-container\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value!, active: computedFocused}\"\n            >\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;inline-size:100%;align-items:center}.t-icon{pointer-events:auto}\n"] }]
        }], propDecorators: { accessor: [{
                type: ContentChild,
                args: [TUI_DATA_LIST_ACCESSOR]
            }], dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], stringify: [{
                type: Input
            }], strictMatcher: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], strict: [{
                type: Input
            }], search: [{
                type: Input
            }], searchChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,