import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, inject, Input, ViewChild, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { maskitoCaretGuard, maskitoNumberOptionsGenerator, maskitoParseNumber, } from '@maskito/kit';
import { CHAR_HYPHEN, CHAR_MINUS, EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { tuiWatch } from '@taiga-ui/cdk/observables';
import { TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import { tuiCreateToken, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DEFAULT_NUMBER_FORMAT, TUI_NUMBER_FORMAT } from '@taiga-ui/core/tokens';
import { tuiFormatNumber } from '@taiga-ui/core/utils/format';
import { AbstractTuiNullableControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_WATCHED_CONTROLLER, } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { PolymorpheusOutlet } from '@taiga-ui/polymorpheus';
import { TUI_INPUT_NUMBER_OPTIONS } from './input-number.options';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@maskito/angular";
import * as i3 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i4 from "@taiga-ui/legacy/directives";
import * as i5 from "@taiga-ui/polymorpheus";
import * as i6 from "@taiga-ui/core/components/button";
const DEFAULT_MAX_LENGTH = 18;
export const TUI_NUMBER_VALUE_TRANSFORMER = tuiCreateToken();
class TuiInputNumberComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.isIOS = inject(TUI_IS_IOS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.options = inject(TUI_INPUT_NUMBER_OPTIONS);
        this.unfinishedValue = '';
        this.polymorpheusValueContent = EMPTY_QUERY;
        this.valueTransformer = inject(TUI_NUMBER_VALUE_TRANSFORMER, { optional: true });
        this.numberFormat = TUI_DEFAULT_NUMBER_FORMAT;
        this.controller = inject(TUI_TEXTFIELD_WATCHED_CONTROLLER);
        this.numberFormat$ = inject(TUI_NUMBER_FORMAT)
            .pipe(tuiWatch(this.cdr), takeUntilDestroyed())
            .subscribe((format) => {
            this.numberFormat = format;
        });
        this.min = this.options.min;
        this.max = this.options.max;
        this.step = this.options.step;
    }
    get nativeFocusableElement() {
        return !this.textfield || this.computedDisabled
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    get inputMode() {
        if (this.isIOS && this.isNegativeAllowed) {
            // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'
            return 'text';
        }
        return !this.precision ? 'numeric' : 'decimal';
    }
    get calculatedMaxLength() {
        const decimalPart = !!this.precision &&
            this.nativeValue.includes(this.numberFormat.decimalSeparator);
        const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;
        const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;
        return DEFAULT_MAX_LENGTH + precision + takeThousand;
    }
    get computedValue() {
        return this.focused ? this.nativeValue : this.formattedValue;
    }
    onValueChange(nativeValue) {
        const parsedValue = maskitoParseNumber(nativeValue, this.numberFormat.decimalSeparator);
        this.unfinishedValue = null;
        if (Number.isNaN(parsedValue)) {
            this.value = null;
            return;
        }
        if (this.isNativeValueNotFinished) {
            this.unfinishedValue = nativeValue;
            this.cdr.markForCheck();
            return;
        }
        if (parsedValue < this.computedMin || parsedValue > this.computedMax) {
            return;
        }
        this.value = parsedValue;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = this.formattedValue;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get icons() {
        return this.options.icons;
    }
    get computedMin() {
        return this.computeMin(this.min, this.max);
    }
    get computedMax() {
        return this.computeMax(this.min, this.max);
    }
    get isNegativeAllowed() {
        return this.computedMin < 0;
    }
    get formattedValue() {
        return this.value !== null ? this.getFormattedValue(this.value || 0) : '';
    }
    get canDecrement() {
        return this.interactive && (this.value || 0) > this.computedMin;
    }
    get canIncrement() {
        return this.interactive && (this.value || 0) < this.computedMax;
    }
    get computedPrefix() {
        return this.controller.prefix;
    }
    get computedPostfix() {
        const postfix = this.controller.postfix;
        return postfix && ` ${postfix}`;
    }
    get mask() {
        return this.calculateMask(this.precision, this.numberFormat.decimalMode, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.computedMin, this.computedMax, this.computedPrefix, this.computedPostfix);
    }
    get nativeValue() {
        return this.nativeFocusableElement?.value || '';
    }
    set nativeValue(value) {
        if (!this.textfield || !this.nativeFocusableElement) {
            return;
        }
        this.textfield.value = value;
        this.nativeFocusableElement.value = value;
    }
    onArrow(step) {
        if (!step) {
            return;
        }
        this.value = tuiClamp((this.value || 0) + step, this.computedMin, this.computedMax);
        this.nativeValue = this.formattedValue;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        const nativeNumberValue = this.unfinishedValue
            ? maskitoParseNumber(this.unfinishedValue, this.numberFormat.decimalSeparator)
            : this.nativeNumberValue;
        this.unfinishedValue = null;
        if (Number.isNaN(nativeNumberValue)) {
            this.nativeValue =
                focused && !this.readOnly
                    ? this.computedPrefix + this.computedPostfix
                    : '';
            this.value = null;
            return;
        }
        if (!focused) {
            this.value = nativeNumberValue;
            this.nativeValue = this.formattedValue;
        }
    }
    getFormattedValue(value) {
        return (this.computedPrefix +
            tuiFormatNumber(value, {
                ...this.numberFormat,
                precision: this.precision,
            }).replace(CHAR_HYPHEN, CHAR_MINUS) +
            this.computedPostfix);
    }
    get isNativeValueNotFinished() {
        const nativeNumberValue = this.nativeNumberValue;
        return nativeNumberValue < 0
            ? nativeNumberValue > this.computedMax
            : nativeNumberValue < this.computedMin;
    }
    get nativeNumberValue() {
        return maskitoParseNumber(this.nativeValue, this.numberFormat.decimalSeparator);
    }
    get precision() {
        return Number.isNaN(this.numberFormat.precision)
            ? 2
            : this.numberFormat.precision;
    }
    computeMin(min, max) {
        return Math.min(this.valueTransformer?.fromControlValue(min) ?? min ?? this.options.min, this.valueTransformer?.fromControlValue(max) ?? max ?? this.options.max);
    }
    computeMax(min, max) {
        return Math.max(this.valueTransformer?.fromControlValue(min) ?? min ?? this.options.min, this.valueTransformer?.fromControlValue(max) ?? max ?? this.options.max);
    }
    // eslint-disable-next-line sonarjs/sonar-max-params
    calculateMask(precision, decimalMode, decimalSeparator, thousandSeparator, min, max, prefix, postfix) {
        const generatorParams = {
            decimalSeparator,
            thousandSeparator,
            min,
            max,
            prefix,
            postfix,
            precision,
            decimalZeroPadding: decimalMode === 'always',
        };
        const { plugins, ...options } = maskitoNumberOptionsGenerator(generatorParams);
        return {
            ...options,
            plugins: [
                ...plugins,
                maskitoCaretGuard((value) => [
                    prefix.length,
                    value.length - postfix.length,
                ]),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputNumberComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputNumberComponent, selector: "tui-input-number", inputs: { min: "min", max: "max", step: "step" }, host: { listeners: { "keydown.arrowDown": "onArrow(-step)", "keydown.arrowUp": "onArrow(step)" }, properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputNumberComponent),
            tuiAsControl(TuiInputNumberComponent),
            TEXTFIELD_CONTROLLER_PROVIDER,
        ], queries: [{ propertyName: "polymorpheusValueContent", predicate: PolymorpheusOutlet, descendants: true }], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    #textfield\n    tuiTextfieldPostfix=\"\"\n    tuiTextfieldPrefix=\"\"\n    tuiValueAccessor\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [maskito]=\"mask\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [value]=\"computedValue\"\n    (focusedChange)=\"onFocused($event)\"\n    (valueChange)=\"onValueChange($event)\"\n>\n    <ng-content />\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    />\n    <div\n        *ngIf=\"polymorpheusValueContent.length\"\n        ngProjectAs=\"tuiContent\"\n        class=\"t-value-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-primitive-textfield>\n\n<section\n    *ngIf=\"step\"\n    class=\"t-buttons\"\n>\n    <button\n        size=\"s\"\n        tabindex=\"-1\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"textfield.appearance\"\n        [disabled]=\"!canIncrement\"\n        [iconStart]=\"icons.up\"\n        (click.prevent)=\"onArrow(step)\"\n        (mousedown.prevent)=\"nativeFocusableElement?.focus()\"\n    >\n        +\n    </button>\n    <button\n        size=\"s\"\n        tabindex=\"-1\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"textfield.appearance\"\n        [disabled]=\"!canDecrement\"\n        [iconStart]=\"icons.down\"\n        (click.prevent)=\"onArrow(-step)\"\n        (mousedown.prevent)=\"nativeFocusableElement?.focus()\"\n    >\n        -\n    </button>\n</section>\n\n<ng-container *ngIf=\"polymorpheusValueContent.changes | async\" />\n\n<ng-template #valueContent>\n    <ng-content select=\"tuiContent\" />\n</ng-template>\n", styles: [":host{display:flex;border-radius:var(--tui-radius-m);text-align:start}:host :host-context(*:disabled){pointer-events:none}.t-textfield{flex:1;min-inline-size:0;max-inline-size:100%;border-radius:inherit;text-align:inherit}.t-textfield:not(:last-child){border-start-end-radius:0;border-end-end-radius:0}.t-value-content{inline-size:100%}.t-buttons{display:flex;flex-direction:column;align-items:stretch;margin-left:.125rem;border-radius:inherit}[data-size=s]+.t-buttons{flex-direction:row-reverse}[data-size=s]+.t-buttons .t-button:first-child{margin:0 0 0 .125rem;border-start-end-radius:inherit;border-end-end-radius:inherit}[data-size=s]+.t-buttons .t-button:last-child{border-radius:0}[data-size=m]+.t-buttons .t-button{inline-size:calc(var(--tui-height-m) * .75)}[data-size=l]+.t-buttons .t-button{inline-size:calc(var(--tui-height-l) * .75)}.t-buttons .t-button{display:flex;flex:1;block-size:auto;align-items:center;justify-content:center;border-radius:0}.t-buttons .t-button:first-child{margin-bottom:.125rem;border-start-end-radius:inherit}.t-buttons .t-button:last-child{border-end-end-radius:inherit}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "component", type: i3.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i3.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i4.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { kind: "directive", type: i4.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { kind: "directive", type: i5.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: i4.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { kind: "directive", type: i6.TuiButton, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputNumberComponent.prototype, "computeMin", null);
__decorate([
    tuiPure
], TuiInputNumberComponent.prototype, "computeMax", null);
__decorate([
    tuiPure
], TuiInputNumberComponent.prototype, "calculateMask", null);
export { TuiInputNumberComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputNumberComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-number', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputNumberComponent),
                        tuiAsControl(TuiInputNumberComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ], host: {
                        '[attr.data-size]': 'size',
                        '(keydown.arrowDown)': 'onArrow(-step)',
                        '(keydown.arrowUp)': 'onArrow(step)',
                    }, template: "<tui-primitive-textfield\n    #textfield\n    tuiTextfieldPostfix=\"\"\n    tuiTextfieldPrefix=\"\"\n    tuiValueAccessor\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [maskito]=\"mask\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [value]=\"computedValue\"\n    (focusedChange)=\"onFocused($event)\"\n    (valueChange)=\"onValueChange($event)\"\n>\n    <ng-content />\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    />\n    <div\n        *ngIf=\"polymorpheusValueContent.length\"\n        ngProjectAs=\"tuiContent\"\n        class=\"t-value-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-primitive-textfield>\n\n<section\n    *ngIf=\"step\"\n    class=\"t-buttons\"\n>\n    <button\n        size=\"s\"\n        tabindex=\"-1\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"textfield.appearance\"\n        [disabled]=\"!canIncrement\"\n        [iconStart]=\"icons.up\"\n        (click.prevent)=\"onArrow(step)\"\n        (mousedown.prevent)=\"nativeFocusableElement?.focus()\"\n    >\n        +\n    </button>\n    <button\n        size=\"s\"\n        tabindex=\"-1\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"textfield.appearance\"\n        [disabled]=\"!canDecrement\"\n        [iconStart]=\"icons.down\"\n        (click.prevent)=\"onArrow(-step)\"\n        (mousedown.prevent)=\"nativeFocusableElement?.focus()\"\n    >\n        -\n    </button>\n</section>\n\n<ng-container *ngIf=\"polymorpheusValueContent.changes | async\" />\n\n<ng-template #valueContent>\n    <ng-content select=\"tuiContent\" />\n</ng-template>\n", styles: [":host{display:flex;border-radius:var(--tui-radius-m);text-align:start}:host :host-context(*:disabled){pointer-events:none}.t-textfield{flex:1;min-inline-size:0;max-inline-size:100%;border-radius:inherit;text-align:inherit}.t-textfield:not(:last-child){border-start-end-radius:0;border-end-end-radius:0}.t-value-content{inline-size:100%}.t-buttons{display:flex;flex-direction:column;align-items:stretch;margin-left:.125rem;border-radius:inherit}[data-size=s]+.t-buttons{flex-direction:row-reverse}[data-size=s]+.t-buttons .t-button:first-child{margin:0 0 0 .125rem;border-start-end-radius:inherit;border-end-end-radius:inherit}[data-size=s]+.t-buttons .t-button:last-child{border-radius:0}[data-size=m]+.t-buttons .t-button{inline-size:calc(var(--tui-height-m) * .75)}[data-size=l]+.t-buttons .t-button{inline-size:calc(var(--tui-height-l) * .75)}.t-buttons .t-button{display:flex;flex:1;block-size:auto;align-items:center;justify-content:center;border-radius:0}.t-buttons .t-button:first-child{margin-bottom:.125rem;border-start-end-radius:inherit}.t-buttons .t-button:last-child{border-end-end-radius:inherit}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], polymorpheusValueContent: [{
                type: ContentChildren,
                args: [PolymorpheusOutlet, { descendants: true }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], step: [{
                type: Input
            }], computeMin: [], computeMax: [], calculateMask: [] } });
//# sourceMappingURL=data:application/json;base64,