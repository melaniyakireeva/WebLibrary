import type { OnChanges, QueryList } from '@angular/core';
import type { TuiLineChartHintContext } from '@taiga-ui/addon-charts/types';
import type { TuiStringHandler } from '@taiga-ui/cdk/types';
import { TuiHintOptionsDirective } from '@taiga-ui/core/directives/hint';
import type { TuiPoint } from '@taiga-ui/core/types';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import type { Observable } from 'rxjs';
import { TuiLineChartHint } from './line-chart-hint.directive';
import * as i0 from "@angular/core";
export declare class TuiLineChart implements OnChanges {
    private readonly zone;
    private readonly options;
    private readonly hover$;
    private readonly autoId;
    private readonly resize;
    private readonly box;
    protected readonly hintDirective: TuiLineChartHint | null;
    protected readonly hintOptions: TuiHintOptionsDirective | null;
    protected readonly viewBox: import("@angular/core").Signal<string>;
    readonly drivers: QueryList<Observable<boolean>>;
    x: number;
    y: number;
    width: number;
    height: number;
    smoothingFactor: number;
    xStringify: TuiStringHandler<number> | null;
    yStringify: TuiStringHandler<number> | null;
    filled: boolean;
    dots: boolean;
    value: readonly TuiPoint[];
    set valueSetter(value: readonly TuiPoint[]);
    ngOnChanges(): void;
    onHovered(index: number): void;
    protected get hovered$(): Observable<number>;
    protected get hintContent(): PolymorpheusContent<TuiLineChartHintContext<TuiPoint>>;
    protected get fillId(): string;
    protected get fill(): string;
    protected get d(): string;
    protected get fillD(): string;
    protected get isFocusable(): boolean;
    protected get hasHints(): boolean;
    protected onMouseLeave(): void;
    protected getX(index: number): number;
    protected getWidth(index: number): number;
    protected getHintId(index: number): string;
    protected getImplicit($implicit: TuiPoint): TuiPoint | readonly TuiPoint[];
    protected getHovered(hovered: number | null): TuiPoint | null;
    protected getBottom(y: number): number;
    protected getLeft(x: number): number;
    protected getOffset(x: number): number;
    protected onMouseEnter(index: number): void;
    private get isSinglePoint();
    private getD;
    private computeWidth;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiLineChart, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiLineChart, "tui-line-chart", never, { "x": { "alias": "x"; "required": false; }; "y": { "alias": "y"; "required": false; }; "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "smoothingFactor": { "alias": "smoothingFactor"; "required": false; }; "xStringify": { "alias": "xStringify"; "required": false; }; "yStringify": { "alias": "yStringify"; "required": false; }; "filled": { "alias": "filled"; "required": false; }; "dots": { "alias": "dots"; "required": false; }; "valueSetter": { "alias": "value"; "required": false; }; }, {}, never, never, true, never>;
}
