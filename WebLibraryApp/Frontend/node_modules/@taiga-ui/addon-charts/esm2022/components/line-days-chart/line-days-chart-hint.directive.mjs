import { __decorate } from "tslib";
import { ContentChildren, DestroyRef, Directive, forwardRef, inject, Input, NgZone, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiLineChartDrivers } from '@taiga-ui/addon-charts/components/line-chart';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiHoveredService } from '@taiga-ui/cdk/directives/hovered';
import { tuiZonefree } from '@taiga-ui/cdk/observables';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { combineLatest, filter } from 'rxjs';
import { TuiLineDaysChart } from './line-days-chart.component';
import * as i0 from "@angular/core";
function find(value, current) {
    return value.find(([day]) => day.daySame(current)) || [current, NaN];
}
// TODO: Consider extending TuiLineChartHintDirective
class TuiLineDaysChartHint {
    constructor() {
        this.charts = EMPTY_QUERY;
        this.destroyRef = inject(DestroyRef);
        this.zone = inject(NgZone);
        this.hovered$ = inject(TuiHoveredService);
    }
    ngAfterContentInit() {
        combineLatest([
            ...this.charts.map(({ charts }) => tuiLineChartDrivers(charts)),
            this.hovered$,
        ])
            .pipe(filter((result) => !result.some(Boolean)), tuiZonefree(this.zone), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.charts.forEach((chart) => chart.onHovered(NaN));
        });
    }
    getContext(day) {
        return this.getMap(...this.charts.map(({ value }) => value)).get(String(day)) || [];
    }
    raise(day) {
        const current = this.charts
            .map(({ value }) => (day ? find(value, day) : []))
            .filter(([_, value]) => !Number.isNaN(value));
        const sorted = [...current].sort((a, b) => a[1] - b[1]);
        this.charts.forEach((chart, index) => {
            const item = current[index];
            chart.onHovered(day);
            chart.zIndex = Math.max(item ? sorted.indexOf(item) : 0, 0);
        });
    }
    getMap(...values) {
        return (values[0] || []).reduce((map, [day]) => map.set(String(day), values.map((value) => find(value, day))), new Map());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLineDaysChartHint, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiLineDaysChartHint, isStandalone: true, selector: "[tuiLineChartHint]", inputs: { hint: ["tuiLineChartHint", "hint"] }, providers: [TuiHoveredService], queries: [{ propertyName: "charts", predicate: i0.forwardRef(function () { return TuiLineDaysChart; }) }], ngImport: i0 }); }
}
__decorate([
    tuiPure
], TuiLineDaysChartHint.prototype, "getMap", null);
export { TuiLineDaysChartHint };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLineDaysChartHint, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiLineChartHint]',
                    providers: [TuiHoveredService],
                }]
        }], propDecorators: { charts: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineDaysChart)]
            }], hint: [{
                type: Input,
                args: ['tuiLineChartHint']
            }], getMap: [] } });
//# sourceMappingURL=data:application/json;base64,