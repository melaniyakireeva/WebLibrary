import { __decorate } from "tslib";
import { ContentChildren, DestroyRef, Directive, ElementRef, forwardRef, inject, Input, NgZone, Renderer2, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiHoveredService } from '@taiga-ui/cdk/directives/hovered';
import { tuiQueryListChanges, tuiZonefree } from '@taiga-ui/cdk/observables';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { combineLatest, distinctUntilChanged, filter, map, startWith, switchMap, } from 'rxjs';
import { TuiLineChart } from './line-chart.component';
import * as i0 from "@angular/core";
class TuiLineChartHint {
    constructor() {
        this.charts = EMPTY_QUERY;
        this.chartsRef = EMPTY_QUERY;
        this.renderer = inject(Renderer2);
        this.destroyRef = inject(DestroyRef);
        this.zone = inject(NgZone);
        this.hovered$ = inject(TuiHoveredService);
    }
    ngAfterViewInit() {
        combineLatest([tuiLineChartDrivers(this.charts), this.hovered$])
            .pipe(filter((result) => !result.some(Boolean)), tuiZonefree(this.zone), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.charts.forEach((chart) => chart.onHovered(NaN));
        });
    }
    // _chart is required by TuiLineDaysChartComponent that impersonates this directive
    getContext(index, _chart) {
        return this.computeContext(...this.charts.map(({ value }) => value))[index] || [];
    }
    // _chart is required by TuiLineDaysChartComponent that impersonates this directive
    raise(index, _chart) {
        const current = this.charts.map((chart) => chart.value[index] ?? [0, 0]);
        const sorted = [...current].sort((a, b) => a[1] - b[1]);
        this.charts.forEach((chart) => chart.onHovered(index));
        this.chartsRef.forEach(({ nativeElement }, index) => this.renderer.setStyle(nativeElement, 'z-index', sorted.indexOf(current[index] ?? [0, 0])));
    }
    computeContext(...values) {
        return (values[0] || []).map((_, index) => values.map((value) => value[index] ?? [0, 0]));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLineChartHint, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiLineChartHint, isStandalone: true, selector: "[tuiLineChartHint]", inputs: { hint: ["tuiLineChartHint", "hint"] }, providers: [TuiHoveredService], queries: [{ propertyName: "charts", predicate: i0.forwardRef(function () { return TuiLineChart; }) }, { propertyName: "chartsRef", predicate: i0.forwardRef(function () { return TuiLineChart; }), read: ElementRef }], ngImport: i0 }); }
}
__decorate([
    tuiPure
], TuiLineChartHint.prototype, "computeContext", null);
export { TuiLineChartHint };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLineChartHint, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiLineChartHint]',
                    providers: [TuiHoveredService],
                }]
        }], propDecorators: { charts: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineChart)]
            }], chartsRef: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineChart), { read: ElementRef }]
            }], hint: [{
                type: Input,
                args: ['tuiLineChartHint']
            }], computeContext: [] } });
export function tuiLineChartDrivers(charts) {
    return combineLatest(charts.map(({ drivers }) => tuiQueryListChanges(drivers).pipe(map((drivers) => drivers.map((driver) => driver.pipe(startWith(false))))))).pipe(map((all) => all.reduce((acc, drivers) => acc.concat(drivers), [])), switchMap((drivers) => combineLatest(drivers)), map((values) => values.some(Boolean)), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,