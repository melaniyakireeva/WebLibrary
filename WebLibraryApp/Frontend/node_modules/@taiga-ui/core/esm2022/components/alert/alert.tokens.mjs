import { inject } from '@angular/core';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiCreateToken, tuiCreateTokenFromFactory, } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_NOTIFICATION_OPTIONS } from '@taiga-ui/core/components/notification';
import { BehaviorSubject, combineLatest, map, of } from 'rxjs';
export const TUI_ALERT_DEFAULT_OPTIONS = {
    autoClose: 3000,
    label: '',
    closeable: true,
    data: undefined,
};
export const TUI_ALERT_OPTIONS = tuiCreateTokenFromFactory(() => ({
    ...TUI_ALERT_DEFAULT_OPTIONS,
    ...inject(TUI_NOTIFICATION_OPTIONS),
}));
export const TUI_ALERT_POSITION = tuiCreateTokenFromFactory(() => inject(TUI_IS_MOBILE) ? '1rem 1rem 0 auto' : '2rem 3rem 0 auto');
export const TUI_ALERTS = tuiCreateToken(new BehaviorSubject([]));
/**
 * Grouping alerts by their component
 */
export const TUI_ALERTS_GROUPED = tuiCreateTokenFromFactory(() => combineLatest([
    of(new Map()),
    inject(TUI_ALERTS),
]).pipe(map(([map, alerts]) => {
    map.forEach((_, key) => map.set(key, []));
    alerts.forEach((alert) => {
        const key = alert.component.component;
        const value = map.get(key) || [];
        map.set(key, [...value, alert]);
    });
    return Array.from(map.values());
})));
export function tuiAlertOptionsProvider(options) {
    return {
        provide: TUI_ALERT_OPTIONS,
        useFactory: () => ({
            ...TUI_ALERT_DEFAULT_OPTIONS,
            ...(inject(TUI_ALERT_OPTIONS, { optional: true, skipSelf: true }) ||
                inject(TUI_NOTIFICATION_OPTIONS)),
            ...options,
        }),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQudG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9jb21wb25lbnRzL2FsZXJ0L2FsZXJ0LnRva2Vucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQ0gsY0FBYyxFQUNkLHlCQUF5QixHQUM1QixNQUFNLG1DQUFtQyxDQUFDO0FBQzNDLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxlQUFlLEVBQUUsYUFBYSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFJN0QsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWlEO0lBQ25GLFNBQVMsRUFBRSxJQUFJO0lBQ2YsS0FBSyxFQUFFLEVBQUU7SUFDVCxTQUFTLEVBQUUsSUFBSTtJQUNmLElBQUksRUFBRSxTQUFTO0NBQ2xCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyx5QkFBeUIsQ0FBa0IsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMvRSxHQUFHLHlCQUF5QjtJQUM1QixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQztDQUN0QyxDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLHlCQUF5QixDQUFTLEdBQUcsRUFBRSxDQUNyRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FDbEUsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQ3BDLElBQUksZUFBZSxDQUFzQyxFQUFFLENBQUMsQ0FDL0QsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcseUJBQXlCLENBQUMsR0FBRyxFQUFFLENBQzdELGFBQWEsQ0FBQztJQUNWLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBa0QsQ0FBQztJQUM3RCxNQUFNLENBQUMsVUFBVSxDQUFDO0NBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRTtJQUNsQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUxQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDckIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDdEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQyxDQUNMLENBQ0osQ0FBQztBQUVGLE1BQU0sVUFBVSx1QkFBdUIsQ0FDbkMsT0FBaUM7SUFFakMsT0FBTztRQUNILE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsVUFBVSxFQUFFLEdBQW9CLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLEdBQUcseUJBQXlCO1lBQzVCLEdBQUcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztnQkFDM0QsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDckMsR0FBRyxPQUFPO1NBQ2IsQ0FBQztLQUNMLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge0ZhY3RvcnlQcm92aWRlciwgVHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2luamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7VHVpUG9wb3Zlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge1RVSV9JU19NT0JJTEV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdG9rZW5zJztcbmltcG9ydCB7XG4gICAgdHVpQ3JlYXRlVG9rZW4sXG4gICAgdHVpQ3JlYXRlVG9rZW5Gcm9tRmFjdG9yeSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7VFVJX05PVElGSUNBVElPTl9PUFRJT05TfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL25vdGlmaWNhdGlvbic7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgbWFwLCBvZn0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB0eXBlIHtUdWlBbGVydE9wdGlvbnN9IGZyb20gJy4vYWxlcnQuaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfQUxFUlRfREVGQVVMVF9PUFRJT05TOiBPbWl0PFR1aUFsZXJ0T3B0aW9ucywgJ2FwcGVhcmFuY2UnIHwgJ2ljb24nPiA9IHtcbiAgICBhdXRvQ2xvc2U6IDMwMDAsXG4gICAgbGFiZWw6ICcnLFxuICAgIGNsb3NlYWJsZTogdHJ1ZSxcbiAgICBkYXRhOiB1bmRlZmluZWQsXG59O1xuXG5leHBvcnQgY29uc3QgVFVJX0FMRVJUX09QVElPTlMgPSB0dWlDcmVhdGVUb2tlbkZyb21GYWN0b3J5PFR1aUFsZXJ0T3B0aW9ucz4oKCkgPT4gKHtcbiAgICAuLi5UVUlfQUxFUlRfREVGQVVMVF9PUFRJT05TLFxuICAgIC4uLmluamVjdChUVUlfTk9USUZJQ0FUSU9OX09QVElPTlMpLFxufSkpO1xuXG5leHBvcnQgY29uc3QgVFVJX0FMRVJUX1BPU0lUSU9OID0gdHVpQ3JlYXRlVG9rZW5Gcm9tRmFjdG9yeTxzdHJpbmc+KCgpID0+XG4gICAgaW5qZWN0KFRVSV9JU19NT0JJTEUpID8gJzFyZW0gMXJlbSAwIGF1dG8nIDogJzJyZW0gM3JlbSAwIGF1dG8nLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRVSV9BTEVSVFMgPSB0dWlDcmVhdGVUb2tlbihcbiAgICBuZXcgQmVoYXZpb3JTdWJqZWN0PFJlYWRvbmx5QXJyYXk8VHVpUG9wb3ZlcjxhbnksIGFueT4+PihbXSksXG4pO1xuXG4vKipcbiAqIEdyb3VwaW5nIGFsZXJ0cyBieSB0aGVpciBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IFRVSV9BTEVSVFNfR1JPVVBFRCA9IHR1aUNyZWF0ZVRva2VuRnJvbUZhY3RvcnkoKCkgPT5cbiAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgb2YobmV3IE1hcDxUeXBlPGFueT4sIFJlYWRvbmx5QXJyYXk8VHVpUG9wb3ZlcjxhbnksIGFueT4+PigpKSxcbiAgICAgICAgaW5qZWN0KFRVSV9BTEVSVFMpLFxuICAgIF0pLnBpcGUoXG4gICAgICAgIG1hcCgoW21hcCwgYWxlcnRzXSkgPT4ge1xuICAgICAgICAgICAgbWFwLmZvckVhY2goKF8sIGtleSkgPT4gbWFwLnNldChrZXksIFtdKSk7XG5cbiAgICAgICAgICAgIGFsZXJ0cy5mb3JFYWNoKChhbGVydCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGFsZXJ0LmNvbXBvbmVudC5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtYXAuZ2V0KGtleSkgfHwgW107XG5cbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgWy4uLnZhbHVlLCBhbGVydF0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKG1hcC52YWx1ZXMoKSk7XG4gICAgICAgIH0pLFxuICAgICksXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gdHVpQWxlcnRPcHRpb25zUHJvdmlkZXIoXG4gICAgb3B0aW9uczogUGFydGlhbDxUdWlBbGVydE9wdGlvbnM+LFxuKTogRmFjdG9yeVByb3ZpZGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm92aWRlOiBUVUlfQUxFUlRfT1BUSU9OUyxcbiAgICAgICAgdXNlRmFjdG9yeTogKCk6IFR1aUFsZXJ0T3B0aW9ucyA9PiAoe1xuICAgICAgICAgICAgLi4uVFVJX0FMRVJUX0RFRkFVTFRfT1BUSU9OUyxcbiAgICAgICAgICAgIC4uLihpbmplY3QoVFVJX0FMRVJUX09QVElPTlMsIHtvcHRpb25hbDogdHJ1ZSwgc2tpcFNlbGY6IHRydWV9KSB8fFxuICAgICAgICAgICAgICAgIGluamVjdChUVUlfTk9USUZJQ0FUSU9OX09QVElPTlMpKSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pLFxuICAgIH07XG59XG4iXX0=