{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./change-password-page.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./change-password-page.component.scss?ngResource\";\nimport { ChangeDetectorRef, Component, inject } from '@angular/core';\nimport { TuiIcon, TuiTextfield, TuiButton, TuiError, TuiDialogService } from '@taiga-ui/core';\nimport { TuiTooltip, TuiPassword } from '@taiga-ui/kit';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { AuthService } from '../../services/auth/auth-service.service';\nimport _ from 'lodash';\nimport { catchError, of, tap } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet ChangePasswordPageComponent = class ChangePasswordPageComponent {\n  authService;\n  router;\n  cdRef;\n  dialogs = inject(TuiDialogService);\n  error = null;\n  email;\n  oldPassword;\n  newPassword;\n  isChangePasswordProcess = false;\n  constructor(authService, router, cdRef) {\n    this.authService = authService;\n    this.router = router;\n    this.cdRef = cdRef;\n  }\n  onChangePassword() {\n    this.error = null;\n    this.isChangePasswordProcess = true;\n    if (_.isEmpty(this.email)) {\n      this.error = 'Почта не должна быть пустым значением';\n      this.isChangePasswordProcess = false;\n      return;\n    }\n    if (_.isEmpty(this.oldPassword) || _.isEmpty(this.newPassword)) {\n      this.error = 'Пароль не может быть пустым значением';\n      this.isChangePasswordProcess = false;\n      return;\n    }\n    const changePasswordDto = {\n      email: this.email,\n      oldPassword: this.oldPassword,\n      newPassword: this.newPassword\n    };\n    const obs$ = this.authService.changePassword(changePasswordDto).pipe(tap(isChanged => {\n      this.isChangePasswordProcess = false;\n      if (isChanged) {\n        this.dialogs.open('', {\n          label: 'Смена пароля успешна',\n          size: 's'\n        }).subscribe();\n      } else {\n        this.error = 'Серверная ошибка';\n      }\n      this.cdRef.markForCheck();\n    }), catchError(x => {\n      this.isChangePasswordProcess = false;\n      this.error = x.error.errorText;\n      this.cdRef.markForCheck();\n      return of(undefined);\n    }));\n    obs$.subscribe(() => {});\n  }\n  static ctorParameters = () => [{\n    type: AuthService\n  }, {\n    type: Router\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\nChangePasswordPageComponent = __decorate([Component({\n  selector: 'app-change-password-page',\n  standalone: true,\n  imports: [TuiTextfield, TuiIcon, TuiTooltip, TuiPassword, TuiButton, TuiError, RouterLink, RouterLinkActive, FormsModule, CommonModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ChangePasswordPageComponent);\nexport { ChangePasswordPageComponent };","map":{"version":3,"names":["ChangeDetectorRef","Component","inject","TuiIcon","TuiTextfield","TuiButton","TuiError","TuiDialogService","TuiTooltip","TuiPassword","Router","RouterLink","RouterLinkActive","AuthService","_","catchError","of","tap","FormsModule","CommonModule","ChangePasswordPageComponent","authService","router","cdRef","dialogs","error","email","oldPassword","newPassword","isChangePasswordProcess","constructor","onChangePassword","isEmpty","changePasswordDto","obs$","changePassword","pipe","isChanged","open","label","size","subscribe","markForCheck","x","errorText","undefined","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\components\\change-password-page\\change-password-page.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, inject, NgModule } from '@angular/core';\r\nimport { TuiIcon, TuiTextfield, TuiButton, TuiError, TuiDialogService, TUI_ALERTS } from '@taiga-ui/core';\r\nimport { TuiTooltip, TuiPassword, TuiConfirmData, TUI_CONFIRM } from '@taiga-ui/kit';\r\nimport {\r\n  NavigationEnd,\r\n  Router,\r\n  RouterLink,\r\n  RouterLinkActive,\r\n  RouterOutlet,\r\n} from '@angular/router';\r\nimport {\r\n  AuthService,\r\n  ChangePasswordDto,\r\n  LoginDto,\r\n} from '../../services/auth/auth-service.service';\r\nimport _ from 'lodash';\r\nimport { catchError, of, tap } from 'rxjs';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-change-password-page',\r\n  standalone: true,\r\n  imports: [\r\n    TuiTextfield,\r\n    TuiIcon,\r\n    TuiTooltip,\r\n    TuiPassword,\r\n    TuiButton,\r\n    TuiError,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    FormsModule,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './change-password-page.component.html',\r\n  styleUrl: './change-password-page.component.scss',\r\n})\r\nexport class ChangePasswordPageComponent {\r\n  private readonly dialogs = inject(TuiDialogService);\r\n  \r\n  error: string | null = null;\r\n  email?: string;\r\n  oldPassword?: string;\r\n  newPassword?: string;\r\n  isChangePasswordProcess: boolean = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  onChangePassword() {\r\n    this.error = null;\r\n    this.isChangePasswordProcess = true;\r\n\r\n    if (_.isEmpty(this.email)) {\r\n      this.error = 'Почта не должна быть пустым значением';\r\n      this.isChangePasswordProcess = false;\r\n      return;\r\n    }\r\n\r\n    if (_.isEmpty(this.oldPassword) || _.isEmpty(this.newPassword)) {\r\n      this.error = 'Пароль не может быть пустым значением';\r\n      this.isChangePasswordProcess = false;\r\n      return;\r\n    }\r\n\r\n    const changePasswordDto: ChangePasswordDto = {\r\n      email: this.email,\r\n      oldPassword: this.oldPassword,\r\n      newPassword: this.newPassword,\r\n    };\r\n\r\n    const obs$ = this.authService.changePassword(changePasswordDto).pipe(\r\n      tap((isChanged) => {\r\n        this.isChangePasswordProcess = false;\r\n        if (isChanged) {\r\n          this.dialogs\r\n            .open('', {\r\n              label: 'Смена пароля успешна',\r\n              size: 's',\r\n            })\r\n            .subscribe();\r\n        } else {\r\n          this.error = 'Серверная ошибка';\r\n        }\r\n        this.cdRef.markForCheck();\r\n      }),\r\n      catchError((x) => {\r\n        this.isChangePasswordProcess = false;\r\n        this.error = x.error.errorText;\r\n        this.cdRef.markForCheck();\r\n        return of(undefined);\r\n      })\r\n    );\r\n\r\n    obs$.subscribe(() => {});\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}