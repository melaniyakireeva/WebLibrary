{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { TUI_NON_DIGITS_REGEXP, CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { tuiCreateToken, tuiProvideOptions, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { TuiButton } from '@taiga-ui/core/components/button';\nimport * as i4 from '@taiga-ui/core/components/data-list';\nimport { TuiDataList } from '@taiga-ui/core/components/data-list';\nimport { TuiAppearance } from '@taiga-ui/core/directives/appearance';\nimport * as i1 from '@taiga-ui/core/directives/dropdown';\nimport { TuiDropdown, TuiDropdownFixed } from '@taiga-ui/core/directives/dropdown';\nimport { TuiGroup } from '@taiga-ui/core/directives/group';\nimport * as i5 from '@taiga-ui/core/directives/hint';\nimport { TuiHint } from '@taiga-ui/core/directives/hint';\nimport { TuiFlagPipe } from '@taiga-ui/core/pipes/flag';\nimport { TUI_COUNTRIES } from '@taiga-ui/kit/tokens';\nimport { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';\nimport { TUI_ARROW, TuiArrowComponent } from '@taiga-ui/legacy/components/arrow';\nimport * as i6 from '@taiga-ui/legacy/components/input-phone';\nimport { TuiInputPhoneComponent, TuiInputPhoneModule } from '@taiga-ui/legacy/components/input-phone';\nimport * as i7 from '@taiga-ui/legacy/components/primitive-textfield';\nimport { TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldModule } from '@taiga-ui/legacy/components/primitive-textfield';\nimport * as i8 from '@taiga-ui/legacy/directives';\nimport { TUI_TEXTFIELD_SIZE, TuiLegacyDropdownOpenMonitorDirective, TuiTextfieldControllerModule } from '@taiga-ui/legacy/directives';\nimport { TuiToCountryCodePipe, TuiIsoToCountryCodePipe } from '@taiga-ui/legacy/pipes';\nimport { TUI_COUNTRIES_MASKS, tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';\nimport { tuiIsoToCountryCode, tuiGetMaxAllowedPhoneLength } from '@taiga-ui/legacy/utils';\nimport { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';\nimport { tuiGetClipboardDataText } from '@taiga-ui/cdk/utils/dom';\n\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nconst _c0 = [\"*\"];\nconst _c1 = () => ({\n  standalone: true\n});\nfunction TuiInputPhoneInternationalComponent_div_0_ng_template_6_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function TuiInputPhoneInternationalComponent_div_0_ng_template_6_button_1_Template_button_click_0_listener() {\n      const item_r4 = i0.ɵɵrestoreView(_r3).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r1.onItemClick(item_r4));\n    });\n    i0.ɵɵelement(1, \"img\", 11);\n    i0.ɵɵpipe(2, \"tuiFlag\");\n    i0.ɵɵelementStart(3, \"span\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 13);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"tuiIsoToCountryCode\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    const countriesNames_r5 = i0.ɵɵnextContext(2).ngIf;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", i0.ɵɵpipeBind1(2, 3, item_r4), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", countriesNames_r5[item_r4], \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(7, 5, item_r4), \" \");\n  }\n}\nfunction TuiInputPhoneInternationalComponent_div_0_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tui-data-list\");\n    i0.ɵɵtemplate(1, TuiInputPhoneInternationalComponent_div_0_ng_template_6_button_1_Template, 8, 7, \"button\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.countries);\n  }\n}\nfunction TuiInputPhoneInternationalComponent_div_0_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 14);\n    i0.ɵɵpipe(1, \"tuiFlag\");\n  }\n  if (rf & 2) {\n    const countriesNames_r5 = i0.ɵɵnextContext().ngIf;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"alt\", countriesNames_r5[ctx_r1.countryIsoCode])(\"src\", i0.ɵɵpipeBind1(1, 2, ctx_r1.countryIsoCode), i0.ɵɵsanitizeUrl);\n  }\n}\nfunction TuiInputPhoneInternationalComponent_div_0_ng_template_10_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TuiInputPhoneInternationalComponent_div_0_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, TuiInputPhoneInternationalComponent_div_0_ng_template_10_ng_container_1_Template, 1, 0, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r1.arrow);\n  }\n}\nfunction TuiInputPhoneInternationalComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtwoWayListener(\"tuiDropdownOpenChange\", function TuiInputPhoneInternationalComponent_div_0_Template_div_tuiDropdownOpenChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.open, $event) || (ctx_r1.open = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"tuiActiveZoneChange\", function TuiInputPhoneInternationalComponent_div_0_Template_div_tuiActiveZoneChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onActiveZone($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵelement(2, \"tui-primitive-textfield\", 6);\n    i0.ɵɵelementStart(3, \"tui-input-phone\", 7);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TuiInputPhoneInternationalComponent_div_0_Template_tui_input_phone_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.value, $event) || (ctx_r1.value = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵprojection(4);\n    i0.ɵɵelement(5, \"input\", 8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, TuiInputPhoneInternationalComponent_div_0_ng_template_6_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(8, TuiInputPhoneInternationalComponent_div_0_ng_template_8_Template, 2, 4, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor)(10, TuiInputPhoneInternationalComponent_div_0_ng_template_10_Template, 2, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dropdown_r6 = i0.ɵɵreference(7);\n    const countryValueContent_r7 = i0.ɵɵreference(9);\n    const icon_r8 = i0.ɵɵreference(11);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"tuiDropdown\", dropdown_r6)(\"tuiDropdownEnabled\", !ctx_r1.readOnly);\n    i0.ɵɵtwoWayProperty(\"tuiDropdownOpen\", ctx_r1.open);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"flex\", \"0 0 auto\");\n    i0.ɵɵproperty(\"disabled\", ctx_r1.disabled)(\"editable\", false)(\"focusable\", ctx_r1.focusable)(\"pseudoFocus\", ctx_r1.open || null)(\"readOnly\", ctx_r1.readOnly)(\"tuiTextfieldCustomContent\", countryValueContent_r7)(\"tuiTextfieldIcon\", icon_r8)(\"tuiTextfieldLabelOutside\", true);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"flex\", \"0 0 auto\");\n    i0.ɵɵproperty(\"countryCode\", ctx_r1.inputPhoneCountryCode)(\"disabled\", ctx_r1.disabled)(\"focusable\", ctx_r1.focusable)(\"ngModelOptions\", i0.ɵɵpureFunction0(25, _c1))(\"phoneMaskAfterCountryCode\", ctx_r1.phoneMaskAfterCountryCode)(\"pseudoFocus\", ctx_r1.pseudoFocus)(\"pseudoHover\", ctx_r1.pseudoHover)(\"pseudoInvalid\", ctx_r1.computedInvalid)(\"readOnly\", ctx_r1.readOnly);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.value);\n  }\n}\nconst TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {\n  countries: [],\n  countryIsoCode: 'RU'\n};\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nconst TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nfunction tuiInputPhoneInternationalOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, options, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\n}\n\n/**\n * @deprecated: drop in v5.0\n */\nfunction tuiExtractValueFromEvent(event) {\n  return 'dataTransfer' in event ? event.dataTransfer?.getData('text/plain') || '' : tuiGetClipboardDataText(event);\n}\nconst MASK_SYMBOLS = /[ \\-_()]/g;\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nclass TuiInputPhoneInternationalComponent extends AbstractTuiControl {\n  constructor() {\n    super(...arguments);\n    this.options = inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS);\n    this.extractCountryCodePipe = inject(TuiToCountryCodePipe);\n    this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);\n    this.open = false;\n    this.countriesNames$ = inject(TUI_COUNTRIES);\n    this.countriesMasks = inject(TUI_COUNTRIES_MASKS);\n    this.arrow = TUI_ARROW;\n    this.countries = this.options.countries;\n    this.countryIsoCodeChange = new EventEmitter();\n    this.countryIsoCode = this.options.countryIsoCode;\n  }\n  set isoCode(code) {\n    if (this.countryIsoCode === code) {\n      return;\n    }\n    this.inputPhoneComponent?.writeValue(this.value);\n    this.countryIsoCode = code;\n  }\n  get nativeFocusableElement() {\n    return this.inputPhoneComponent && !this.computedDisabled ? this.inputPhoneComponent.nativeFocusableElement : null;\n  }\n  get focused() {\n    return !!this.primitiveTextfield && this.primitiveTextfield.focused || !!this.inputPhoneComponent && this.inputPhoneComponent.focused;\n  }\n  get inputPhoneCountryCode() {\n    return tuiIsoToCountryCode(this.countriesMasks, this.countryIsoCode);\n  }\n  get phoneMaskAfterCountryCode() {\n    const countryCode = this.inputPhoneCountryCode;\n    return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);\n  }\n  onPaste(event) {\n    let value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, '');\n    const countryIsoCode = this.extractCountryCodePipe.transform(value, this.countries);\n    if (!countryIsoCode) {\n      this.value = `${this.inputPhoneCountryCode}${value}`.replaceAll(MASK_SYMBOLS, '').slice(0, tuiGetMaxAllowedPhoneLength(this.countriesMasks, this.countryIsoCode));\n      return;\n    }\n    if (countryIsoCode === 'RU') {\n      value = value.replace(/^8/, '7');\n    }\n    this.updateCountryIsoCode(countryIsoCode);\n    this.value = `${CHAR_PLUS}${value}`;\n  }\n  onItemClick(isoCode) {\n    this.open = false;\n    this.updateCountryIsoCode(isoCode);\n    // recalculates mask inside inputPhone to prevent isoCode conflict\n    this.cdr.detectChanges();\n    const maxLength = tuiGetMaxAllowedPhoneLength(this.countriesMasks, isoCode);\n    if (this.value.length > maxLength) {\n      this.value = this.value.slice(0, maxLength);\n    }\n    if (this.nativeFocusableElement) {\n      this.nativeFocusableElement.focus();\n    }\n  }\n  setDisabledState() {\n    super.setDisabledState();\n    this.close();\n  }\n  get size() {\n    return this.textfieldSize.size;\n  }\n  onActiveZone(active) {\n    this.updateFocused(active);\n  }\n  getFallbackValue() {\n    return '';\n  }\n  calculateMaskAfterCountryCode(mask, countryCode) {\n    return mask.replace(countryCode, '').trim();\n  }\n  close() {\n    this.open = false;\n  }\n  updateCountryIsoCode(code) {\n    this.countryIsoCode = code;\n    this.countryIsoCodeChange.emit(code);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵTuiInputPhoneInternationalComponent_BaseFactory;\n      return function TuiInputPhoneInternationalComponent_Factory(__ngFactoryType__) {\n        return (ɵTuiInputPhoneInternationalComponent_BaseFactory || (ɵTuiInputPhoneInternationalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputPhoneInternationalComponent)))(__ngFactoryType__ || TuiInputPhoneInternationalComponent);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiInputPhoneInternationalComponent,\n      selectors: [[\"tui-input-phone-international\"]],\n      viewQuery: function TuiInputPhoneInternationalComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TuiInputPhoneComponent, 5);\n          i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputPhoneComponent = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.primitiveTextfield = _t.first);\n        }\n      },\n      hostVars: 1,\n      hostBindings: function TuiInputPhoneInternationalComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"paste.capture.prevent.stop\", function TuiInputPhoneInternationalComponent_paste_capture_prevent_stop_HostBindingHandler($event) {\n            return ctx.onPaste($event);\n          })(\"drop.capture.prevent.stop\", function TuiInputPhoneInternationalComponent_drop_capture_prevent_stop_HostBindingHandler($event) {\n            return ctx.onPaste($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"data-size\", ctx.size);\n        }\n      },\n      inputs: {\n        countries: \"countries\",\n        isoCode: [0, \"countryIsoCode\", \"isoCode\"]\n      },\n      outputs: {\n        countryIsoCodeChange: \"countryIsoCodeChange\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent), tuiAsControl(TuiInputPhoneInternationalComponent), TuiToCountryCodePipe]), i0.ɵɵHostDirectivesFeature([i1.TuiDropdownFixed]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 2,\n      vars: 3,\n      consts: [[\"dropdown\", \"\"], [\"countryValueContent\", \"\"], [\"icon\", \"\"], [\"tuiDropdownOpenMonitor\", \"\", 3, \"tuiDropdown\", \"tuiDropdownEnabled\", \"tuiDropdownOpen\", \"tuiDropdownOpenChange\", \"tuiActiveZoneChange\", 4, \"ngIf\"], [\"tuiDropdownOpenMonitor\", \"\", 3, \"tuiDropdownOpenChange\", \"tuiActiveZoneChange\", \"tuiDropdown\", \"tuiDropdownEnabled\", \"tuiDropdownOpen\"], [\"tuiGroup\", \"\"], [\"tuiHintContent\", \"\", \"tuiTextfieldPostfix\", \"\", \"tuiTextfieldPrefix\", \"\", 1, \"t-country-select\", 3, \"disabled\", \"editable\", \"focusable\", \"pseudoFocus\", \"readOnly\", \"tuiTextfieldCustomContent\", \"tuiTextfieldIcon\", \"tuiTextfieldLabelOutside\"], [1, \"t-input-phone\", 3, \"ngModelChange\", \"countryCode\", \"disabled\", \"focusable\", \"ngModelOptions\", \"phoneMaskAfterCountryCode\", \"pseudoFocus\", \"pseudoHover\", \"pseudoInvalid\", \"readOnly\", \"ngModel\"], [\"autocomplete\", \"new-password\", \"tuiTextfieldLegacy\", \"\"], [\"tuiOption\", \"\", \"type\", \"button\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"tuiOption\", \"\", \"type\", \"button\", 3, \"click\"], [\"alt\", \"\", 1, \"t-flag\", 3, \"src\"], [1, \"t-country-item-name\"], [1, \"t-country-item-code\"], [1, \"t-flag\", \"t-flag_select\", 3, \"alt\", \"src\"], [\"tuiAppearance\", \"icon\"], [4, \"polymorpheusOutlet\"]],\n      template: function TuiInputPhoneInternationalComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, TuiInputPhoneInternationalComponent_div_0_Template, 12, 26, \"div\", 3);\n          i0.ɵɵpipe(1, \"async\");\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.countriesNames$));\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, i2.AsyncPipe, FormsModule, i3.NgControlStatus, i3.NgModel, PolymorpheusOutlet, TuiAppearance, i4.TuiDataListComponent, i4.TuiOption, i1.TuiDropdownDirective, i1.TuiDropdownOpen, TuiFlagPipe, TuiGroup, i5.TuiHintOptionsDirective, TuiInputPhoneModule, i6.TuiInputPhoneComponent, i6.TuiInputPhoneDirective, i7.TuiTextfieldComponent, TuiIsoToCountryCodePipe, TuiLegacyDropdownOpenMonitorDirective, TuiPrimitiveTextfieldModule, i7.TuiPrimitiveTextfieldComponent, i7.TuiPrimitiveTextfieldDirective, TuiTextfieldControllerModule, i8.TuiTextfieldCustomContentDirective, i8.TuiTextfieldLabelOutsideDirective, i8.TuiTextfieldIconDirective, i8.TuiTextfieldPrefixDirective, i8.TuiTextfieldPostfixDirective],\n      styles: [\"[_nghost-%COMP%]{display:block}._disabled[_nghost-%COMP%], [_nghost-%COMP%]   *:disabled[_nghost-%COMP%], *:disabled   [_nghost-%COMP%]{pointer-events:none}.t-country-select[_ngcontent-%COMP%]{inline-size:5.625rem}.t-country-select[_ngcontent-%COMP%]:not(._readonly)     input:not(:disabled){cursor:pointer}.t-country-select._readonly[_ngcontent-%COMP%]     input{cursor:default}.t-country-select[data-size=m][_ngcontent-%COMP%]{inline-size:5.5rem}.t-country-select[data-size=s][_ngcontent-%COMP%]{inline-size:2rem}.t-country-select[data-size=s][_ngcontent-%COMP%]   .t-flag[_ngcontent-%COMP%]{margin-left:-1rem}.t-input-phone[_ngcontent-%COMP%]{flex:1}.t-flag[_ngcontent-%COMP%]{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select[_ngcontent-%COMP%]{margin-left:-.5rem}.t-country-item-name[_ngcontent-%COMP%]{margin-left:.75rem;margin-right:auto}.t-country-item-code[_ngcontent-%COMP%]{color:var(--tui-text-secondary);margin-right:.25rem}\"],\n      changeDetection: 0\n    });\n  }\n}\n__decorate([tuiPure], TuiInputPhoneInternationalComponent.prototype, \"calculateMaskAfterCountryCode\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputPhoneInternationalComponent, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: 'tui-input-phone-international',\n      imports: [CommonModule, FormsModule, PolymorpheusOutlet, PolymorpheusTemplate, TuiAppearance, TuiArrowComponent, TuiButton, TuiDataList, TuiDropdown, TuiFlagPipe, TuiGroup, TuiHint, TuiInputPhoneModule, TuiIsoToCountryCodePipe, TuiLegacyDropdownOpenMonitorDirective, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent), tuiAsControl(TuiInputPhoneInternationalComponent), TuiToCountryCodePipe],\n      hostDirectives: [TuiDropdownFixed],\n      host: {\n        '[attr.data-size]': 'size',\n        '(paste.capture.prevent.stop)': 'onPaste($event)',\n        '(drop.capture.prevent.stop)': 'onPaste($event)'\n      },\n      template: \"<div\\n    *ngIf=\\\"countriesNames$ | async as countriesNames\\\"\\n    tuiDropdownOpenMonitor\\n    [tuiDropdown]=\\\"dropdown\\\"\\n    [tuiDropdownEnabled]=\\\"!readOnly\\\"\\n    [(tuiDropdownOpen)]=\\\"open\\\"\\n    (tuiActiveZoneChange)=\\\"onActiveZone($event)\\\"\\n>\\n    <div tuiGroup>\\n        <tui-primitive-textfield\\n            tuiHintContent=\\\"\\\"\\n            tuiTextfieldPostfix=\\\"\\\"\\n            tuiTextfieldPrefix=\\\"\\\"\\n            class=\\\"t-country-select\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [editable]=\\\"false\\\"\\n            [focusable]=\\\"focusable\\\"\\n            [pseudoFocus]=\\\"open || null\\\"\\n            [readOnly]=\\\"readOnly\\\"\\n            [style.flex]=\\\"'0 0 auto'\\\"\\n            [tuiTextfieldCustomContent]=\\\"countryValueContent\\\"\\n            [tuiTextfieldIcon]=\\\"icon\\\"\\n            [tuiTextfieldLabelOutside]=\\\"true\\\"\\n        />\\n        <tui-input-phone\\n            class=\\\"t-input-phone\\\"\\n            [countryCode]=\\\"inputPhoneCountryCode\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [focusable]=\\\"focusable\\\"\\n            [ngModelOptions]=\\\"{standalone: true}\\\"\\n            [phoneMaskAfterCountryCode]=\\\"phoneMaskAfterCountryCode\\\"\\n            [pseudoFocus]=\\\"pseudoFocus\\\"\\n            [pseudoHover]=\\\"pseudoHover\\\"\\n            [pseudoInvalid]=\\\"computedInvalid\\\"\\n            [readOnly]=\\\"readOnly\\\"\\n            [style.flex]=\\\"'0 0 auto'\\\"\\n            [(ngModel)]=\\\"value\\\"\\n        >\\n            <ng-content />\\n            <input\\n                autocomplete=\\\"new-password\\\"\\n                tuiTextfieldLegacy\\n            />\\n        </tui-input-phone>\\n    </div>\\n\\n    <ng-template #dropdown>\\n        <tui-data-list>\\n            <button\\n                *ngFor=\\\"let item of countries\\\"\\n                tuiOption\\n                type=\\\"button\\\"\\n                (click)=\\\"onItemClick(item)\\\"\\n            >\\n                <img\\n                    alt=\\\"\\\"\\n                    class=\\\"t-flag\\\"\\n                    [src]=\\\"item | tuiFlag\\\"\\n                />\\n                <span class=\\\"t-country-item-name\\\">\\n                    {{ countriesNames[item] }}\\n                </span>\\n                <span class=\\\"t-country-item-code\\\">\\n                    {{ item | tuiIsoToCountryCode }}\\n                </span>\\n            </button>\\n        </tui-data-list>\\n    </ng-template>\\n\\n    <ng-template #countryValueContent>\\n        <img\\n            class=\\\"t-flag t-flag_select\\\"\\n            [alt]=\\\"countriesNames[countryIsoCode]\\\"\\n            [src]=\\\"countryIsoCode | tuiFlag\\\"\\n        />\\n    </ng-template>\\n\\n    <ng-template #icon>\\n        <div tuiAppearance=\\\"icon\\\">\\n            <ng-container *polymorpheusOutlet=\\\"arrow\\\" />\\n        </div>\\n    </ng-template>\\n</div>\\n\",\n      styles: [\":host{display:block}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-country-select{inline-size:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{inline-size:5.5rem}.t-country-select[data-size=s]{inline-size:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-input-phone{flex:1}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{margin-left:-.5rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-right:.25rem}\\n\"]\n    }]\n  }], null, {\n    inputPhoneComponent: [{\n      type: ViewChild,\n      args: [TuiInputPhoneComponent]\n    }],\n    primitiveTextfield: [{\n      type: ViewChild,\n      args: [TuiPrimitiveTextfieldComponent]\n    }],\n    countries: [{\n      type: Input\n    }],\n    countryIsoCodeChange: [{\n      type: Output\n    }],\n    isoCode: [{\n      type: Input,\n      args: ['countryIsoCode']\n    }],\n    calculateMaskAfterCountryCode: []\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS, TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, TuiInputPhoneInternationalComponent, tuiExtractValueFromEvent, tuiInputPhoneInternationalOptionsProvider };","map":{"version":3,"names":["__decorate","i2","CommonModule","i0","inject","EventEmitter","Component","ChangeDetectionStrategy","ViewChild","Input","Output","i3","FormsModule","TUI_NON_DIGITS_REGEXP","CHAR_PLUS","tuiCreateToken","tuiProvideOptions","tuiPure","TuiButton","i4","TuiDataList","TuiAppearance","i1","TuiDropdown","TuiDropdownFixed","TuiGroup","i5","TuiHint","TuiFlagPipe","TUI_COUNTRIES","AbstractTuiControl","tuiAsControl","TUI_ARROW","TuiArrowComponent","i6","TuiInputPhoneComponent","TuiInputPhoneModule","i7","TuiPrimitiveTextfieldComponent","TuiPrimitiveTextfieldModule","i8","TUI_TEXTFIELD_SIZE","TuiLegacyDropdownOpenMonitorDirective","TuiTextfieldControllerModule","TuiToCountryCodePipe","TuiIsoToCountryCodePipe","TUI_COUNTRIES_MASKS","tuiAsFocusableItemAccessor","tuiIsoToCountryCode","tuiGetMaxAllowedPhoneLength","PolymorpheusOutlet","PolymorpheusTemplate","tuiGetClipboardDataText","_c0","_c1","standalone","TuiInputPhoneInternationalComponent_div_0_ng_template_6_button_1_Template","rf","ctx","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","TuiInputPhoneInternationalComponent_div_0_ng_template_6_button_1_Template_button_click_0_listener","item_r4","ɵɵrestoreView","$implicit","ctx_r1","ɵɵnextContext","ɵɵresetView","onItemClick","ɵɵelement","ɵɵpipe","ɵɵtext","ɵɵelementEnd","countriesNames_r5","ngIf","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","ɵɵsanitizeUrl","ɵɵtextInterpolate1","TuiInputPhoneInternationalComponent_div_0_ng_template_6_Template","ɵɵtemplate","countries","TuiInputPhoneInternationalComponent_div_0_ng_template_8_Template","countryIsoCode","TuiInputPhoneInternationalComponent_div_0_ng_template_10_ng_container_1_Template","ɵɵelementContainer","TuiInputPhoneInternationalComponent_div_0_ng_template_10_Template","arrow","TuiInputPhoneInternationalComponent_div_0_Template","_r1","ɵɵtwoWayListener","TuiInputPhoneInternationalComponent_div_0_Template_div_tuiDropdownOpenChange_0_listener","$event","ɵɵtwoWayBindingSet","open","TuiInputPhoneInternationalComponent_div_0_Template_div_tuiActiveZoneChange_0_listener","onActiveZone","TuiInputPhoneInternationalComponent_div_0_Template_tui_input_phone_ngModelChange_3_listener","value","ɵɵprojection","ɵɵtemplateRefExtractor","dropdown_r6","ɵɵreference","countryValueContent_r7","icon_r8","readOnly","ɵɵtwoWayProperty","ɵɵstyleProp","disabled","focusable","inputPhoneCountryCode","ɵɵpureFunction0","phoneMaskAfterCountryCode","pseudoFocus","pseudoHover","computedInvalid","TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS","TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS","tuiInputPhoneInternationalOptionsProvider","options","tuiExtractValueFromEvent","event","dataTransfer","getData","MASK_SYMBOLS","TuiInputPhoneInternationalComponent","constructor","arguments","extractCountryCodePipe","textfieldSize","countriesNames$","countriesMasks","countryIsoCodeChange","isoCode","code","inputPhoneComponent","writeValue","nativeFocusableElement","computedDisabled","focused","primitiveTextfield","countryCode","calculateMaskAfterCountryCode","onPaste","replace","transform","replaceAll","slice","updateCountryIsoCode","cdr","detectChanges","maxLength","length","focus","setDisabledState","close","size","active","updateFocused","getFallbackValue","mask","trim","emit","ɵfac","ɵTuiInputPhoneInternationalComponent_BaseFactory","TuiInputPhoneInternationalComponent_Factory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","TuiInputPhoneInternationalComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","TuiInputPhoneInternationalComponent_HostBindings","TuiInputPhoneInternationalComponent_paste_capture_prevent_stop_HostBindingHandler","TuiInputPhoneInternationalComponent_drop_capture_prevent_stop_HostBindingHandler","ɵɵattribute","inputs","outputs","features","ɵɵProvidersFeature","ɵɵHostDirectivesFeature","ɵɵInheritDefinitionFeature","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","consts","template","TuiInputPhoneInternationalComponent_Template","ɵɵprojectionDef","dependencies","NgForOf","NgIf","AsyncPipe","NgControlStatus","NgModel","TuiDataListComponent","TuiOption","TuiDropdownDirective","TuiDropdownOpen","TuiHintOptionsDirective","TuiInputPhoneDirective","TuiTextfieldComponent","TuiPrimitiveTextfieldDirective","TuiTextfieldCustomContentDirective","TuiTextfieldLabelOutsideDirective","TuiTextfieldIconDirective","TuiTextfieldPrefixDirective","TuiTextfieldPostfixDirective","styles","changeDetection","prototype","ngDevMode","ɵsetClassMetadata","args","selector","imports","OnPush","providers","hostDirectives","host"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@taiga-ui/legacy/fesm2022/taiga-ui-legacy-components-input-phone-international.mjs"],"sourcesContent":["import { __decorate } from 'tslib';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { TUI_NON_DIGITS_REGEXP, CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { tuiCreateToken, tuiProvideOptions, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { TuiButton } from '@taiga-ui/core/components/button';\nimport * as i4 from '@taiga-ui/core/components/data-list';\nimport { TuiDataList } from '@taiga-ui/core/components/data-list';\nimport { TuiAppearance } from '@taiga-ui/core/directives/appearance';\nimport * as i1 from '@taiga-ui/core/directives/dropdown';\nimport { TuiDropdown, TuiDropdownFixed } from '@taiga-ui/core/directives/dropdown';\nimport { TuiGroup } from '@taiga-ui/core/directives/group';\nimport * as i5 from '@taiga-ui/core/directives/hint';\nimport { TuiHint } from '@taiga-ui/core/directives/hint';\nimport { TuiFlagPipe } from '@taiga-ui/core/pipes/flag';\nimport { TUI_COUNTRIES } from '@taiga-ui/kit/tokens';\nimport { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';\nimport { TUI_ARROW, TuiArrowComponent } from '@taiga-ui/legacy/components/arrow';\nimport * as i6 from '@taiga-ui/legacy/components/input-phone';\nimport { TuiInputPhoneComponent, TuiInputPhoneModule } from '@taiga-ui/legacy/components/input-phone';\nimport * as i7 from '@taiga-ui/legacy/components/primitive-textfield';\nimport { TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldModule } from '@taiga-ui/legacy/components/primitive-textfield';\nimport * as i8 from '@taiga-ui/legacy/directives';\nimport { TUI_TEXTFIELD_SIZE, TuiLegacyDropdownOpenMonitorDirective, TuiTextfieldControllerModule } from '@taiga-ui/legacy/directives';\nimport { TuiToCountryCodePipe, TuiIsoToCountryCodePipe } from '@taiga-ui/legacy/pipes';\nimport { TUI_COUNTRIES_MASKS, tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';\nimport { tuiIsoToCountryCode, tuiGetMaxAllowedPhoneLength } from '@taiga-ui/legacy/utils';\nimport { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';\nimport { tuiGetClipboardDataText } from '@taiga-ui/cdk/utils/dom';\n\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nconst TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {\n    countries: [],\n    countryIsoCode: 'RU',\n};\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nconst TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nfunction tuiInputPhoneInternationalOptionsProvider(options) {\n    return tuiProvideOptions(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, options, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\n}\n\n/**\n * @deprecated: drop in v5.0\n */\nfunction tuiExtractValueFromEvent(event) {\n    return 'dataTransfer' in event\n        ? event.dataTransfer?.getData('text/plain') || ''\n        : tuiGetClipboardDataText(event);\n}\n\nconst MASK_SYMBOLS = /[ \\-_()]/g;\n/**\n * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}\n * https://taiga-ui.dev/components/input-phone-international\n */\nclass TuiInputPhoneInternationalComponent extends AbstractTuiControl {\n    constructor() {\n        super(...arguments);\n        this.options = inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS);\n        this.extractCountryCodePipe = inject(TuiToCountryCodePipe);\n        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);\n        this.open = false;\n        this.countriesNames$ = inject(TUI_COUNTRIES);\n        this.countriesMasks = inject(TUI_COUNTRIES_MASKS);\n        this.arrow = TUI_ARROW;\n        this.countries = this.options.countries;\n        this.countryIsoCodeChange = new EventEmitter();\n        this.countryIsoCode = this.options.countryIsoCode;\n    }\n    set isoCode(code) {\n        if (this.countryIsoCode === code) {\n            return;\n        }\n        this.inputPhoneComponent?.writeValue(this.value);\n        this.countryIsoCode = code;\n    }\n    get nativeFocusableElement() {\n        return this.inputPhoneComponent && !this.computedDisabled\n            ? this.inputPhoneComponent.nativeFocusableElement\n            : null;\n    }\n    get focused() {\n        return ((!!this.primitiveTextfield && this.primitiveTextfield.focused) ||\n            (!!this.inputPhoneComponent && this.inputPhoneComponent.focused));\n    }\n    get inputPhoneCountryCode() {\n        return tuiIsoToCountryCode(this.countriesMasks, this.countryIsoCode);\n    }\n    get phoneMaskAfterCountryCode() {\n        const countryCode = this.inputPhoneCountryCode;\n        return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);\n    }\n    onPaste(event) {\n        let value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, '');\n        const countryIsoCode = this.extractCountryCodePipe.transform(value, this.countries);\n        if (!countryIsoCode) {\n            this.value = `${this.inputPhoneCountryCode}${value}`\n                .replaceAll(MASK_SYMBOLS, '')\n                .slice(0, tuiGetMaxAllowedPhoneLength(this.countriesMasks, this.countryIsoCode));\n            return;\n        }\n        if (countryIsoCode === 'RU') {\n            value = value.replace(/^8/, '7');\n        }\n        this.updateCountryIsoCode(countryIsoCode);\n        this.value = `${CHAR_PLUS}${value}`;\n    }\n    onItemClick(isoCode) {\n        this.open = false;\n        this.updateCountryIsoCode(isoCode);\n        // recalculates mask inside inputPhone to prevent isoCode conflict\n        this.cdr.detectChanges();\n        const maxLength = tuiGetMaxAllowedPhoneLength(this.countriesMasks, isoCode);\n        if (this.value.length > maxLength) {\n            this.value = this.value.slice(0, maxLength);\n        }\n        if (this.nativeFocusableElement) {\n            this.nativeFocusableElement.focus();\n        }\n    }\n    setDisabledState() {\n        super.setDisabledState();\n        this.close();\n    }\n    get size() {\n        return this.textfieldSize.size;\n    }\n    onActiveZone(active) {\n        this.updateFocused(active);\n    }\n    getFallbackValue() {\n        return '';\n    }\n    calculateMaskAfterCountryCode(mask, countryCode) {\n        return mask.replace(countryCode, '').trim();\n    }\n    close() {\n        this.open = false;\n    }\n    updateCountryIsoCode(code) {\n        this.countryIsoCode = code;\n        this.countryIsoCodeChange.emit(code);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiInputPhoneInternationalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.12\", type: TuiInputPhoneInternationalComponent, isStandalone: true, selector: \"tui-input-phone-international\", inputs: { countries: \"countries\", isoCode: [\"countryIsoCode\", \"isoCode\"] }, outputs: { countryIsoCodeChange: \"countryIsoCodeChange\" }, host: { listeners: { \"paste.capture.prevent.stop\": \"onPaste($event)\", \"drop.capture.prevent.stop\": \"onPaste($event)\" }, properties: { \"attr.data-size\": \"size\" } }, providers: [\n            tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),\n            tuiAsControl(TuiInputPhoneInternationalComponent),\n            TuiToCountryCodePipe,\n        ], viewQueries: [{ propertyName: \"inputPhoneComponent\", first: true, predicate: TuiInputPhoneComponent, descendants: true }, { propertyName: \"primitiveTextfield\", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiDropdownFixed }], ngImport: i0, template: \"<div\\n    *ngIf=\\\"countriesNames$ | async as countriesNames\\\"\\n    tuiDropdownOpenMonitor\\n    [tuiDropdown]=\\\"dropdown\\\"\\n    [tuiDropdownEnabled]=\\\"!readOnly\\\"\\n    [(tuiDropdownOpen)]=\\\"open\\\"\\n    (tuiActiveZoneChange)=\\\"onActiveZone($event)\\\"\\n>\\n    <div tuiGroup>\\n        <tui-primitive-textfield\\n            tuiHintContent=\\\"\\\"\\n            tuiTextfieldPostfix=\\\"\\\"\\n            tuiTextfieldPrefix=\\\"\\\"\\n            class=\\\"t-country-select\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [editable]=\\\"false\\\"\\n            [focusable]=\\\"focusable\\\"\\n            [pseudoFocus]=\\\"open || null\\\"\\n            [readOnly]=\\\"readOnly\\\"\\n            [style.flex]=\\\"'0 0 auto'\\\"\\n            [tuiTextfieldCustomContent]=\\\"countryValueContent\\\"\\n            [tuiTextfieldIcon]=\\\"icon\\\"\\n            [tuiTextfieldLabelOutside]=\\\"true\\\"\\n        />\\n        <tui-input-phone\\n            class=\\\"t-input-phone\\\"\\n            [countryCode]=\\\"inputPhoneCountryCode\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [focusable]=\\\"focusable\\\"\\n            [ngModelOptions]=\\\"{standalone: true}\\\"\\n            [phoneMaskAfterCountryCode]=\\\"phoneMaskAfterCountryCode\\\"\\n            [pseudoFocus]=\\\"pseudoFocus\\\"\\n            [pseudoHover]=\\\"pseudoHover\\\"\\n            [pseudoInvalid]=\\\"computedInvalid\\\"\\n            [readOnly]=\\\"readOnly\\\"\\n            [style.flex]=\\\"'0 0 auto'\\\"\\n            [(ngModel)]=\\\"value\\\"\\n        >\\n            <ng-content />\\n            <input\\n                autocomplete=\\\"new-password\\\"\\n                tuiTextfieldLegacy\\n            />\\n        </tui-input-phone>\\n    </div>\\n\\n    <ng-template #dropdown>\\n        <tui-data-list>\\n            <button\\n                *ngFor=\\\"let item of countries\\\"\\n                tuiOption\\n                type=\\\"button\\\"\\n                (click)=\\\"onItemClick(item)\\\"\\n            >\\n                <img\\n                    alt=\\\"\\\"\\n                    class=\\\"t-flag\\\"\\n                    [src]=\\\"item | tuiFlag\\\"\\n                />\\n                <span class=\\\"t-country-item-name\\\">\\n                    {{ countriesNames[item] }}\\n                </span>\\n                <span class=\\\"t-country-item-code\\\">\\n                    {{ item | tuiIsoToCountryCode }}\\n                </span>\\n            </button>\\n        </tui-data-list>\\n    </ng-template>\\n\\n    <ng-template #countryValueContent>\\n        <img\\n            class=\\\"t-flag t-flag_select\\\"\\n            [alt]=\\\"countriesNames[countryIsoCode]\\\"\\n            [src]=\\\"countryIsoCode | tuiFlag\\\"\\n        />\\n    </ng-template>\\n\\n    <ng-template #icon>\\n        <div tuiAppearance=\\\"icon\\\">\\n            <ng-container *polymorpheusOutlet=\\\"arrow\\\" />\\n        </div>\\n    </ng-template>\\n</div>\\n\", styles: [\":host{display:block}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-country-select{inline-size:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{inline-size:5.5rem}.t-country-select[data-size=s]{inline-size:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-input-phone{flex:1}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{margin-left:-.5rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-right:.25rem}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: i2.AsyncPipe, name: \"async\" }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: PolymorpheusOutlet, selector: \"[polymorpheusOutlet]\", inputs: [\"polymorpheusOutlet\", \"polymorpheusOutletContext\"] }, { kind: \"directive\", type: TuiAppearance, selector: \"[tuiAppearance]\", inputs: [\"tuiAppearance\", \"tuiAppearanceState\", \"tuiAppearanceFocus\", \"tuiAppearanceMode\"] }, { kind: \"component\", type: i4.TuiDataListComponent, selector: \"tui-data-list\", inputs: [\"emptyContent\", \"size\"] }, { kind: \"component\", type: i4.TuiOption, selector: \"button[tuiOption], a[tuiOption], label[tuiOption]\", inputs: [\"disabled\", \"value\"] }, { kind: \"directive\", type: i1.TuiDropdownDirective, selector: \"[tuiDropdown]:not(ng-container):not(ng-template)\", inputs: [\"tuiDropdown\"], exportAs: [\"tuiDropdown\"] }, { kind: \"directive\", type: i1.TuiDropdownOpen, selector: \"[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]\", inputs: [\"tuiDropdownEnabled\", \"tuiDropdownOpen\"], outputs: [\"tuiDropdownOpenChange\"] }, { kind: \"pipe\", type: TuiFlagPipe, name: \"tuiFlag\" }, { kind: \"directive\", type: TuiGroup, selector: \"[tuiGroup]:not(ng-container)\", inputs: [\"orientation\", \"collapsed\", \"rounded\", \"size\"] }, { kind: \"directive\", type: i5.TuiHintOptionsDirective, selector: \"[tuiHintContent]\", inputs: [\"tuiHintContent\", \"tuiHintDirection\", \"tuiHintAppearance\", \"tuiHintShowDelay\", \"tuiHintHideDelay\"] }, { kind: \"ngmodule\", type: TuiInputPhoneModule }, { kind: \"component\", type: i6.TuiInputPhoneComponent, selector: \"tui-input-phone\", inputs: [\"phoneMaskAfterCountryCode\", \"allowText\", \"search\", \"countryCode\"], outputs: [\"searchChange\"] }, { kind: \"directive\", type: i6.TuiInputPhoneDirective, selector: \"tui-input-phone\" }, { kind: \"component\", type: i7.TuiTextfieldComponent, selector: \"input[tuiTextfieldLegacy], textarea[tuiTextfieldLegacy]\" }, { kind: \"pipe\", type: TuiIsoToCountryCodePipe, name: \"tuiIsoToCountryCode\" }, { kind: \"directive\", type: TuiLegacyDropdownOpenMonitorDirective, selector: \"[tuiDropdownOpenMonitor]\" }, { kind: \"ngmodule\", type: TuiPrimitiveTextfieldModule }, { kind: \"component\", type: i7.TuiPrimitiveTextfieldComponent, selector: \"tui-primitive-textfield\", inputs: [\"editable\", \"iconCleaner\", \"readOnly\", \"invalid\", \"disabled\", \"value\"], outputs: [\"valueChange\"] }, { kind: \"directive\", type: i7.TuiPrimitiveTextfieldDirective, selector: \"tui-primitive-textfield\" }, { kind: \"ngmodule\", type: TuiTextfieldControllerModule }, { kind: \"directive\", type: i8.TuiTextfieldCustomContentDirective, selector: \"[tuiTextfieldCustomContent]\", inputs: [\"tuiTextfieldCustomContent\"] }, { kind: \"directive\", type: i8.TuiTextfieldLabelOutsideDirective, selector: \"[tuiTextfieldLabelOutside]\", inputs: [\"tuiTextfieldLabelOutside\"] }, { kind: \"directive\", type: i8.TuiTextfieldIconDirective, selector: \"[tuiTextfieldIcon]\", inputs: [\"tuiTextfieldIcon\"] }, { kind: \"directive\", type: i8.TuiTextfieldPrefixDirective, selector: \"[tuiTextfieldPrefix]\", inputs: [\"tuiTextfieldPrefix\"] }, { kind: \"directive\", type: i8.TuiTextfieldPostfixDirective, selector: \"[tuiTextfieldPostfix]\", inputs: [\"tuiTextfieldPostfix\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\n__decorate([\n    tuiPure\n], TuiInputPhoneInternationalComponent.prototype, \"calculateMaskAfterCountryCode\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiInputPhoneInternationalComponent, decorators: [{\n            type: Component,\n            args: [{ standalone: true, selector: 'tui-input-phone-international', imports: [\n                        CommonModule,\n                        FormsModule,\n                        PolymorpheusOutlet,\n                        PolymorpheusTemplate,\n                        TuiAppearance,\n                        TuiArrowComponent,\n                        TuiButton,\n                        TuiDataList,\n                        TuiDropdown,\n                        TuiFlagPipe,\n                        TuiGroup,\n                        TuiHint,\n                        TuiInputPhoneModule,\n                        TuiIsoToCountryCodePipe,\n                        TuiLegacyDropdownOpenMonitorDirective,\n                        TuiPrimitiveTextfieldModule,\n                        TuiTextfieldControllerModule,\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),\n                        tuiAsControl(TuiInputPhoneInternationalComponent),\n                        TuiToCountryCodePipe,\n                    ], hostDirectives: [TuiDropdownFixed], host: {\n                        '[attr.data-size]': 'size',\n                        '(paste.capture.prevent.stop)': 'onPaste($event)',\n                        '(drop.capture.prevent.stop)': 'onPaste($event)',\n                    }, template: \"<div\\n    *ngIf=\\\"countriesNames$ | async as countriesNames\\\"\\n    tuiDropdownOpenMonitor\\n    [tuiDropdown]=\\\"dropdown\\\"\\n    [tuiDropdownEnabled]=\\\"!readOnly\\\"\\n    [(tuiDropdownOpen)]=\\\"open\\\"\\n    (tuiActiveZoneChange)=\\\"onActiveZone($event)\\\"\\n>\\n    <div tuiGroup>\\n        <tui-primitive-textfield\\n            tuiHintContent=\\\"\\\"\\n            tuiTextfieldPostfix=\\\"\\\"\\n            tuiTextfieldPrefix=\\\"\\\"\\n            class=\\\"t-country-select\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [editable]=\\\"false\\\"\\n            [focusable]=\\\"focusable\\\"\\n            [pseudoFocus]=\\\"open || null\\\"\\n            [readOnly]=\\\"readOnly\\\"\\n            [style.flex]=\\\"'0 0 auto'\\\"\\n            [tuiTextfieldCustomContent]=\\\"countryValueContent\\\"\\n            [tuiTextfieldIcon]=\\\"icon\\\"\\n            [tuiTextfieldLabelOutside]=\\\"true\\\"\\n        />\\n        <tui-input-phone\\n            class=\\\"t-input-phone\\\"\\n            [countryCode]=\\\"inputPhoneCountryCode\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [focusable]=\\\"focusable\\\"\\n            [ngModelOptions]=\\\"{standalone: true}\\\"\\n            [phoneMaskAfterCountryCode]=\\\"phoneMaskAfterCountryCode\\\"\\n            [pseudoFocus]=\\\"pseudoFocus\\\"\\n            [pseudoHover]=\\\"pseudoHover\\\"\\n            [pseudoInvalid]=\\\"computedInvalid\\\"\\n            [readOnly]=\\\"readOnly\\\"\\n            [style.flex]=\\\"'0 0 auto'\\\"\\n            [(ngModel)]=\\\"value\\\"\\n        >\\n            <ng-content />\\n            <input\\n                autocomplete=\\\"new-password\\\"\\n                tuiTextfieldLegacy\\n            />\\n        </tui-input-phone>\\n    </div>\\n\\n    <ng-template #dropdown>\\n        <tui-data-list>\\n            <button\\n                *ngFor=\\\"let item of countries\\\"\\n                tuiOption\\n                type=\\\"button\\\"\\n                (click)=\\\"onItemClick(item)\\\"\\n            >\\n                <img\\n                    alt=\\\"\\\"\\n                    class=\\\"t-flag\\\"\\n                    [src]=\\\"item | tuiFlag\\\"\\n                />\\n                <span class=\\\"t-country-item-name\\\">\\n                    {{ countriesNames[item] }}\\n                </span>\\n                <span class=\\\"t-country-item-code\\\">\\n                    {{ item | tuiIsoToCountryCode }}\\n                </span>\\n            </button>\\n        </tui-data-list>\\n    </ng-template>\\n\\n    <ng-template #countryValueContent>\\n        <img\\n            class=\\\"t-flag t-flag_select\\\"\\n            [alt]=\\\"countriesNames[countryIsoCode]\\\"\\n            [src]=\\\"countryIsoCode | tuiFlag\\\"\\n        />\\n    </ng-template>\\n\\n    <ng-template #icon>\\n        <div tuiAppearance=\\\"icon\\\">\\n            <ng-container *polymorpheusOutlet=\\\"arrow\\\" />\\n        </div>\\n    </ng-template>\\n</div>\\n\", styles: [\":host{display:block}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-country-select{inline-size:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{inline-size:5.5rem}.t-country-select[data-size=s]{inline-size:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-input-phone{flex:1}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{margin-left:-.5rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-right:.25rem}\\n\"] }]\n        }], propDecorators: { inputPhoneComponent: [{\n                type: ViewChild,\n                args: [TuiInputPhoneComponent]\n            }], primitiveTextfield: [{\n                type: ViewChild,\n                args: [TuiPrimitiveTextfieldComponent]\n            }], countries: [{\n                type: Input\n            }], countryIsoCodeChange: [{\n                type: Output\n            }], isoCode: [{\n                type: Input,\n                args: ['countryIsoCode']\n            }], calculateMaskAfterCountryCode: [] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS, TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, TuiInputPhoneInternationalComponent, tuiExtractValueFromEvent, tuiInputPhoneInternationalOptionsProvider };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}