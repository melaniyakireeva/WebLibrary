{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpCustomService } from '../http/http-service.service';\nlet ReferenceService = class ReferenceService {\n  httpService;\n  controller = 'Reference';\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  getReferenceEkbElements(filter, referenceId) {\n    const method = 'GetElementsByFilter';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      filter,\n      referenceId\n    });\n  }\n  deleteElementFromReference(ekbId, referencesIds) {\n    const method = 'DeleteElementsFromReference';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      ekbId,\n      referencesIds\n    });\n  }\n  saveElementToReference(ekbId, referencesIds) {\n    const method = 'AddElementsToReference';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      ekbId,\n      referencesIds\n    });\n  }\n  getReferencesPerElement(userId, ekbId) {\n    const method = 'GetElementReferences';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      userId: userId,\n      ekbId: ekbId\n    });\n  }\n  getUserReference(userId) {\n    const method = 'GetUserReferences';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      userId\n    });\n  }\n  saveUserReference(reference) {\n    const method = 'SaveReference';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      reference\n    });\n  }\n  deleteUserReference(referenceId) {\n    const method = 'DeleteReference';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      referenceId\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpCustomService\n  }];\n};\nReferenceService = __decorate([Injectable({\n  providedIn: 'root'\n})], ReferenceService);\nexport { ReferenceService };","map":{"version":3,"names":["Injectable","HttpCustomService","ReferenceService","httpService","controller","constructor","getReferenceEkbElements","filter","referenceId","method","api","postRequest","deleteElementFromReference","ekbId","referencesIds","saveElementToReference","getReferencesPerElement","userId","getUserReference","saveUserReference","reference","deleteUserReference","__decorate","providedIn"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\reference\\reference.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AuthorDto } from '../author/author-service.service';\r\nimport { HttpCustomService } from '../http/http-service.service';\r\nimport { Observable } from 'rxjs';\r\nimport { BaseFilter } from '../filters/filters';\r\nimport { EkbElementDto } from '../ekb-table/ekb-table.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ReferenceService {\r\n  private controller: string = 'Reference';\r\n\r\n  constructor(private httpService: HttpCustomService) {}\r\n\r\n  public getReferenceEkbElements(filter: BaseFilter, referenceId: number) {\r\n    const method = 'GetElementsByFilter';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { filter, referenceId });\r\n  }\r\n\r\n  public deleteElementFromReference(\r\n    ekbId: number,\r\n    referencesIds: number[]\r\n  ): Observable<boolean> {\r\n    const method = 'DeleteElementsFromReference';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { ekbId, referencesIds });\r\n  }\r\n\r\n  public saveElementToReference(\r\n    ekbId: number,\r\n    referencesIds: number[]\r\n  ): Observable<boolean> {\r\n    const method = 'AddElementsToReference';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { ekbId, referencesIds });\r\n  }\r\n\r\n  public getReferencesPerElement(\r\n    userId: number,\r\n    ekbId?: number\r\n  ): Observable<GetReferenceResponse> {\r\n    const method = 'GetElementReferences';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { userId: userId, ekbId: ekbId });\r\n  }\r\n\r\n  public getUserReference(userId: number): Observable<GetReferenceResponse> {\r\n    const method = 'GetUserReferences';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { userId });\r\n  }\r\n\r\n  public saveUserReference(reference: References): Observable<boolean> {\r\n    const method = 'SaveReference';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { reference });\r\n  }\r\n\r\n  public deleteUserReference(referenceId: number): Observable<boolean> {\r\n    const method = 'DeleteReference';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { referenceId });\r\n  }\r\n}\r\n\r\nexport interface ReferenceInfo {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  elementsCount: number;\r\n}\r\n\r\nexport interface References {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  userId: number;\r\n  ekbElements: EkbElementDto[];\r\n}\r\n\r\n\r\nexport interface GetReferenceRequest {\r\n  userId: number;\r\n}\r\n\r\nexport interface SaveReferenceRequest {\r\n  reference: References;\r\n}\r\n\r\nexport interface DeleteReferenceRequest {\r\n  referenceId: number;\r\n}\r\n\r\nexport interface GetReferenceResponse {\r\n  items: ReferenceInfo[];\r\n  totalCount: number;\r\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,iBAAiB,QAAQ,8BAA8B;AAQzD,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAGPC,WAAA;EAFZC,UAAU,GAAW,WAAW;EAExCC,YAAoBF,WAA8B;IAA9B,KAAAA,WAAW,GAAXA,WAAW;EAAsB;EAE9CG,uBAAuBA,CAACC,MAAkB,EAAEC,WAAmB;IACpE,MAAMC,MAAM,GAAG,qBAAqB;IACpC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEH,MAAM;MAAEC;IAAW,CAAE,CAAC;EACnE;EAEOI,0BAA0BA,CAC/BC,KAAa,EACbC,aAAuB;IAEvB,MAAML,MAAM,GAAG,6BAA6B;IAC5C,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEG,KAAK;MAAEC;IAAa,CAAE,CAAC;EACpE;EAEOC,sBAAsBA,CAC3BF,KAAa,EACbC,aAAuB;IAEvB,MAAML,MAAM,GAAG,wBAAwB;IACvC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEG,KAAK;MAAEC;IAAa,CAAE,CAAC;EACpE;EAEOE,uBAAuBA,CAC5BC,MAAc,EACdJ,KAAc;IAEd,MAAMJ,MAAM,GAAG,sBAAsB;IACrC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEO,MAAM,EAAEA,MAAM;MAAEJ,KAAK,EAAEA;IAAK,CAAE,CAAC;EAC5E;EAEOK,gBAAgBA,CAACD,MAAc;IACpC,MAAMR,MAAM,GAAG,mBAAmB;IAClC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEO;IAAM,CAAE,CAAC;EACtD;EAEOE,iBAAiBA,CAACC,SAAqB;IAC5C,MAAMX,MAAM,GAAG,eAAe;IAC9B,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEU;IAAS,CAAE,CAAC;EACzD;EAEOC,mBAAmBA,CAACb,WAAmB;IAC5C,MAAMC,MAAM,GAAG,iBAAiB;IAChC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACN,UAAU,IAAIK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACN,WAAW,CAACQ,WAAW,CAACD,GAAG,EAAE;MAAEF;IAAW,CAAE,CAAC;EAC3D;;;;;AAtDWN,gBAAgB,GAAAoB,UAAA,EAH5BtB,UAAU,CAAC;EACVuB,UAAU,EAAE;CACb,CAAC,C,EACWrB,gBAAgB,CAuD5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}