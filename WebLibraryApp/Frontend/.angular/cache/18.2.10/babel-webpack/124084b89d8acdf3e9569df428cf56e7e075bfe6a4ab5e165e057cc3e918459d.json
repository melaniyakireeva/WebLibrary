{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./category-tree.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./category-tree.component.scss?ngResource\";\nimport { NgForOf } from '@angular/common';\nimport { ChangeDetectorRef, Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { EMPTY_ARRAY, TuiMapperPipe } from '@taiga-ui/cdk';\nimport { TuiLabel } from '@taiga-ui/core';\nimport { TuiCheckbox, TuiTree } from '@taiga-ui/kit';\nimport { CategoryService } from '../../services/category/category.service';\nimport _ from 'lodash';\nfunction flatten(item) {\n  return item.children ? item.children.map(flatten).reduce((arr, oldVal) => [...arr, ...oldVal], [item]) : [item];\n}\nlet CategoryTreeComponent = class CategoryTreeComponent {\n  categoryService;\n  cdRef;\n  selectedIds = new EventEmitter();\n  ngOnInit() {\n    this.categoryService.getAllCategories().subscribe(categoryArr => {\n      let dict = {};\n      dict[-1] = {\n        categoryId: -1,\n        text: 'root',\n        children: []\n      };\n      for (let category of categoryArr) {\n        dict[category.id] = {\n          categoryId: category.id,\n          text: category.name,\n          children: []\n        };\n        this.map.set(category.id, false);\n      }\n      for (let category of categoryArr) {\n        let parent = category.parentId ? dict[category.parentId] : dict[-1];\n        if (!_.isNil(parent.children)) {\n          parent.children.push(dict[category.id]);\n        } else {\n          parent.children = [dict[category.id]];\n        }\n      }\n      this.data = dict[-1];\n      this.cdRef.markForCheck();\n    });\n  }\n  constructor(categoryService, cdRef) {\n    this.categoryService = categoryService;\n    this.cdRef = cdRef;\n  }\n  map = new Map();\n  data = {\n    categoryId: -1,\n    text: 'root',\n    children: []\n  };\n  handler = item => item.children || EMPTY_ARRAY;\n  getValue = (item, map) => {\n    let result = null;\n    const flat = flatten(item);\n    const key = flat[0];\n    if (key) {\n      result = !!map.get(key.categoryId);\n    }\n    for (const item of flat) {\n      if (result !== !!map.get(item.categoryId)) {\n        return null;\n      }\n    }\n    return result;\n  };\n  onChecked(node, value) {\n    flatten(node).forEach(item => this.map.set(item.categoryId, value));\n    this.map = new Map(this.map.entries());\n    const selectedIds = [...this.map.entries()].filter(x => x[1]).map(x => x[0]);\n    this.selectedIds.emit(selectedIds);\n  }\n  static ctorParameters = () => [{\n    type: CategoryService\n  }, {\n    type: ChangeDetectorRef\n  }];\n  static propDecorators = {\n    selectedIds: [{\n      type: Output\n    }]\n  };\n};\nCategoryTreeComponent = __decorate([Component({\n  selector: 'app-category-tree',\n  standalone: true,\n  imports: [FormsModule, NgForOf, TuiCheckbox, TuiLabel, TuiMapperPipe, TuiTree],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], CategoryTreeComponent);\nexport { CategoryTreeComponent };","map":{"version":3,"names":["NgForOf","ChangeDetectorRef","Component","EventEmitter","Output","FormsModule","EMPTY_ARRAY","TuiMapperPipe","TuiLabel","TuiCheckbox","TuiTree","CategoryService","_","flatten","item","children","map","reduce","arr","oldVal","CategoryTreeComponent","categoryService","cdRef","selectedIds","ngOnInit","getAllCategories","subscribe","categoryArr","dict","categoryId","text","category","id","name","set","parent","parentId","isNil","push","data","markForCheck","constructor","Map","handler","getValue","result","flat","key","get","onChecked","node","value","forEach","entries","filter","x","emit","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\components\\category-tree\\category-tree.component.ts"],"sourcesContent":["import { NgForOf } from '@angular/common';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport type { TuiHandler } from '@taiga-ui/cdk';\r\nimport { EMPTY_ARRAY, TuiMapperPipe } from '@taiga-ui/cdk';\r\nimport { TuiLabel } from '@taiga-ui/core';\r\nimport { TuiCheckbox, TuiTree } from '@taiga-ui/kit';\r\nimport { CategoryService } from '../../services/category/category.service';\r\nimport _ from 'lodash';\r\n\r\ninterface TreeNode {\r\n  children?: TreeNode[];\r\n  readonly text: string;\r\n  readonly categoryId: number;\r\n}\r\n\r\nfunction flatten(item: TreeNode): readonly TreeNode[] {\r\n  return item.children\r\n    ? item.children\r\n        .map(flatten)\r\n        .reduce((arr, oldVal) => [...arr, ...oldVal], [item])\r\n    : [item];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-category-tree',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    NgForOf,\r\n    TuiCheckbox,\r\n    TuiLabel,\r\n    TuiMapperPipe,\r\n    TuiTree,\r\n  ],\r\n  templateUrl: './category-tree.component.html',\r\n  styleUrl: './category-tree.component.scss',\r\n})\r\nexport class CategoryTreeComponent implements OnInit {\r\n  @Output() selectedIds: EventEmitter<number[]> = new EventEmitter<number[]>();\r\n\r\n  ngOnInit(): void {\r\n    this.categoryService.getAllCategories().subscribe((categoryArr) => {\r\n      let dict: Record<number, TreeNode> = {};\r\n      dict[-1] = <TreeNode>{\r\n        categoryId: -1,\r\n        text: 'root',\r\n        children: [],\r\n      };\r\n\r\n      for (let category of categoryArr) {\r\n        dict[category.id] = <TreeNode>{\r\n          categoryId: category.id,\r\n          text: category.name,\r\n          children: [],\r\n        };\r\n        this.map.set(category.id, false);\r\n      }\r\n\r\n      for (let category of categoryArr) {\r\n        let parent = category.parentId ? dict[category.parentId] : dict[-1];\r\n        if (!_.isNil(parent.children)) {\r\n          parent.children.push(dict[category.id]);\r\n        } else {\r\n          parent.children = [dict[category.id]];\r\n        }\r\n      }\r\n\r\n      this.data = dict[-1];\r\n      this.cdRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  constructor(\r\n    private categoryService: CategoryService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  protected map = new Map<number, boolean>();\r\n\r\n  protected data: TreeNode = {\r\n    categoryId: -1,\r\n    text: 'root',\r\n    children: []\r\n  };\r\n\r\n  protected readonly handler: TuiHandler<TreeNode, readonly TreeNode[]> = (\r\n    item\r\n  ) => item.children || EMPTY_ARRAY;\r\n\r\n  protected readonly getValue = (\r\n    item: TreeNode,\r\n    map: Map<number, boolean>\r\n  ): boolean | null => {\r\n    let result: boolean | null = null;\r\n    const flat = flatten(item);\r\n    const key = flat[0]!;\r\n\r\n    if (key) {\r\n      result = !!map.get(key.categoryId);\r\n    }\r\n\r\n    for (const item of flat) {\r\n      if (result !== !!map.get(item.categoryId)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  protected onChecked(node: TreeNode, value: boolean): void {\r\n    flatten(node).forEach((item) => this.map.set(item.categoryId, value));\r\n\r\n    this.map = new Map(this.map.entries());\r\n\r\n    const selectedIds = [...this.map.entries()].filter(x => x[1]).map(x => x[0]);\r\n\r\n    this.selectedIds.emit(selectedIds);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}