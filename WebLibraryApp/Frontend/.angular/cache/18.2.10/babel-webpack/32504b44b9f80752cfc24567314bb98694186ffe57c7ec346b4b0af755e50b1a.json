{"ast":null,"code":"import { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';\nimport { parsePhoneNumber, getCountryCallingCode, validatePhoneNumberLength, AsYouType } from 'libphonenumber-js/core';\nimport { maskitoCaretGuard, maskitoPrefixPostprocessorGenerator } from '@maskito/kit';\nconst TEMPLATE_FILLER = 'x';\n\n/**\n * This preprocessor works only once at initialization phase (when `new Maskito(...)` is executed).\n * This preprocessor helps to avoid conflicts during transition from one mask to another (for the same input).\n */\nfunction cutInitCountryCodePreprocessor({\n  countryIsoCode,\n  metadata\n}) {\n  let isInitializationPhase = true;\n  return ({\n    elementState,\n    data\n  }) => {\n    if (!isInitializationPhase) {\n      return {\n        elementState,\n        data\n      };\n    }\n    const {\n      value,\n      selection\n    } = elementState;\n    isInitializationPhase = false;\n    try {\n      const phone = parsePhoneNumber(value, countryIsoCode, metadata);\n      const code = getCountryCallingCode(countryIsoCode, metadata);\n      const newValue = `+${code} ${phone.nationalNumber}`;\n      return {\n        elementState: {\n          value: newValue,\n          selection\n        }\n      };\n    } catch (_a) {\n      return {\n        elementState\n      };\n    }\n  };\n}\nfunction cutPhoneByValidLength({\n  phone,\n  metadata\n}) {\n  const validationResult = validatePhoneNumberLength(phone, metadata);\n  if (validationResult === 'TOO_LONG') {\n    return cutPhoneByValidLength({\n      phone: phone.slice(0, phone.length - 1),\n      metadata\n    });\n  }\n  return phone;\n}\nfunction generatePhoneMask({\n  value,\n  template,\n  prefix\n}) {\n  return [...prefix, ...(template ? template.slice(prefix.length).split('').map(сhar => сhar === TEMPLATE_FILLER || /\\d/.test(сhar) ? /\\d/ : сhar) : new Array(Math.max(value.length - prefix.length, prefix.length)).fill(/\\d/))];\n}\nfunction maskitoGetCountryFromNumber(number, metadata) {\n  const formatter = new AsYouType({}, metadata);\n  formatter.input(number);\n  return formatter.getCountry();\n}\nfunction getPhoneTemplate(formatter, value, separator) {\n  formatter.input(value.replaceAll(/[^\\d+]/g, ''));\n  const initialTemplate = formatter.getTemplate();\n  const split = initialTemplate.split(' ');\n  const template = split.length > 1 ? `${split.slice(0, 2).join(' ')} ${split.slice(2).join(separator)}` : initialTemplate;\n  formatter.reset();\n  return template.trim();\n}\nfunction selectTemplate({\n  currentTemplate,\n  newTemplate,\n  currentPhoneLength,\n  newPhoneLength\n}) {\n  return newTemplate.length < currentTemplate.length && newPhoneLength > currentPhoneLength ? currentTemplate : newTemplate;\n}\nconst MIN_LENGTH = 3;\nfunction phoneLengthPostprocessorGenerator(metadata) {\n  return ({\n    value,\n    selection\n  }) => ({\n    value: value.length > MIN_LENGTH ? cutPhoneByValidLength({\n      phone: value,\n      metadata\n    }) : value,\n    selection\n  });\n}\nfunction validatePhonePreprocessorGenerator({\n  prefix,\n  countryIsoCode,\n  metadata\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    var _a;\n    const {\n      selection,\n      value\n    } = elementState;\n    const [from] = selection;\n    const selectionIncludesPrefix = from < prefix.length;\n    const cleanCode = prefix.trim();\n    // handling autocomplete\n    if (value && !value.startsWith(cleanCode) && !data) {\n      const formatter = new AsYouType({\n        defaultCountry: countryIsoCode\n      }, metadata);\n      formatter.input(value);\n      const numberValue = (_a = formatter.getNumberValue()) !== null && _a !== void 0 ? _a : '';\n      formatter.reset();\n      return {\n        elementState: {\n          value: formatter.input(numberValue),\n          selection\n        }\n      };\n    }\n    try {\n      const validationError = validatePhoneNumberLength(data, {\n        defaultCountry: countryIsoCode\n      }, metadata);\n      if (!validationError) {\n        // handle paste-event with different code, for example for 8 / +7\n        const phone = countryIsoCode ? parsePhoneNumber(data, countryIsoCode, metadata) : parsePhoneNumber(data, metadata);\n        const {\n          nationalNumber,\n          countryCallingCode\n        } = phone;\n        return {\n          elementState: {\n            selection,\n            value: selectionIncludesPrefix ? '' : prefix\n          },\n          data: selectionIncludesPrefix ? `+${countryCallingCode} ${nationalNumber}` : nationalNumber\n        };\n      }\n    } catch (_b) {\n      return {\n        elementState\n      };\n    }\n    return {\n      elementState\n    };\n  };\n}\nfunction maskitoPhoneNonStrictOptionsGenerator({\n  defaultIsoCode,\n  metadata,\n  separator = '-'\n}) {\n  const formatter = new AsYouType(defaultIsoCode, metadata);\n  const prefix = '+';\n  let currentTemplate = '';\n  let currentPhoneLength = 0;\n  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {\n    mask: ({\n      value\n    }) => {\n      const newTemplate = getPhoneTemplate(formatter, value, separator);\n      const newPhoneLength = value.replaceAll(/\\D/g, '').length;\n      currentTemplate = selectTemplate({\n        currentTemplate,\n        newTemplate,\n        currentPhoneLength,\n        newPhoneLength\n      });\n      currentPhoneLength = newPhoneLength;\n      return currentTemplate.length === 1 ? ['+', /\\d/] : generatePhoneMask({\n        value,\n        template: currentTemplate,\n        prefix\n      });\n    },\n    postprocessors: [phoneLengthPostprocessorGenerator(metadata)],\n    preprocessors: [validatePhonePreprocessorGenerator({\n      prefix,\n      countryIsoCode: defaultIsoCode,\n      metadata\n    })]\n  });\n}\nfunction maskitoPhoneStrictOptionsGenerator({\n  countryIsoCode,\n  metadata,\n  separator = '-'\n}) {\n  const code = getCountryCallingCode(countryIsoCode, metadata);\n  const formatter = new AsYouType(countryIsoCode, metadata);\n  const prefix = `+${code} `;\n  let currentTemplate = '';\n  let currentPhoneLength = 0;\n  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {\n    mask: ({\n      value\n    }) => {\n      const newTemplate = getPhoneTemplate(formatter, value, separator);\n      const newPhoneLength = value.replaceAll(/\\D/g, '').length;\n      currentTemplate = selectTemplate({\n        currentTemplate,\n        newTemplate,\n        currentPhoneLength,\n        newPhoneLength\n      });\n      currentPhoneLength = newPhoneLength;\n      return generatePhoneMask({\n        value,\n        template: currentTemplate,\n        prefix\n      });\n    },\n    plugins: [maskitoCaretGuard((value, [from, to]) => [from === to ? prefix.length : 0, value.length])],\n    postprocessors: [maskitoPrefixPostprocessorGenerator(prefix), phoneLengthPostprocessorGenerator(metadata)],\n    preprocessors: [cutInitCountryCodePreprocessor({\n      countryIsoCode,\n      metadata\n    }), validatePhonePreprocessorGenerator({\n      prefix,\n      countryIsoCode,\n      metadata\n    })]\n  });\n}\nfunction maskitoPhoneOptionsGenerator({\n  countryIsoCode,\n  metadata,\n  strict = true,\n  separator = '-'\n}) {\n  return strict && countryIsoCode ? maskitoPhoneStrictOptionsGenerator({\n    countryIsoCode,\n    metadata,\n    separator\n  }) : maskitoPhoneNonStrictOptionsGenerator({\n    defaultIsoCode: countryIsoCode,\n    metadata,\n    separator\n  });\n}\nexport { maskitoGetCountryFromNumber, maskitoPhoneOptionsGenerator };","map":{"version":3,"names":["MASKITO_DEFAULT_OPTIONS","parsePhoneNumber","getCountryCallingCode","validatePhoneNumberLength","AsYouType","maskitoCaretGuard","maskitoPrefixPostprocessorGenerator","TEMPLATE_FILLER","cutInitCountryCodePreprocessor","countryIsoCode","metadata","isInitializationPhase","elementState","data","value","selection","phone","code","newValue","nationalNumber","_a","cutPhoneByValidLength","validationResult","slice","length","generatePhoneMask","template","prefix","split","map","сhar","test","Array","Math","max","fill","maskitoGetCountryFromNumber","number","formatter","input","getCountry","getPhoneTemplate","separator","replaceAll","initialTemplate","getTemplate","join","reset","trim","selectTemplate","currentTemplate","newTemplate","currentPhoneLength","newPhoneLength","MIN_LENGTH","phoneLengthPostprocessorGenerator","validatePhonePreprocessorGenerator","from","selectionIncludesPrefix","cleanCode","startsWith","defaultCountry","numberValue","getNumberValue","validationError","countryCallingCode","_b","maskitoPhoneNonStrictOptionsGenerator","defaultIsoCode","Object","assign","mask","postprocessors","preprocessors","maskitoPhoneStrictOptionsGenerator","plugins","to","maskitoPhoneOptionsGenerator","strict"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@maskito/phone/index.esm.js"],"sourcesContent":["import { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';\nimport { parsePhoneNumber, getCountryCallingCode, validatePhoneNumberLength, AsYouType } from 'libphonenumber-js/core';\nimport { maskitoCaretGuard, maskitoPrefixPostprocessorGenerator } from '@maskito/kit';\n\nconst TEMPLATE_FILLER = 'x';\n\n/**\n * This preprocessor works only once at initialization phase (when `new Maskito(...)` is executed).\n * This preprocessor helps to avoid conflicts during transition from one mask to another (for the same input).\n */\nfunction cutInitCountryCodePreprocessor({ countryIsoCode, metadata, }) {\n    let isInitializationPhase = true;\n    return ({ elementState, data }) => {\n        if (!isInitializationPhase) {\n            return { elementState, data };\n        }\n        const { value, selection } = elementState;\n        isInitializationPhase = false;\n        try {\n            const phone = parsePhoneNumber(value, countryIsoCode, metadata);\n            const code = getCountryCallingCode(countryIsoCode, metadata);\n            const newValue = `+${code} ${phone.nationalNumber}`;\n            return {\n                elementState: {\n                    value: newValue,\n                    selection,\n                },\n            };\n        }\n        catch (_a) {\n            return {\n                elementState,\n            };\n        }\n    };\n}\n\nfunction cutPhoneByValidLength({ phone, metadata, }) {\n    const validationResult = validatePhoneNumberLength(phone, metadata);\n    if (validationResult === 'TOO_LONG') {\n        return cutPhoneByValidLength({\n            phone: phone.slice(0, phone.length - 1),\n            metadata,\n        });\n    }\n    return phone;\n}\n\nfunction generatePhoneMask({ value, template, prefix, }) {\n    return [\n        ...prefix,\n        ...(template\n            ? template\n                .slice(prefix.length)\n                .split('')\n                .map((сhar) => сhar === TEMPLATE_FILLER || /\\d/.test(сhar) ? /\\d/ : сhar)\n            : new Array(Math.max(value.length - prefix.length, prefix.length)).fill(/\\d/)),\n    ];\n}\n\nfunction maskitoGetCountryFromNumber(number, metadata) {\n    const formatter = new AsYouType({}, metadata);\n    formatter.input(number);\n    return formatter.getCountry();\n}\n\nfunction getPhoneTemplate(formatter, value, separator) {\n    formatter.input(value.replaceAll(/[^\\d+]/g, ''));\n    const initialTemplate = formatter.getTemplate();\n    const split = initialTemplate.split(' ');\n    const template = split.length > 1\n        ? `${split.slice(0, 2).join(' ')} ${split.slice(2).join(separator)}`\n        : initialTemplate;\n    formatter.reset();\n    return template.trim();\n}\n\nfunction selectTemplate({ currentTemplate, newTemplate, currentPhoneLength, newPhoneLength, }) {\n    return newTemplate.length < currentTemplate.length &&\n        newPhoneLength > currentPhoneLength\n        ? currentTemplate\n        : newTemplate;\n}\n\nconst MIN_LENGTH = 3;\nfunction phoneLengthPostprocessorGenerator(metadata) {\n    return ({ value, selection }) => ({\n        value: value.length > MIN_LENGTH\n            ? cutPhoneByValidLength({ phone: value, metadata })\n            : value,\n        selection,\n    });\n}\n\nfunction validatePhonePreprocessorGenerator({ prefix, countryIsoCode, metadata, }) {\n    return ({ elementState, data }) => {\n        var _a;\n        const { selection, value } = elementState;\n        const [from] = selection;\n        const selectionIncludesPrefix = from < prefix.length;\n        const cleanCode = prefix.trim();\n        // handling autocomplete\n        if (value && !value.startsWith(cleanCode) && !data) {\n            const formatter = new AsYouType({ defaultCountry: countryIsoCode }, metadata);\n            formatter.input(value);\n            const numberValue = (_a = formatter.getNumberValue()) !== null && _a !== void 0 ? _a : '';\n            formatter.reset();\n            return { elementState: { value: formatter.input(numberValue), selection } };\n        }\n        try {\n            const validationError = validatePhoneNumberLength(data, { defaultCountry: countryIsoCode }, metadata);\n            if (!validationError) {\n                // handle paste-event with different code, for example for 8 / +7\n                const phone = countryIsoCode\n                    ? parsePhoneNumber(data, countryIsoCode, metadata)\n                    : parsePhoneNumber(data, metadata);\n                const { nationalNumber, countryCallingCode } = phone;\n                return {\n                    elementState: {\n                        selection,\n                        value: selectionIncludesPrefix ? '' : prefix,\n                    },\n                    data: selectionIncludesPrefix\n                        ? `+${countryCallingCode} ${nationalNumber}`\n                        : nationalNumber,\n                };\n            }\n        }\n        catch (_b) {\n            return { elementState };\n        }\n        return { elementState };\n    };\n}\n\nfunction maskitoPhoneNonStrictOptionsGenerator({ defaultIsoCode, metadata, separator = '-', }) {\n    const formatter = new AsYouType(defaultIsoCode, metadata);\n    const prefix = '+';\n    let currentTemplate = '';\n    let currentPhoneLength = 0;\n    return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), { mask: ({ value }) => {\n            const newTemplate = getPhoneTemplate(formatter, value, separator);\n            const newPhoneLength = value.replaceAll(/\\D/g, '').length;\n            currentTemplate = selectTemplate({\n                currentTemplate,\n                newTemplate,\n                currentPhoneLength,\n                newPhoneLength,\n            });\n            currentPhoneLength = newPhoneLength;\n            return currentTemplate.length === 1\n                ? ['+', /\\d/]\n                : generatePhoneMask({ value, template: currentTemplate, prefix });\n        }, postprocessors: [phoneLengthPostprocessorGenerator(metadata)], preprocessors: [\n            validatePhonePreprocessorGenerator({\n                prefix,\n                countryIsoCode: defaultIsoCode,\n                metadata,\n            }),\n        ] });\n}\n\nfunction maskitoPhoneStrictOptionsGenerator({ countryIsoCode, metadata, separator = '-', }) {\n    const code = getCountryCallingCode(countryIsoCode, metadata);\n    const formatter = new AsYouType(countryIsoCode, metadata);\n    const prefix = `+${code} `;\n    let currentTemplate = '';\n    let currentPhoneLength = 0;\n    return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), { mask: ({ value }) => {\n            const newTemplate = getPhoneTemplate(formatter, value, separator);\n            const newPhoneLength = value.replaceAll(/\\D/g, '').length;\n            currentTemplate = selectTemplate({\n                currentTemplate,\n                newTemplate,\n                currentPhoneLength,\n                newPhoneLength,\n            });\n            currentPhoneLength = newPhoneLength;\n            return generatePhoneMask({ value, template: currentTemplate, prefix });\n        }, plugins: [\n            maskitoCaretGuard((value, [from, to]) => [\n                from === to ? prefix.length : 0,\n                value.length,\n            ]),\n        ], postprocessors: [\n            maskitoPrefixPostprocessorGenerator(prefix),\n            phoneLengthPostprocessorGenerator(metadata),\n        ], preprocessors: [\n            cutInitCountryCodePreprocessor({ countryIsoCode, metadata }),\n            validatePhonePreprocessorGenerator({ prefix, countryIsoCode, metadata }),\n        ] });\n}\n\nfunction maskitoPhoneOptionsGenerator({ countryIsoCode, metadata, strict = true, separator = '-', }) {\n    return strict && countryIsoCode\n        ? maskitoPhoneStrictOptionsGenerator({ countryIsoCode, metadata, separator })\n        : maskitoPhoneNonStrictOptionsGenerator({\n            defaultIsoCode: countryIsoCode,\n            metadata,\n            separator,\n        });\n}\n\nexport { maskitoGetCountryFromNumber, maskitoPhoneOptionsGenerator };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}