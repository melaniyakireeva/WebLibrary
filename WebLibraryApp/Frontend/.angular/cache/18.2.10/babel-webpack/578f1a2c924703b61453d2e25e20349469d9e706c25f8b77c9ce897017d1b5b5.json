{"ast":null,"code":"/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nfunction tuiClamp(value, min, max) {\n  ngDevMode && console.assert(!Number.isNaN(value));\n  ngDevMode && console.assert(!Number.isNaN(min));\n  ngDevMode && console.assert(!Number.isNaN(max));\n  ngDevMode && console.assert(max >= min);\n  return Math.min(max, Math.max(min, value));\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nfunction tuiInRange(value, fromInclude, toExclude) {\n  ngDevMode && console.assert(!Number.isNaN(value));\n  ngDevMode && console.assert(!Number.isNaN(fromInclude));\n  ngDevMode && console.assert(!Number.isNaN(toExclude));\n  ngDevMode && console.assert(fromInclude < toExclude);\n  return value >= fromInclude && value < toExclude;\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Normalizes any number to an integer within inclusive range\n *\n * @param value\n * @param min lower inclusive integer\n * @param max upper inclusive integer\n * @return an integer between min and max inclusive\n */\nfunction tuiNormalizeToIntNumber(value, min, max) {\n  ngDevMode && console.assert(Number.isInteger(min));\n  ngDevMode && console.assert(Number.isInteger(max));\n  ngDevMode && console.assert(min <= max);\n  if (Number.isNaN(value) || value <= min) {\n    return min;\n  }\n  if (value >= max) {\n    return max;\n  }\n  return Math.round(value);\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Rounds a number to the closest value in a fixed discrete series\n *\n * @param value\n * @param quantum series step\n */\nfunction tuiQuantize(value, quantum) {\n  ngDevMode && console.assert(Number.isFinite(value));\n  ngDevMode && console.assert(Number.isFinite(quantum));\n  ngDevMode && console.assert(quantum > 0);\n  const remainder = value % quantum;\n  return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nconst MAX_PRECISION = 292;\n/**\n * Rounding number to the set precision\n *\n * @param value\n * @param precision number of digits in a float part\n * @param func rounding function (round, floor, ceil)\n */\nfunction calculate(value, precision, func) {\n  if (value === Infinity) {\n    return value;\n  }\n  ngDevMode && console.assert(!Number.isNaN(value), 'Value must be number');\n  ngDevMode && console.assert(Number.isInteger(precision), 'Precision must be integer');\n  precision = Math.min(precision, MAX_PRECISION);\n  const pair = `${value}e`.split('e');\n  const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n  const processedPair = `${tempValue}e`.split('e');\n  return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);\n}\nfunction tuiRound(value, precision = 0) {\n  return calculate(value, precision, Math.round);\n}\nfunction tuiCeil(value, precision = 0) {\n  return calculate(value, precision, Math.ceil);\n}\nfunction tuiFloor(value, precision = 0) {\n  return calculate(value, precision, Math.floor);\n}\nfunction tuiTrunc(value, precision = 0) {\n  return calculate(value, precision, Math.trunc);\n}\nfunction tuiRoundWith({\n  value,\n  precision,\n  method\n}) {\n  switch (method) {\n    case 'ceil':\n      return tuiCeil(value, precision);\n    case 'floor':\n      return tuiFloor(value, precision);\n    case 'round':\n      return tuiRound(value, precision);\n    default:\n      return tuiTrunc(value, precision);\n  }\n}\n\n/**\n * Calculates sum of any number of passed arguments\n */\nfunction tuiSum(...args) {\n  return args.reduce((a, b) => a + b, 0);\n}\nfunction tuiToInt(bool) {\n  return bool ? 1 : 0;\n}\nfunction tuiToInteger(value) {\n  return parseInt(value, 10);\n}\n\n/**\n * Converts angle in degrees to radians\n */\nfunction tuiToRadians(deg) {\n  return deg * Math.PI / 180;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCeil, tuiClamp, tuiFloor, tuiInRange, tuiNormalizeToIntNumber, tuiQuantize, tuiRound, tuiRoundWith, tuiSum, tuiToInt, tuiToInteger, tuiToRadians, tuiTrunc };","map":{"version":3,"names":["tuiClamp","value","min","max","ngDevMode","console","assert","Number","isNaN","Math","tuiInRange","fromInclude","toExclude","tuiNormalizeToIntNumber","isInteger","round","tuiQuantize","quantum","isFinite","remainder","MAX_PRECISION","calculate","precision","func","Infinity","pair","split","tempValue","processedPair","tuiRound","tuiCeil","ceil","tuiFloor","floor","tuiTrunc","trunc","tuiRoundWith","method","tuiSum","args","reduce","a","b","tuiToInt","bool","tuiToInteger","parseInt","tuiToRadians","deg","PI"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-utils-math.mjs"],"sourcesContent":["/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nfunction tuiClamp(value, min, max) {\n    ngDevMode && console.assert(!Number.isNaN(value));\n    ngDevMode && console.assert(!Number.isNaN(min));\n    ngDevMode && console.assert(!Number.isNaN(max));\n    ngDevMode && console.assert(max >= min);\n    return Math.min(max, Math.max(min, value));\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nfunction tuiInRange(value, fromInclude, toExclude) {\n    ngDevMode && console.assert(!Number.isNaN(value));\n    ngDevMode && console.assert(!Number.isNaN(fromInclude));\n    ngDevMode && console.assert(!Number.isNaN(toExclude));\n    ngDevMode && console.assert(fromInclude < toExclude);\n    return value >= fromInclude && value < toExclude;\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Normalizes any number to an integer within inclusive range\n *\n * @param value\n * @param min lower inclusive integer\n * @param max upper inclusive integer\n * @return an integer between min and max inclusive\n */\nfunction tuiNormalizeToIntNumber(value, min, max) {\n    ngDevMode && console.assert(Number.isInteger(min));\n    ngDevMode && console.assert(Number.isInteger(max));\n    ngDevMode && console.assert(min <= max);\n    if (Number.isNaN(value) || value <= min) {\n        return min;\n    }\n    if (value >= max) {\n        return max;\n    }\n    return Math.round(value);\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Rounds a number to the closest value in a fixed discrete series\n *\n * @param value\n * @param quantum series step\n */\nfunction tuiQuantize(value, quantum) {\n    ngDevMode && console.assert(Number.isFinite(value));\n    ngDevMode && console.assert(Number.isFinite(quantum));\n    ngDevMode && console.assert(quantum > 0);\n    const remainder = value % quantum;\n    return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nconst MAX_PRECISION = 292;\n/**\n * Rounding number to the set precision\n *\n * @param value\n * @param precision number of digits in a float part\n * @param func rounding function (round, floor, ceil)\n */\nfunction calculate(value, precision, func) {\n    if (value === Infinity) {\n        return value;\n    }\n    ngDevMode && console.assert(!Number.isNaN(value), 'Value must be number');\n    ngDevMode && console.assert(Number.isInteger(precision), 'Precision must be integer');\n    precision = Math.min(precision, MAX_PRECISION);\n    const pair = `${value}e`.split('e');\n    const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n    const processedPair = `${tempValue}e`.split('e');\n    return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);\n}\nfunction tuiRound(value, precision = 0) {\n    return calculate(value, precision, Math.round);\n}\nfunction tuiCeil(value, precision = 0) {\n    return calculate(value, precision, Math.ceil);\n}\nfunction tuiFloor(value, precision = 0) {\n    return calculate(value, precision, Math.floor);\n}\nfunction tuiTrunc(value, precision = 0) {\n    return calculate(value, precision, Math.trunc);\n}\n\nfunction tuiRoundWith({ value, precision, method, }) {\n    switch (method) {\n        case 'ceil':\n            return tuiCeil(value, precision);\n        case 'floor':\n            return tuiFloor(value, precision);\n        case 'round':\n            return tuiRound(value, precision);\n        default:\n            return tuiTrunc(value, precision);\n    }\n}\n\n/**\n * Calculates sum of any number of passed arguments\n */\nfunction tuiSum(...args) {\n    return args.reduce((a, b) => a + b, 0);\n}\n\nfunction tuiToInt(bool) {\n    return bool ? 1 : 0;\n}\n\nfunction tuiToInteger(value) {\n    return parseInt(value, 10);\n}\n\n/**\n * Converts angle in degrees to radians\n */\nfunction tuiToRadians(deg) {\n    return (deg * Math.PI) / 180;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCeil, tuiClamp, tuiFloor, tuiInRange, tuiNormalizeToIntNumber, tuiQuantize, tuiRound, tuiRoundWith, tuiSum, tuiToInt, tuiToInteger, tuiToRadians, tuiTrunc };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}