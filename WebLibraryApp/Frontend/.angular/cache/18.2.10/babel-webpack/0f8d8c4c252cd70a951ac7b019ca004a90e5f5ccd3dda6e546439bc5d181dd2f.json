{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpCustomService } from '../http/http-service.service';\nimport { map } from 'rxjs';\nlet BookService = class BookService {\n  httpService;\n  controller = 'Book';\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  getBook() {\n    const method = 'GetAllBooks';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.getRequest(api).pipe(map(x => {\n      return x.map(val => ({\n        id: val.id,\n        name: val.name,\n        surname: val.surname,\n        patronym: val.patronym\n      }));\n    }));\n  }\n  deleteBook(bookId) {\n    const method = 'DeleteBook';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      bookId: bookId\n    });\n  }\n  saveBook(book) {\n    const method = 'SaveBook';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      book: book\n    });\n  }\n  getBooks(filter) {\n    const method = 'GetBooksByFilter';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      filter\n    }).pipe(map(x => {\n      let res = x;\n      return {\n        totalCount: res.totalCount,\n        items: res.items\n      };\n    }));\n  }\n  static ctorParameters = () => [{\n    type: HttpCustomService\n  }];\n};\nBookService = __decorate([Injectable({\n  providedIn: 'root'\n})], BookService);\nexport { BookService };","map":{"version":3,"names":["Injectable","HttpCustomService","map","BookService","httpService","controller","constructor","getBook","method","api","getRequest","pipe","x","val","id","name","surname","patronym","deleteBook","bookId","postRequest","saveBook","book","getBooks","filter","res","totalCount","items","__decorate","providedIn"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\book\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpCustomService } from '../http/http-service.service';\r\nimport { map, Observable } from 'rxjs';\r\nimport { Genre } from '../parameters/ekb-parameters.service';\r\nimport { Author } from '../author/author-service.service';\r\nimport { BaseFilter } from '../filters/filters';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BookService {\r\n  private controller: string = 'Book';\r\n  constructor(private httpService: HttpCustomService) {}\r\n\r\n  public getBook(): Observable<any> {\r\n    const method = 'GetAllBooks';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.getRequest(api).pipe(\r\n      map((x) => {\r\n        return (x as any[]).map(\r\n          (val) =>\r\n            <Author>{\r\n              id: val.id,\r\n              name: val.name,\r\n              surname: val.surname,\r\n              patronym: val.patronym,\r\n            }\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  public deleteBook(bookId: number) {\r\n    const method = 'DeleteBook';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, {\r\n      bookId: bookId,\r\n    });\r\n  }\r\n\r\n  public saveBook(book: BookDto): Observable<any> {\r\n    const method = 'SaveBook';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { book: book });\r\n  }\r\n\r\n  public getBooks(filter: BaseFilter): Observable<GetBooksResponse> {\r\n    const method = 'GetBooksByFilter';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { filter }).pipe(\r\n      map((x) => {\r\n        let res = x as GetBooksResponse;\r\n        return {\r\n          totalCount: res.totalCount,\r\n          items: res.items\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport interface BookDto {\r\n  id: number;\r\n  name: string;\r\n  description: string | null;\r\n  cipher: string;\r\n  isbn: string;\r\n  price: number | null;\r\n  authorValId: number;\r\n  authorVal: Author;\r\n  genreValId: number;\r\n  genreVal: Genre;\r\n  publishYear: number | null;\r\n  receiptDate: string | null;\r\n  fileId: number | null;\r\n}\r\n\r\nexport interface GetBooksRequest {\r\n  filter: BaseFilter | null;\r\n}\r\n\r\nexport interface SaveBooksRequest {\r\n  book: BookDto;\r\n}\r\n\r\nexport interface DeleteBookRequest {\r\n  bookId: number;\r\n}\r\n\r\nexport interface GetBooksResponse {\r\n  items: BookDto[];\r\n  totalCount: number;\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,GAAG,QAAoB,MAAM;AAQ/B,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAEFC,WAAA;EADZC,UAAU,GAAW,MAAM;EACnCC,YAAoBF,WAA8B;IAA9B,KAAAA,WAAW,GAAXA,WAAW;EAAsB;EAE9CG,OAAOA,CAAA;IACZ,MAAMC,MAAM,GAAG,aAAa;IAC5B,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACJ,UAAU,IAAIG,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACJ,WAAW,CAACM,UAAU,CAACD,GAAG,CAAC,CAACE,IAAI,CAC1CT,GAAG,CAAEU,CAAC,IAAI;MACR,OAAQA,CAAW,CAACV,GAAG,CACpBW,GAAG,KACM;QACNC,EAAE,EAAED,GAAG,CAACC,EAAE;QACVC,IAAI,EAAEF,GAAG,CAACE,IAAI;QACdC,OAAO,EAAEH,GAAG,CAACG,OAAO;QACpBC,QAAQ,EAAEJ,GAAG,CAACI;OACf,EACJ;IACH,CAAC,CAAC,CACH;EACH;EAEOC,UAAUA,CAACC,MAAc;IAC9B,MAAMX,MAAM,GAAG,YAAY;IAC3B,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACJ,UAAU,IAAIG,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACJ,WAAW,CAACgB,WAAW,CAACX,GAAG,EAAE;MACvCU,MAAM,EAAEA;KACT,CAAC;EACJ;EAEOE,QAAQA,CAACC,IAAa;IAC3B,MAAMd,MAAM,GAAG,UAAU;IACzB,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACJ,UAAU,IAAIG,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACJ,WAAW,CAACgB,WAAW,CAACX,GAAG,EAAE;MAAEa,IAAI,EAAEA;IAAI,CAAE,CAAC;EAC1D;EAEOC,QAAQA,CAACC,MAAkB;IAChC,MAAMhB,MAAM,GAAG,kBAAkB;IACjC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACJ,UAAU,IAAIG,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACJ,WAAW,CAACgB,WAAW,CAACX,GAAG,EAAE;MAAEe;IAAM,CAAE,CAAC,CAACb,IAAI,CACvDT,GAAG,CAAEU,CAAC,IAAI;MACR,IAAIa,GAAG,GAAGb,CAAqB;MAC/B,OAAO;QACLc,UAAU,EAAED,GAAG,CAACC,UAAU;QAC1BC,KAAK,EAAEF,GAAG,CAACE;OACZ;IACH,CAAC,CAAC,CACH;EACH;;;;;AAhDWxB,WAAW,GAAAyB,UAAA,EAHvB5B,UAAU,CAAC;EACV6B,UAAU,EAAE;CACb,CAAC,C,EACW1B,WAAW,CAiDvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}