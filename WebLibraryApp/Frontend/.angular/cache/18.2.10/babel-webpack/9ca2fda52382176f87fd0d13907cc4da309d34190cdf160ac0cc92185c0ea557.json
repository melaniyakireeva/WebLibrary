{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CONFIG } from '../../config';\nimport { AuthService } from '../auth/auth-service.service';\nimport _ from 'lodash';\nlet HttpCustomService = class HttpCustomService {\n  httpClient;\n  authService;\n  baseService = CONFIG.server;\n  defaultOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.authService = new AuthService(this);\n  }\n  getRequest(api) {\n    const apiController = `${this.baseService}/${api}`;\n    const jwtToken = this.authService.getJwtToken();\n    let initOptions = this.defaultOptions;\n    let resHeaders = initOptions?.headers ?? new HttpHeaders();\n    if (!_.isNil(jwtToken)) {\n      resHeaders = resHeaders.set('Authorization', `Bearer ${jwtToken}`);\n    }\n    const resOptions = {\n      headers: resHeaders\n    };\n    _.defaults(resOptions, this.defaultOptions);\n    return this.httpClient.get(apiController, resOptions);\n  }\n  postRequest(api, body, stringifyResult = true, customOptions) {\n    const apiController = `${this.baseService}/${api}`;\n    const jwtToken = this.authService.getJwtToken();\n    let initOptions = customOptions ?? this.defaultOptions;\n    let resHeaders = initOptions?.headers ?? new HttpHeaders();\n    if (!_.isNil(jwtToken)) {\n      resHeaders = resHeaders.set('Authorization', `Bearer ${jwtToken}`);\n    }\n    const resOptions = {\n      headers: resHeaders\n    };\n    _.defaults(resOptions, customOptions ?? this.defaultOptions);\n    return this.httpClient.post(apiController, stringifyResult ? JSON.stringify(body) : body, resOptions);\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nHttpCustomService = __decorate([Injectable({\n  providedIn: 'root'\n})], HttpCustomService);\nexport { HttpCustomService };","map":{"version":3,"names":["HttpClient","HttpHeaders","Injectable","CONFIG","AuthService","_","HttpCustomService","httpClient","authService","baseService","server","defaultOptions","headers","constructor","getRequest","api","apiController","jwtToken","getJwtToken","initOptions","resHeaders","isNil","set","resOptions","defaults","get","postRequest","body","stringifyResult","customOptions","post","JSON","stringify","__decorate","providedIn"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\http\\http-service.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CONFIG } from '../../config';\r\nimport { AuthService } from '../auth/auth-service.service';\r\nimport _ from 'lodash';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpCustomService {\r\n  private authService!: AuthService;\r\n\r\n  private baseService: string = CONFIG.server;\r\n  private readonly defaultOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    this.authService = new AuthService(this);\r\n  }\r\n\r\n  public getRequest(api: string): Observable<any> {\r\n    const apiController: string = `${this.baseService}/${api}`;\r\n    const jwtToken = this.authService.getJwtToken();\r\n    let initOptions = this.defaultOptions;\r\n    let resHeaders = initOptions?.headers ?? new HttpHeaders();\r\n    if (!_.isNil(jwtToken)) {\r\n      resHeaders = resHeaders.set('Authorization', `Bearer ${jwtToken}`);\r\n    }\r\n\r\n    const resOptions: any = { headers: resHeaders };\r\n    _.defaults(resOptions, this.defaultOptions);\r\n\r\n    return this.httpClient.get(apiController, resOptions);\r\n  }\r\n\r\n  public postRequest(\r\n    api: string,\r\n    body: any,\r\n    stringifyResult: boolean = true,\r\n    customOptions?: any\r\n  ): Observable<any> {\r\n    const apiController: string = `${this.baseService}/${api}`;\r\n    const jwtToken = this.authService.getJwtToken();\r\n    let initOptions = customOptions ?? this.defaultOptions;\r\n    let resHeaders = initOptions?.headers ?? new HttpHeaders();\r\n    if (!_.isNil(jwtToken)){\r\n      resHeaders = resHeaders.set('Authorization', `Bearer ${jwtToken}`);\r\n    }\r\n\r\n    const resOptions: any = {headers: resHeaders};\r\n    _.defaults(resOptions, customOptions ?? this.defaultOptions);\r\n\r\n    return this.httpClient.post(\r\n      apiController,\r\n      stringifyResult ? JSON.stringify(body) : body,\r\n      resOptions\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAQ,eAAe;AAE1C,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,OAAOC,CAAC,MAAM,QAAQ;AAKf,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAURC,UAAA;EATZC,WAAW;EAEXC,WAAW,GAAWN,MAAM,CAACO,MAAM;EAC1BC,cAAc,GAAG;IAChCC,OAAO,EAAE,IAAIX,WAAW,CAAC;MACvB,cAAc,EAAE;KACjB;GACF;EAEDY,YAAoBN,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAC5B,IAAI,CAACC,WAAW,GAAG,IAAIJ,WAAW,CAAC,IAAI,CAAC;EAC1C;EAEOU,UAAUA,CAACC,GAAW;IAC3B,MAAMC,aAAa,GAAW,GAAG,IAAI,CAACP,WAAW,IAAIM,GAAG,EAAE;IAC1D,MAAME,QAAQ,GAAG,IAAI,CAACT,WAAW,CAACU,WAAW,EAAE;IAC/C,IAAIC,WAAW,GAAG,IAAI,CAACR,cAAc;IACrC,IAAIS,UAAU,GAAGD,WAAW,EAAEP,OAAO,IAAI,IAAIX,WAAW,EAAE;IAC1D,IAAI,CAACI,CAAC,CAACgB,KAAK,CAACJ,QAAQ,CAAC,EAAE;MACtBG,UAAU,GAAGA,UAAU,CAACE,GAAG,CAAC,eAAe,EAAE,UAAUL,QAAQ,EAAE,CAAC;IACpE;IAEA,MAAMM,UAAU,GAAQ;MAAEX,OAAO,EAAEQ;IAAU,CAAE;IAC/Cf,CAAC,CAACmB,QAAQ,CAACD,UAAU,EAAE,IAAI,CAACZ,cAAc,CAAC;IAE3C,OAAO,IAAI,CAACJ,UAAU,CAACkB,GAAG,CAACT,aAAa,EAAEO,UAAU,CAAC;EACvD;EAEOG,WAAWA,CAChBX,GAAW,EACXY,IAAS,EACTC,eAAA,GAA2B,IAAI,EAC/BC,aAAmB;IAEnB,MAAMb,aAAa,GAAW,GAAG,IAAI,CAACP,WAAW,IAAIM,GAAG,EAAE;IAC1D,MAAME,QAAQ,GAAG,IAAI,CAACT,WAAW,CAACU,WAAW,EAAE;IAC/C,IAAIC,WAAW,GAAGU,aAAa,IAAI,IAAI,CAAClB,cAAc;IACtD,IAAIS,UAAU,GAAGD,WAAW,EAAEP,OAAO,IAAI,IAAIX,WAAW,EAAE;IAC1D,IAAI,CAACI,CAAC,CAACgB,KAAK,CAACJ,QAAQ,CAAC,EAAC;MACrBG,UAAU,GAAGA,UAAU,CAACE,GAAG,CAAC,eAAe,EAAE,UAAUL,QAAQ,EAAE,CAAC;IACpE;IAEA,MAAMM,UAAU,GAAQ;MAACX,OAAO,EAAEQ;IAAU,CAAC;IAC7Cf,CAAC,CAACmB,QAAQ,CAACD,UAAU,EAAEM,aAAa,IAAI,IAAI,CAAClB,cAAc,CAAC;IAE5D,OAAO,IAAI,CAACJ,UAAU,CAACuB,IAAI,CACzBd,aAAa,EACbY,eAAe,GAAGG,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,GAAGA,IAAI,EAC7CJ,UAAU,CACX;EACH;;;;;AAnDWjB,iBAAiB,GAAA2B,UAAA,EAH7B/B,UAAU,CAAC;EACVgC,UAAU,EAAE;CACb,CAAC,C,EACW5B,iBAAiB,CAoD7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}