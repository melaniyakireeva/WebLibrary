{"ast":null,"code":"import * as i3 from '@angular/common';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, signal, computed, ElementRef, TemplateRef, Component, ChangeDetectionStrategy, ViewChild, ViewChildren, Input, Output, forwardRef } from '@angular/core';\nimport { toSignal, toObservable } from '@angular/core/rxjs-interop';\nimport * as i4 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MaskitoDirective } from '@maskito/angular';\nimport { maskitoTransform, maskitoInitialCalibrationPlugin } from '@maskito/core';\nimport { maskitoRemoveOnBlurPlugin } from '@maskito/kit';\nimport { maskitoGetCountryFromNumber, maskitoPhoneOptionsGenerator } from '@maskito/phone';\nimport { TuiControl, tuiAsControl } from '@taiga-ui/cdk/classes';\nimport { TUI_DEFAULT_MATCHER, CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { TuiAutoFocus } from '@taiga-ui/cdk/directives/auto-focus';\nimport { tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';\nimport { tuiIsInputEvent } from '@taiga-ui/cdk/utils/dom';\nimport { tuiCreateToken, tuiProvideOptions, tuiDirectiveBinding } from '@taiga-ui/cdk/utils/miscellaneous';\nimport * as i5 from '@taiga-ui/core/components/data-list';\nimport { TuiOption, TuiDataList } from '@taiga-ui/core/components/data-list';\nimport * as i7 from '@taiga-ui/core/components/textfield';\nimport { TUI_TEXTFIELD_OPTIONS, tuiTextfieldOptionsProvider, TuiTextfieldDropdownDirective, TuiTextfield } from '@taiga-ui/core/components/textfield';\nimport * as i2 from '@taiga-ui/core/directives/dropdown';\nimport { tuiDropdown, tuiDropdownOpen, TuiDropdownOpen, tuiDropdownOptionsProvider, TuiDropdownDirective, TuiWithDropdownOpen } from '@taiga-ui/core/directives/dropdown';\nimport * as i1 from '@taiga-ui/core/directives/group';\nimport { TuiGroup } from '@taiga-ui/core/directives/group';\nimport { TuiFlagPipe } from '@taiga-ui/core/pipes/flag';\nimport { TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';\nimport { TuiChevron } from '@taiga-ui/kit/directives';\nimport { TUI_COUNTRIES, TUI_INTERNATIONAL_SEARCH } from '@taiga-ui/kit/tokens';\nimport { tuiGetCallingCode } from '@taiga-ui/kit/utils';\nimport { validatePhoneNumberLength } from 'libphonenumber-js';\nimport { getCountryCallingCode } from 'libphonenumber-js/core';\nimport { of, from, skip } from 'rxjs';\nimport * as i6 from '@taiga-ui/core/components/label';\nconst _c0 = [[[\"tui-icon\"], [\"img\"]], \"*\"];\nconst _c1 = [\"tui-icon, img\", \"*\"];\nconst _c2 = () => ({\n  standalone: true\n});\nfunction TuiInputPhoneInternational_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 6);\n    i0.ɵɵpipe(1, \"tuiFlag\");\n  }\n  if (rf & 2) {\n    let tmp_2_0;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"alt\", (tmp_2_0 = ctx_r1.names()) == null ? null : tmp_2_0[ctx_r1.countryIsoCode()])(\"src\", i0.ɵɵpipeBind1(1, 2, ctx_r1.countryIsoCode()), i0.ɵɵsanitizeUrl);\n  }\n}\nfunction TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-textfield\", 9)(1, \"label\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 10);\n    i0.ɵɵlistener(\"keydown.arrowDown\", function TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template_input_keydown_arrowDown_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.focusFirstItem());\n    })(\"ngModelChange\", function TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.search.set($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"iconStart\", ctx_r1.icons.search);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 3, ctx_r1.internationalSearchLabel$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.search());\n  }\n}\nfunction TuiInputPhoneInternational_ng_container_9_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function TuiInputPhoneInternational_ng_container_9_button_3_Template_button_click_0_listener() {\n      const item_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onItemClick(item_r5.iso));\n    });\n    i0.ɵɵelement(1, \"img\", 12);\n    i0.ɵɵpipe(2, \"tuiFlag\");\n    i0.ɵɵelementStart(3, \"span\", 13);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 14);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", i0.ɵɵpipeBind1(2, 3, item_r5.iso), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r5.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r5.code);\n  }\n}\nfunction TuiInputPhoneInternational_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template, 5, 5, \"tui-textfield\", 7);\n    i0.ɵɵelementStart(2, \"tui-data-list\");\n    i0.ɵɵtemplate(3, TuiInputPhoneInternational_ng_container_9_button_3_Template, 7, 5, \"button\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.countrySearch);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.filtered());\n  }\n}\nconst TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {\n  countries: [],\n  countryIsoCode: 'RU',\n  metadata: of({\n    countries: {},\n    country_calling_codes: {}\n  })\n};\n/**\n * Default parameters for input phone international component\n */\nconst TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\nfunction tuiInputPhoneInternationalOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, options, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\n}\nconst NOT_FORM_CONTROL_SYMBOLS = /[^+\\d]/g;\nclass TuiInputPhoneInternational extends TuiControl {\n  constructor() {\n    super(...arguments);\n    this.dropdown = tuiDropdown(null);\n    this.options = inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS);\n    this.size = inject(TUI_TEXTFIELD_OPTIONS).size;\n    this.open = tuiDropdownOpen();\n    this.names = toSignal(inject(TUI_COUNTRIES));\n    this.metadata = toSignal(from(this.options.metadata));\n    this.countries = signal(this.options.countries);\n    this.countryIsoCode = signal(this.options.countryIsoCode);\n    this.icons = inject(TUI_COMMON_ICONS);\n    this.internationalSearchLabel$ = inject(TUI_INTERNATIONAL_SEARCH);\n    this.search = signal('');\n    this.filtered = computed(() => this.countries().map(iso => ({\n      iso,\n      name: this.names()?.[iso] || '',\n      code: tuiGetCallingCode(iso, this.metadata())\n    })).filter(({\n      name,\n      code\n    }) => TUI_DEFAULT_MATCHER(name + code, this.search())));\n    this.mask = computed(() => this.computeMask(this.countryIsoCode(), this.metadata()));\n    this.$ = tuiDirectiveBinding(TuiDropdownOpen, 'tuiDropdownEnabled', this.interactive);\n    this.textfieldValue = '';\n    this.countrySearch = false;\n    this.countryIsoCodeChange = toObservable(this.countryIsoCode).pipe(skip(1));\n  }\n  set countriesValue(value) {\n    this.countries.set(value);\n  }\n  set isoCode(code) {\n    this.countryIsoCode.set(code);\n  }\n  focusFirstItem() {\n    this.listOptions?.get(0)?.nativeElement.focus();\n  }\n  onPaste(event) {\n    const phonesMetadata = this.metadata();\n    if (!tuiIsInputEvent(event) || !phonesMetadata || !event.inputType.includes('Drop') && !event.inputType.includes('Paste')) {\n      return;\n    }\n    const newValue = event.data || '';\n    const prefixedValue = newValue.startsWith(CHAR_PLUS) ? newValue : CHAR_PLUS + newValue;\n    if (validatePhoneNumberLength(prefixedValue) === 'TOO_SHORT') {\n      return;\n    }\n    const countryIsoCode = maskitoGetCountryFromNumber(prefixedValue, phonesMetadata);\n    if (countryIsoCode) {\n      this.countryIsoCode.set(countryIsoCode);\n    }\n  }\n  onItemClick(isoCode) {\n    this.open.set(false);\n    this.countryIsoCode.set(isoCode);\n    this.input?.nativeElement.focus();\n  }\n  writeValue(unmaskedValue) {\n    super.writeValue(unmaskedValue);\n    const maskOptions = this.mask();\n    this.textfieldValue = maskOptions ? maskitoTransform(unmaskedValue, maskOptions) : unmaskedValue; // it will be calibrated later when mask is ready (by maskitoInitialCalibrationPlugin)\n    this.cdr.detectChanges();\n  }\n  set template(template) {\n    this.dropdown.set(template);\n  }\n  onFocus() {\n    const phoneMetadata = this.metadata();\n    if (!this.textfieldValue && phoneMetadata) {\n      this.textfieldValue = `${CHAR_PLUS + getCountryCallingCode(this.countryIsoCode(), phoneMetadata)} `;\n    }\n  }\n  onValueChange(maskedValue) {\n    const unmaskedValue = maskedValue.replaceAll(NOT_FORM_CONTROL_SYMBOLS, '');\n    const phonesMetadata = this.metadata();\n    const countryCallingCode = phonesMetadata ? CHAR_PLUS + getCountryCallingCode(this.countryIsoCode(), phonesMetadata) : '';\n    this.onChange(unmaskedValue === countryCallingCode ? '' : unmaskedValue);\n  }\n  computeMask(countryIsoCode, metadata) {\n    if (!metadata) {\n      return null;\n    }\n    const {\n      plugins,\n      ...restOptions\n    } = maskitoPhoneOptionsGenerator({\n      countryIsoCode,\n      metadata\n    });\n    return {\n      ...restOptions,\n      plugins: [...plugins, maskitoRemoveOnBlurPlugin(`${CHAR_PLUS}${getCountryCallingCode(countryIsoCode, metadata)} `), maskitoInitialCalibrationPlugin()]\n    };\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵTuiInputPhoneInternational_BaseFactory;\n      return function TuiInputPhoneInternational_Factory(__ngFactoryType__) {\n        return (ɵTuiInputPhoneInternational_BaseFactory || (ɵTuiInputPhoneInternational_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputPhoneInternational)))(__ngFactoryType__ || TuiInputPhoneInternational);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiInputPhoneInternational,\n      selectors: [[\"tui-input-phone-international\"]],\n      viewQuery: function TuiInputPhoneInternational_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MaskitoDirective, 5, ElementRef);\n          i0.ɵɵviewQuery(TuiTextfieldDropdownDirective, 5, TemplateRef);\n          i0.ɵɵviewQuery(TuiOption, 5, ElementRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOptions = _t);\n        }\n      },\n      hostVars: 1,\n      hostBindings: function TuiInputPhoneInternational_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"data-size\", ctx.size());\n        }\n      },\n      inputs: {\n        countrySearch: \"countrySearch\",\n        countriesValue: [0, \"countries\", \"countriesValue\"],\n        isoCode: [0, \"countryIsoCode\", \"isoCode\"]\n      },\n      outputs: {\n        countryIsoCodeChange: \"countryIsoCodeChange\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([tuiAsControl(TuiInputPhoneInternational), tuiFallbackValueProvider(''), tuiTextfieldOptionsProvider({\n        cleaner: signal(false)\n      }), tuiDropdownOptionsProvider({\n        limitWidth: 'fixed',\n        align: 'right'\n      })]), i0.ɵɵHostDirectivesFeature([i1.TuiGroup, i2.TuiDropdownDirective, i2.TuiWithDropdownOpen]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c1,\n      decls: 10,\n      vars: 14,\n      consts: [[\"flag\", \"\"], [1, \"t-select\", 3, \"content\", \"tuiChevron\"], [\"ngModel\", \"\", \"tuiTextfield\", \"\", 3, \"disabled\", \"focused\", \"ngModelOptions\"], [\"autocomplete\", \"new-password\", \"tuiTextfield\", \"\", 3, \"ngModelChange\", \"beforeinput.capture\", \"blur\", \"focus\", \"disabled\", \"maskito\", \"ngModelOptions\", \"ngModel\"], [\"tuiLabel\", \"\"], [4, \"tuiTextfieldDropdown\"], [1, \"t-flag\", 3, \"alt\", \"src\"], [\"class\", \"t-search\", 3, \"iconStart\", 4, \"ngIf\"], [\"tuiOption\", \"\", \"type\", \"button\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"t-search\", 3, \"iconStart\"], [\"tuiAutoFocus\", \"\", \"tuiTextfield\", \"\", 3, \"keydown.arrowDown\", \"ngModelChange\", \"ngModel\"], [\"tuiOption\", \"\", \"type\", \"button\", 3, \"click\"], [\"alt\", \"\", 1, \"t-flag\", 3, \"src\"], [1, \"t-name\"], [1, \"t-code\"]],\n      template: function TuiInputPhoneInternational_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵelementStart(0, \"tui-textfield\", 1);\n          i0.ɵɵelement(1, \"select\", 2);\n          i0.ɵɵtemplate(2, TuiInputPhoneInternational_ng_template_2_Template, 2, 4, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"tui-textfield\")(5, \"input\", 3);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TuiInputPhoneInternational_Template_input_ngModelChange_5_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.textfieldValue, $event) || (ctx.textfieldValue = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵlistener(\"beforeinput.capture\", function TuiInputPhoneInternational_Template_input_beforeinput_capture_5_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onPaste($event));\n          })(\"blur\", function TuiInputPhoneInternational_Template_input_blur_5_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onTouched());\n          })(\"focus\", function TuiInputPhoneInternational_Template_input_focus_5_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(!ctx.readOnly() && ctx.onFocus());\n          })(\"ngModelChange\", function TuiInputPhoneInternational_Template_input_ngModelChange_5_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onValueChange($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵprojection(6);\n          i0.ɵɵelementStart(7, \"label\", 4);\n          i0.ɵɵprojection(8, 1);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, TuiInputPhoneInternational_ng_container_9_Template, 4, 2, \"ng-container\", 5);\n        }\n        if (rf & 2) {\n          const flag_r6 = i0.ɵɵreference(3);\n          i0.ɵɵproperty(\"content\", flag_r6)(\"tuiChevron\", ctx.open());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.disabled())(\"focused\", ctx.open())(\"ngModelOptions\", i0.ɵɵpureFunction0(12, _c2));\n          i0.ɵɵattribute(\"data-mode\", ctx.mode());\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", ctx.disabled())(\"maskito\", ctx.mask())(\"ngModelOptions\", i0.ɵɵpureFunction0(13, _c2));\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.textfieldValue);\n          i0.ɵɵattribute(\"data-mode\", ctx.mode())(\"readonly\", ctx.readOnly() || null);\n        }\n      },\n      dependencies: [AsyncPipe, CommonModule, i3.NgForOf, i3.NgIf, FormsModule, i4.DefaultValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel, MaskitoDirective, TuiAutoFocus, TuiChevron, i5.TuiDataListComponent, i5.TuiOption, TuiFlagPipe, i6.TuiLabel, i7.TuiSelect, i7.TuiTextfieldComponent, i7.TuiTextfieldDirective, i7.TuiTextfieldDropdownDirective],\n      styles: [\".t-select[_ngcontent-%COMP%]{inline-size:5.625rem;flex:none}.t-select[data-size=m][_ngcontent-%COMP%]{inline-size:5rem}.t-select[data-size=s][_ngcontent-%COMP%]{inline-size:4rem}.t-flag[_ngcontent-%COMP%]{inline-size:1.75rem;block-size:1.75rem;border-radius:100%}.t-name[_ngcontent-%COMP%]{margin:0 auto 0 .75rem}.t-code[_ngcontent-%COMP%]{color:var(--tui-text-secondary);margin-inline-end:.25rem}.t-search[_ngcontent-%COMP%]{position:sticky;top:.25rem;background:var(--tui-background-elevation-3);box-shadow:0 -1rem var(--tui-background-elevation-3);margin:.25rem}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputPhoneInternational, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: 'tui-input-phone-international',\n      imports: [AsyncPipe, CommonModule, FormsModule, MaskitoDirective, TuiAutoFocus, TuiChevron, TuiDataList, TuiFlagPipe, TuiTextfield],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [tuiAsControl(TuiInputPhoneInternational), tuiFallbackValueProvider(''), tuiTextfieldOptionsProvider({\n        cleaner: signal(false)\n      }), tuiDropdownOptionsProvider({\n        limitWidth: 'fixed',\n        align: 'right'\n      })],\n      hostDirectives: [TuiGroup, TuiDropdownDirective, TuiWithDropdownOpen],\n      host: {\n        '[attr.data-size]': 'size()'\n      },\n      template: \"<tui-textfield\\n    class=\\\"t-select\\\"\\n    [content]=\\\"flag\\\"\\n    [tuiChevron]=\\\"open()\\\"\\n>\\n    <select\\n        ngModel=\\\"\\\"\\n        tuiTextfield\\n        [attr.data-mode]=\\\"mode()\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [focused]=\\\"open()\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n    ></select>\\n\\n    <ng-template #flag>\\n        <img\\n            class=\\\"t-flag\\\"\\n            [alt]=\\\"names()?.[countryIsoCode()]\\\"\\n            [src]=\\\"countryIsoCode() | tuiFlag\\\"\\n        />\\n    </ng-template>\\n</tui-textfield>\\n\\n<tui-textfield>\\n    <!--TODO: Replace attribute bindings with inputs after Angular updated and signal bindings properly update-->\\n    <input\\n        autocomplete=\\\"new-password\\\"\\n        tuiTextfield\\n        [attr.data-mode]=\\\"mode()\\\"\\n        [attr.readonly]=\\\"readOnly() || null\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [maskito]=\\\"mask()\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n        [(ngModel)]=\\\"textfieldValue\\\"\\n        (beforeinput.capture)=\\\"onPaste($event)\\\"\\n        (blur)=\\\"onTouched()\\\"\\n        (focus)=\\\"!readOnly() && onFocus()\\\"\\n        (ngModelChange)=\\\"onValueChange($event)\\\"\\n    />\\n\\n    <!--\\n    TODO: get rid of built-in input and label and just externalize everything in 5.0\\n    <tui-input-phone-international>\\n      <label tuiLabel>My label</label>\\n      <input tuiTextfield placeholder=\\\"My placeholder\\\" [(ngModel)]=\\\"value\\\" />\\n      <tui-icon icon=\\\"@tui.phone\\\" />\\n    </tui-input-phone-international>\\n    -->\\n    <ng-content select=\\\"tui-icon, img\\\" />\\n\\n    <label tuiLabel>\\n        <ng-content />\\n    </label>\\n</tui-textfield>\\n\\n<ng-container *tuiTextfieldDropdown>\\n    <tui-textfield\\n        *ngIf=\\\"countrySearch\\\"\\n        class=\\\"t-search\\\"\\n        [iconStart]=\\\"icons.search\\\"\\n    >\\n        <label tuiLabel>{{ internationalSearchLabel$ | async }}</label>\\n        <input\\n            tuiAutoFocus\\n            tuiTextfield\\n            [ngModel]=\\\"search()\\\"\\n            (keydown.arrowDown)=\\\"focusFirstItem()\\\"\\n            (ngModelChange)=\\\"search.set($event)\\\"\\n        />\\n    </tui-textfield>\\n\\n    <tui-data-list>\\n        <button\\n            *ngFor=\\\"let item of filtered()\\\"\\n            tuiOption\\n            type=\\\"button\\\"\\n            (click)=\\\"onItemClick(item.iso)\\\"\\n        >\\n            <img\\n                alt=\\\"\\\"\\n                class=\\\"t-flag\\\"\\n                [src]=\\\"item.iso | tuiFlag\\\"\\n            />\\n            <span class=\\\"t-name\\\">{{ item.name }}</span>\\n            <span class=\\\"t-code\\\">{{ item.code }}</span>\\n        </button>\\n    </tui-data-list>\\n</ng-container>\\n\",\n      styles: [\".t-select{inline-size:5.625rem;flex:none}.t-select[data-size=m]{inline-size:5rem}.t-select[data-size=s]{inline-size:4rem}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:100%}.t-name{margin:0 auto 0 .75rem}.t-code{color:var(--tui-text-secondary);margin-inline-end:.25rem}.t-search{position:sticky;top:.25rem;background:var(--tui-background-elevation-3);box-shadow:0 -1rem var(--tui-background-elevation-3);margin:.25rem}\\n\"]\n    }]\n  }], null, {\n    input: [{\n      type: ViewChild,\n      args: [MaskitoDirective, {\n        read: ElementRef\n      }]\n    }],\n    listOptions: [{\n      type: ViewChildren,\n      args: [TuiOption, {\n        read: ElementRef\n      }]\n    }],\n    countrySearch: [{\n      type: Input\n    }],\n    countryIsoCodeChange: [{\n      type: Output\n    }],\n    countriesValue: [{\n      type: Input,\n      args: ['countries']\n    }],\n    isoCode: [{\n      type: Input,\n      args: ['countryIsoCode']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [forwardRef(() => TuiTextfieldDropdownDirective), {\n        read: TemplateRef\n      }]\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS, TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, TuiInputPhoneInternational, tuiInputPhoneInternationalOptionsProvider };","map":{"version":3,"names":["i3","AsyncPipe","CommonModule","i0","inject","signal","computed","ElementRef","TemplateRef","Component","ChangeDetectionStrategy","ViewChild","ViewChildren","Input","Output","forwardRef","toSignal","toObservable","i4","FormsModule","MaskitoDirective","maskitoTransform","maskitoInitialCalibrationPlugin","maskitoRemoveOnBlurPlugin","maskitoGetCountryFromNumber","maskitoPhoneOptionsGenerator","TuiControl","tuiAsControl","TUI_DEFAULT_MATCHER","CHAR_PLUS","TuiAutoFocus","tuiFallbackValueProvider","tuiIsInputEvent","tuiCreateToken","tuiProvideOptions","tuiDirectiveBinding","i5","TuiOption","TuiDataList","i7","TUI_TEXTFIELD_OPTIONS","tuiTextfieldOptionsProvider","TuiTextfieldDropdownDirective","TuiTextfield","i2","tuiDropdown","tuiDropdownOpen","TuiDropdownOpen","tuiDropdownOptionsProvider","TuiDropdownDirective","TuiWithDropdownOpen","i1","TuiGroup","TuiFlagPipe","TUI_COMMON_ICONS","TuiChevron","TUI_COUNTRIES","TUI_INTERNATIONAL_SEARCH","tuiGetCallingCode","validatePhoneNumberLength","getCountryCallingCode","of","from","skip","i6","_c0","_c1","_c2","standalone","TuiInputPhoneInternational_ng_template_2_Template","rf","ctx","ɵɵelement","ɵɵpipe","tmp_2_0","ctx_r1","ɵɵnextContext","ɵɵproperty","names","countryIsoCode","ɵɵpipeBind1","ɵɵsanitizeUrl","TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template_input_keydown_arrowDown_4_listener","ɵɵrestoreView","ɵɵresetView","focusFirstItem","TuiInputPhoneInternational_ng_container_9_tui_textfield_1_Template_input_ngModelChange_4_listener","$event","search","set","icons","ɵɵadvance","ɵɵtextInterpolate","internationalSearchLabel$","TuiInputPhoneInternational_ng_container_9_button_3_Template","_r4","TuiInputPhoneInternational_ng_container_9_button_3_Template_button_click_0_listener","item_r5","$implicit","onItemClick","iso","name","code","TuiInputPhoneInternational_ng_container_9_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","countrySearch","filtered","TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS","countries","metadata","country_calling_codes","TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS","tuiInputPhoneInternationalOptionsProvider","options","NOT_FORM_CONTROL_SYMBOLS","TuiInputPhoneInternational","constructor","arguments","dropdown","size","open","map","filter","mask","computeMask","$","interactive","textfieldValue","countryIsoCodeChange","pipe","countriesValue","value","isoCode","listOptions","get","nativeElement","focus","onPaste","event","phonesMetadata","inputType","includes","newValue","data","prefixedValue","startsWith","input","writeValue","unmaskedValue","maskOptions","cdr","detectChanges","template","onFocus","phoneMetadata","onValueChange","maskedValue","replaceAll","countryCallingCode","onChange","plugins","restOptions","ɵfac","ɵTuiInputPhoneInternational_BaseFactory","TuiInputPhoneInternational_Factory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","TuiInputPhoneInternational_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","TuiInputPhoneInternational_HostBindings","ɵɵattribute","inputs","outputs","features","ɵɵProvidersFeature","cleaner","limitWidth","align","ɵɵHostDirectivesFeature","ɵɵInheritDefinitionFeature","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","consts","TuiInputPhoneInternational_Template","_r1","ɵɵprojectionDef","ɵɵtemplateRefExtractor","ɵɵtwoWayListener","TuiInputPhoneInternational_Template_input_ngModelChange_5_listener","ɵɵtwoWayBindingSet","TuiInputPhoneInternational_Template_input_beforeinput_capture_5_listener","TuiInputPhoneInternational_Template_input_blur_5_listener","onTouched","TuiInputPhoneInternational_Template_input_focus_5_listener","readOnly","ɵɵprojection","flag_r6","ɵɵreference","disabled","ɵɵpureFunction0","mode","ɵɵtwoWayProperty","dependencies","NgForOf","NgIf","DefaultValueAccessor","SelectControlValueAccessor","NgControlStatus","NgModel","TuiDataListComponent","TuiLabel","TuiSelect","TuiTextfieldComponent","TuiTextfieldDirective","styles","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","imports","OnPush","providers","hostDirectives","host","read"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-components-input-phone-international.mjs"],"sourcesContent":["import * as i3 from '@angular/common';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, signal, computed, ElementRef, TemplateRef, Component, ChangeDetectionStrategy, ViewChild, ViewChildren, Input, Output, forwardRef } from '@angular/core';\nimport { toSignal, toObservable } from '@angular/core/rxjs-interop';\nimport * as i4 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MaskitoDirective } from '@maskito/angular';\nimport { maskitoTransform, maskitoInitialCalibrationPlugin } from '@maskito/core';\nimport { maskitoRemoveOnBlurPlugin } from '@maskito/kit';\nimport { maskitoGetCountryFromNumber, maskitoPhoneOptionsGenerator } from '@maskito/phone';\nimport { TuiControl, tuiAsControl } from '@taiga-ui/cdk/classes';\nimport { TUI_DEFAULT_MATCHER, CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { TuiAutoFocus } from '@taiga-ui/cdk/directives/auto-focus';\nimport { tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';\nimport { tuiIsInputEvent } from '@taiga-ui/cdk/utils/dom';\nimport { tuiCreateToken, tuiProvideOptions, tuiDirectiveBinding } from '@taiga-ui/cdk/utils/miscellaneous';\nimport * as i5 from '@taiga-ui/core/components/data-list';\nimport { TuiOption, TuiDataList } from '@taiga-ui/core/components/data-list';\nimport * as i7 from '@taiga-ui/core/components/textfield';\nimport { TUI_TEXTFIELD_OPTIONS, tuiTextfieldOptionsProvider, TuiTextfieldDropdownDirective, TuiTextfield } from '@taiga-ui/core/components/textfield';\nimport * as i2 from '@taiga-ui/core/directives/dropdown';\nimport { tuiDropdown, tuiDropdownOpen, TuiDropdownOpen, tuiDropdownOptionsProvider, TuiDropdownDirective, TuiWithDropdownOpen } from '@taiga-ui/core/directives/dropdown';\nimport * as i1 from '@taiga-ui/core/directives/group';\nimport { TuiGroup } from '@taiga-ui/core/directives/group';\nimport { TuiFlagPipe } from '@taiga-ui/core/pipes/flag';\nimport { TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';\nimport { TuiChevron } from '@taiga-ui/kit/directives';\nimport { TUI_COUNTRIES, TUI_INTERNATIONAL_SEARCH } from '@taiga-ui/kit/tokens';\nimport { tuiGetCallingCode } from '@taiga-ui/kit/utils';\nimport { validatePhoneNumberLength } from 'libphonenumber-js';\nimport { getCountryCallingCode } from 'libphonenumber-js/core';\nimport { of, from, skip } from 'rxjs';\nimport * as i6 from '@taiga-ui/core/components/label';\n\nconst TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {\n    countries: [],\n    countryIsoCode: 'RU',\n    metadata: of({ countries: {}, country_calling_codes: {} }),\n};\n/**\n * Default parameters for input phone international component\n */\nconst TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\nfunction tuiInputPhoneInternationalOptionsProvider(options) {\n    return tuiProvideOptions(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, options, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);\n}\n\nconst NOT_FORM_CONTROL_SYMBOLS = /[^+\\d]/g;\nclass TuiInputPhoneInternational extends TuiControl {\n    constructor() {\n        super(...arguments);\n        this.dropdown = tuiDropdown(null);\n        this.options = inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS);\n        this.size = inject(TUI_TEXTFIELD_OPTIONS).size;\n        this.open = tuiDropdownOpen();\n        this.names = toSignal(inject(TUI_COUNTRIES));\n        this.metadata = toSignal(from(this.options.metadata));\n        this.countries = signal(this.options.countries);\n        this.countryIsoCode = signal(this.options.countryIsoCode);\n        this.icons = inject(TUI_COMMON_ICONS);\n        this.internationalSearchLabel$ = inject(TUI_INTERNATIONAL_SEARCH);\n        this.search = signal('');\n        this.filtered = computed(() => this.countries()\n            .map((iso) => ({\n            iso,\n            name: this.names()?.[iso] || '',\n            code: tuiGetCallingCode(iso, this.metadata()),\n        }))\n            .filter(({ name, code }) => TUI_DEFAULT_MATCHER(name + code, this.search())));\n        this.mask = computed(() => this.computeMask(this.countryIsoCode(), this.metadata()));\n        this.$ = tuiDirectiveBinding(TuiDropdownOpen, 'tuiDropdownEnabled', this.interactive);\n        this.textfieldValue = '';\n        this.countrySearch = false;\n        this.countryIsoCodeChange = toObservable(this.countryIsoCode).pipe(skip(1));\n    }\n    set countriesValue(value) {\n        this.countries.set(value);\n    }\n    set isoCode(code) {\n        this.countryIsoCode.set(code);\n    }\n    focusFirstItem() {\n        this.listOptions?.get(0)?.nativeElement.focus();\n    }\n    onPaste(event) {\n        const phonesMetadata = this.metadata();\n        if (!tuiIsInputEvent(event) ||\n            !phonesMetadata ||\n            (!event.inputType.includes('Drop') && !event.inputType.includes('Paste'))) {\n            return;\n        }\n        const newValue = event.data || '';\n        const prefixedValue = newValue.startsWith(CHAR_PLUS)\n            ? newValue\n            : CHAR_PLUS + newValue;\n        if (validatePhoneNumberLength(prefixedValue) === 'TOO_SHORT') {\n            return;\n        }\n        const countryIsoCode = maskitoGetCountryFromNumber(prefixedValue, phonesMetadata);\n        if (countryIsoCode) {\n            this.countryIsoCode.set(countryIsoCode);\n        }\n    }\n    onItemClick(isoCode) {\n        this.open.set(false);\n        this.countryIsoCode.set(isoCode);\n        this.input?.nativeElement.focus();\n    }\n    writeValue(unmaskedValue) {\n        super.writeValue(unmaskedValue);\n        const maskOptions = this.mask();\n        this.textfieldValue = maskOptions\n            ? maskitoTransform(unmaskedValue, maskOptions)\n            : unmaskedValue; // it will be calibrated later when mask is ready (by maskitoInitialCalibrationPlugin)\n        this.cdr.detectChanges();\n    }\n    set template(template) {\n        this.dropdown.set(template);\n    }\n    onFocus() {\n        const phoneMetadata = this.metadata();\n        if (!this.textfieldValue && phoneMetadata) {\n            this.textfieldValue = `${CHAR_PLUS + getCountryCallingCode(this.countryIsoCode(), phoneMetadata)} `;\n        }\n    }\n    onValueChange(maskedValue) {\n        const unmaskedValue = maskedValue.replaceAll(NOT_FORM_CONTROL_SYMBOLS, '');\n        const phonesMetadata = this.metadata();\n        const countryCallingCode = phonesMetadata\n            ? CHAR_PLUS + getCountryCallingCode(this.countryIsoCode(), phonesMetadata)\n            : '';\n        this.onChange(unmaskedValue === countryCallingCode ? '' : unmaskedValue);\n    }\n    computeMask(countryIsoCode, metadata) {\n        if (!metadata) {\n            return null;\n        }\n        const { plugins, ...restOptions } = maskitoPhoneOptionsGenerator({\n            countryIsoCode,\n            metadata,\n        });\n        return {\n            ...restOptions,\n            plugins: [\n                ...plugins,\n                maskitoRemoveOnBlurPlugin(`${CHAR_PLUS}${getCountryCallingCode(countryIsoCode, metadata)} `),\n                maskitoInitialCalibrationPlugin(),\n            ],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiInputPhoneInternational, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.12\", type: TuiInputPhoneInternational, isStandalone: true, selector: \"tui-input-phone-international\", inputs: { countrySearch: \"countrySearch\", countriesValue: [\"countries\", \"countriesValue\"], isoCode: [\"countryIsoCode\", \"isoCode\"] }, outputs: { countryIsoCodeChange: \"countryIsoCodeChange\" }, host: { properties: { \"attr.data-size\": \"size()\" } }, providers: [\n            tuiAsControl(TuiInputPhoneInternational),\n            tuiFallbackValueProvider(''),\n            tuiTextfieldOptionsProvider({ cleaner: signal(false) }),\n            tuiDropdownOptionsProvider({\n                limitWidth: 'fixed',\n                align: 'right',\n            }),\n        ], viewQueries: [{ propertyName: \"input\", first: true, predicate: MaskitoDirective, descendants: true, read: ElementRef }, { propertyName: \"template\", first: true, predicate: i0.forwardRef(function () { return TuiTextfieldDropdownDirective; }), descendants: true, read: TemplateRef }, { propertyName: \"listOptions\", predicate: TuiOption, descendants: true, read: ElementRef }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiGroup }, { directive: i2.TuiDropdownDirective }, { directive: i2.TuiWithDropdownOpen }], ngImport: i0, template: \"<tui-textfield\\n    class=\\\"t-select\\\"\\n    [content]=\\\"flag\\\"\\n    [tuiChevron]=\\\"open()\\\"\\n>\\n    <select\\n        ngModel=\\\"\\\"\\n        tuiTextfield\\n        [attr.data-mode]=\\\"mode()\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [focused]=\\\"open()\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n    ></select>\\n\\n    <ng-template #flag>\\n        <img\\n            class=\\\"t-flag\\\"\\n            [alt]=\\\"names()?.[countryIsoCode()]\\\"\\n            [src]=\\\"countryIsoCode() | tuiFlag\\\"\\n        />\\n    </ng-template>\\n</tui-textfield>\\n\\n<tui-textfield>\\n    <!--TODO: Replace attribute bindings with inputs after Angular updated and signal bindings properly update-->\\n    <input\\n        autocomplete=\\\"new-password\\\"\\n        tuiTextfield\\n        [attr.data-mode]=\\\"mode()\\\"\\n        [attr.readonly]=\\\"readOnly() || null\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [maskito]=\\\"mask()\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n        [(ngModel)]=\\\"textfieldValue\\\"\\n        (beforeinput.capture)=\\\"onPaste($event)\\\"\\n        (blur)=\\\"onTouched()\\\"\\n        (focus)=\\\"!readOnly() && onFocus()\\\"\\n        (ngModelChange)=\\\"onValueChange($event)\\\"\\n    />\\n\\n    <!--\\n    TODO: get rid of built-in input and label and just externalize everything in 5.0\\n    <tui-input-phone-international>\\n      <label tuiLabel>My label</label>\\n      <input tuiTextfield placeholder=\\\"My placeholder\\\" [(ngModel)]=\\\"value\\\" />\\n      <tui-icon icon=\\\"@tui.phone\\\" />\\n    </tui-input-phone-international>\\n    -->\\n    <ng-content select=\\\"tui-icon, img\\\" />\\n\\n    <label tuiLabel>\\n        <ng-content />\\n    </label>\\n</tui-textfield>\\n\\n<ng-container *tuiTextfieldDropdown>\\n    <tui-textfield\\n        *ngIf=\\\"countrySearch\\\"\\n        class=\\\"t-search\\\"\\n        [iconStart]=\\\"icons.search\\\"\\n    >\\n        <label tuiLabel>{{ internationalSearchLabel$ | async }}</label>\\n        <input\\n            tuiAutoFocus\\n            tuiTextfield\\n            [ngModel]=\\\"search()\\\"\\n            (keydown.arrowDown)=\\\"focusFirstItem()\\\"\\n            (ngModelChange)=\\\"search.set($event)\\\"\\n        />\\n    </tui-textfield>\\n\\n    <tui-data-list>\\n        <button\\n            *ngFor=\\\"let item of filtered()\\\"\\n            tuiOption\\n            type=\\\"button\\\"\\n            (click)=\\\"onItemClick(item.iso)\\\"\\n        >\\n            <img\\n                alt=\\\"\\\"\\n                class=\\\"t-flag\\\"\\n                [src]=\\\"item.iso | tuiFlag\\\"\\n            />\\n            <span class=\\\"t-name\\\">{{ item.name }}</span>\\n            <span class=\\\"t-code\\\">{{ item.code }}</span>\\n        </button>\\n    </tui-data-list>\\n</ng-container>\\n\", styles: [\".t-select{inline-size:5.625rem;flex:none}.t-select[data-size=m]{inline-size:5rem}.t-select[data-size=s]{inline-size:4rem}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:100%}.t-name{margin:0 auto 0 .75rem}.t-code{color:var(--tui-text-secondary);margin-inline-end:.25rem}.t-search{position:sticky;top:.25rem;background:var(--tui-background-elevation-3);box-shadow:0 -1rem var(--tui-background-elevation-3);margin:.25rem}\\n\"], dependencies: [{ kind: \"pipe\", type: AsyncPipe, name: \"async\" }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: MaskitoDirective, selector: \"[maskito]\", inputs: [\"maskito\", \"maskitoElement\"] }, { kind: \"directive\", type: TuiAutoFocus, selector: \"[tuiAutoFocus]\", inputs: [\"tuiAutoFocus\"] }, { kind: \"directive\", type: TuiChevron, selector: \"[tuiChevron]\", inputs: [\"tuiChevron\"] }, { kind: \"component\", type: i5.TuiDataListComponent, selector: \"tui-data-list\", inputs: [\"emptyContent\", \"size\"] }, { kind: \"component\", type: i5.TuiOption, selector: \"button[tuiOption], a[tuiOption], label[tuiOption]\", inputs: [\"disabled\", \"value\"] }, { kind: \"pipe\", type: TuiFlagPipe, name: \"tuiFlag\" }, { kind: \"directive\", type: i6.TuiLabel, selector: \"label[tuiLabel]\" }, { kind: \"component\", type: i7.TuiSelect, selector: \"select[tuiTextfield]\", inputs: [\"placeholder\"] }, { kind: \"component\", type: i7.TuiTextfieldComponent, selector: \"tui-textfield\", inputs: [\"stringify\", \"content\", \"filler\"] }, { kind: \"directive\", type: i7.TuiTextfieldDirective, selector: \"input[tuiTextfield]\" }, { kind: \"directive\", type: i7.TuiTextfieldDropdownDirective, selector: \"ng-template[tuiTextfieldDropdown]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiInputPhoneInternational, decorators: [{\n            type: Component,\n            args: [{ standalone: true, selector: 'tui-input-phone-international', imports: [\n                        AsyncPipe,\n                        CommonModule,\n                        FormsModule,\n                        MaskitoDirective,\n                        TuiAutoFocus,\n                        TuiChevron,\n                        TuiDataList,\n                        TuiFlagPipe,\n                        TuiTextfield,\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        tuiAsControl(TuiInputPhoneInternational),\n                        tuiFallbackValueProvider(''),\n                        tuiTextfieldOptionsProvider({ cleaner: signal(false) }),\n                        tuiDropdownOptionsProvider({\n                            limitWidth: 'fixed',\n                            align: 'right',\n                        }),\n                    ], hostDirectives: [TuiGroup, TuiDropdownDirective, TuiWithDropdownOpen], host: {\n                        '[attr.data-size]': 'size()',\n                    }, template: \"<tui-textfield\\n    class=\\\"t-select\\\"\\n    [content]=\\\"flag\\\"\\n    [tuiChevron]=\\\"open()\\\"\\n>\\n    <select\\n        ngModel=\\\"\\\"\\n        tuiTextfield\\n        [attr.data-mode]=\\\"mode()\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [focused]=\\\"open()\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n    ></select>\\n\\n    <ng-template #flag>\\n        <img\\n            class=\\\"t-flag\\\"\\n            [alt]=\\\"names()?.[countryIsoCode()]\\\"\\n            [src]=\\\"countryIsoCode() | tuiFlag\\\"\\n        />\\n    </ng-template>\\n</tui-textfield>\\n\\n<tui-textfield>\\n    <!--TODO: Replace attribute bindings with inputs after Angular updated and signal bindings properly update-->\\n    <input\\n        autocomplete=\\\"new-password\\\"\\n        tuiTextfield\\n        [attr.data-mode]=\\\"mode()\\\"\\n        [attr.readonly]=\\\"readOnly() || null\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [maskito]=\\\"mask()\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n        [(ngModel)]=\\\"textfieldValue\\\"\\n        (beforeinput.capture)=\\\"onPaste($event)\\\"\\n        (blur)=\\\"onTouched()\\\"\\n        (focus)=\\\"!readOnly() && onFocus()\\\"\\n        (ngModelChange)=\\\"onValueChange($event)\\\"\\n    />\\n\\n    <!--\\n    TODO: get rid of built-in input and label and just externalize everything in 5.0\\n    <tui-input-phone-international>\\n      <label tuiLabel>My label</label>\\n      <input tuiTextfield placeholder=\\\"My placeholder\\\" [(ngModel)]=\\\"value\\\" />\\n      <tui-icon icon=\\\"@tui.phone\\\" />\\n    </tui-input-phone-international>\\n    -->\\n    <ng-content select=\\\"tui-icon, img\\\" />\\n\\n    <label tuiLabel>\\n        <ng-content />\\n    </label>\\n</tui-textfield>\\n\\n<ng-container *tuiTextfieldDropdown>\\n    <tui-textfield\\n        *ngIf=\\\"countrySearch\\\"\\n        class=\\\"t-search\\\"\\n        [iconStart]=\\\"icons.search\\\"\\n    >\\n        <label tuiLabel>{{ internationalSearchLabel$ | async }}</label>\\n        <input\\n            tuiAutoFocus\\n            tuiTextfield\\n            [ngModel]=\\\"search()\\\"\\n            (keydown.arrowDown)=\\\"focusFirstItem()\\\"\\n            (ngModelChange)=\\\"search.set($event)\\\"\\n        />\\n    </tui-textfield>\\n\\n    <tui-data-list>\\n        <button\\n            *ngFor=\\\"let item of filtered()\\\"\\n            tuiOption\\n            type=\\\"button\\\"\\n            (click)=\\\"onItemClick(item.iso)\\\"\\n        >\\n            <img\\n                alt=\\\"\\\"\\n                class=\\\"t-flag\\\"\\n                [src]=\\\"item.iso | tuiFlag\\\"\\n            />\\n            <span class=\\\"t-name\\\">{{ item.name }}</span>\\n            <span class=\\\"t-code\\\">{{ item.code }}</span>\\n        </button>\\n    </tui-data-list>\\n</ng-container>\\n\", styles: [\".t-select{inline-size:5.625rem;flex:none}.t-select[data-size=m]{inline-size:5rem}.t-select[data-size=s]{inline-size:4rem}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:100%}.t-name{margin:0 auto 0 .75rem}.t-code{color:var(--tui-text-secondary);margin-inline-end:.25rem}.t-search{position:sticky;top:.25rem;background:var(--tui-background-elevation-3);box-shadow:0 -1rem var(--tui-background-elevation-3);margin:.25rem}\\n\"] }]\n        }], propDecorators: { input: [{\n                type: ViewChild,\n                args: [MaskitoDirective, { read: ElementRef }]\n            }], listOptions: [{\n                type: ViewChildren,\n                args: [TuiOption, { read: ElementRef }]\n            }], countrySearch: [{\n                type: Input\n            }], countryIsoCodeChange: [{\n                type: Output\n            }], countriesValue: [{\n                type: Input,\n                args: ['countries']\n            }], isoCode: [{\n                type: Input,\n                args: ['countryIsoCode']\n            }], template: [{\n                type: ViewChild,\n                args: [forwardRef(() => TuiTextfieldDropdownDirective), { read: TemplateRef }]\n            }] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS, TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, TuiInputPhoneInternational, tuiInputPhoneInternationalOptionsProvider };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}