{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./chat-page.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./chat-page.component.scss?ngResource\";\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { TuiPlatform } from '@taiga-ui/cdk';\nimport { TuiAppearance, TuiButton, tuiDialog, TuiIcon, TuiLink, TuiRoot, TuiScrollbar, TuiTextfield, TuiTitle } from '@taiga-ui/core';\nimport { TuiAvatar, TuiBadge, TuiBadgeNotification } from '@taiga-ui/kit';\nimport { TuiCardLarge, TuiCell, TuiHeader } from '@taiga-ui/layout';\nimport { map, of } from 'rxjs';\nimport { AuthService } from '../../services/auth/auth-service.service';\nimport { RoomService } from '../../services/messages/room-service.service';\nimport _ from 'lodash';\nimport { AsyncPipe, formatDate, NgClass, NgFor, NgIf, SlicePipe } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AccountListItem, CreateRoomComponent } from '../create-room/create-room.component';\nimport { UsersService } from '../../services/users/users.service';\nimport { TuiInputModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nlet ChatPageComponent = class ChatPageComponent {\n  accountService;\n  messageService;\n  userService;\n  cdRef;\n  loggedUser;\n  fiterRoomText;\n  selectedRoom;\n  userRooms$ = of([]);\n  roomMessages$ = of([]);\n  message = '';\n  dialog = tuiDialog(CreateRoomComponent, {\n    dismissible: true,\n    label: 'Создание комнаты'\n  });\n  constructor(accountService, messageService, userService, cdRef) {\n    this.accountService = accountService;\n    this.messageService = messageService;\n    this.userService = userService;\n    this.cdRef = cdRef;\n  }\n  showDialog() {\n    const obs$ = this.userService.getAllUsers().pipe(map(accounts => _.map(accounts, x => new AccountListItem(x))));\n    this.dialog(obs$).subscribe({\n      next: data => {\n        this.messageService.createRoom(data).subscribe(x => {\n          this.refresh();\n          this.cdRef.markForCheck();\n        });\n      }\n    });\n  }\n  refresh() {\n    this.loggedUser = this.accountService.getUserInfo();\n    if (!_.isNil(this.loggedUser?.userId)) {\n      this.userRooms$ = this.messageService.getUserRooms(this.loggedUser.userId).pipe(map(x => {\n        if (_.isNil(this.fiterRoomText) || _.isEmpty(this.fiterRoomText)) {\n          return x;\n        } else {\n          return x.filter(y => y.name?.includes(this.fiterRoomText ?? ''));\n        }\n      }));\n    }\n    this.refreshMessages();\n  }\n  onFilterTextUpdate() {\n    this.refresh();\n  }\n  refreshMessages() {\n    if (!_.isNil(this.selectedRoom?.id)) {\n      const userId = this.accountService.getUserInfo()?.userId;\n      this.roomMessages$ = this.messageService.getMessagesById(this.selectedRoom.id).pipe(map(x => {\n        return x.map(y => {\n          return {\n            ...y,\n            isOwnMessage: y.user.id === userId\n          };\n        });\n      }));\n    }\n  }\n  ngOnInit() {\n    this.refresh();\n  }\n  updateRoom(room) {\n    this.selectedRoom = room;\n    this.refreshMessages();\n  }\n  sendMessage() {\n    if (!_.isNil(this.selectedRoom?.id) && !_.isEmpty(this.message)) {\n      const loggedUser = this.accountService.getUserInfo();\n      if (!_.isNil(loggedUser?.userId)) {\n        const messageDto = {\n          createdAt: formatDate(new Date(), 'yyyy-MM-ddTHH:mm:ss', 'en-US'),\n          text: this.message,\n          isRead: true,\n          isEdited: false,\n          userId: loggedUser.userId,\n          roomId: this.selectedRoom.id\n        };\n        const messageSend$ = this.messageService.sendMessage(messageDto);\n        messageSend$.subscribe(x => {\n          this.message = '';\n          this.refreshMessages();\n          this.cdRef.markForCheck();\n        });\n      }\n    }\n  }\n  onAddRoom() {\n    this.showDialog();\n  }\n  static ctorParameters = () => [{\n    type: AuthService\n  }, {\n    type: RoomService\n  }, {\n    type: UsersService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\nChatPageComponent = __decorate([Component({\n  selector: 'app-chat-page',\n  standalone: true,\n  imports: [TuiTextfield, TuiAppearance, TuiBadge, TuiButton, TuiCardLarge, TuiHeader, TuiLink, TuiRoot, TuiPlatform, TuiTitle, TuiButton, TuiScrollbar, NgFor, NgIf, AsyncPipe, TuiInputModule, TuiTextfield, TuiTextfieldControllerModule, TuiIcon, TuiBadgeNotification, SlicePipe, FormsModule, TuiAvatar, TuiCell, NgClass],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ChatPageComponent);\nexport { ChatPageComponent };","map":{"version":3,"names":["ChangeDetectorRef","Component","TuiPlatform","TuiAppearance","TuiButton","tuiDialog","TuiIcon","TuiLink","TuiRoot","TuiScrollbar","TuiTextfield","TuiTitle","TuiAvatar","TuiBadge","TuiBadgeNotification","TuiCardLarge","TuiCell","TuiHeader","map","of","AuthService","RoomService","_","AsyncPipe","formatDate","NgClass","NgFor","NgIf","SlicePipe","FormsModule","AccountListItem","CreateRoomComponent","UsersService","TuiInputModule","TuiTextfieldControllerModule","ChatPageComponent","accountService","messageService","userService","cdRef","loggedUser","fiterRoomText","selectedRoom","userRooms$","roomMessages$","message","dialog","dismissible","label","constructor","showDialog","obs$","getAllUsers","pipe","accounts","x","subscribe","next","data","createRoom","refresh","markForCheck","getUserInfo","isNil","userId","getUserRooms","isEmpty","filter","y","name","includes","refreshMessages","onFilterTextUpdate","id","getMessagesById","isOwnMessage","user","ngOnInit","updateRoom","room","sendMessage","messageDto","createdAt","Date","text","isRead","isEdited","roomId","messageSend$","onAddRoom","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\components\\chat-page\\chat-page.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { TuiPlatform } from '@taiga-ui/cdk';\r\nimport {\r\n  TuiAppearance,\r\n  TuiButton,\r\n  tuiDialog,\r\n  TuiDialogSize,\r\n  TuiIcon,\r\n  TuiLink,\r\n  TuiRoot,\r\n  TuiScrollbar,\r\n  TuiTextfield,\r\n  TuiTitle,\r\n} from '@taiga-ui/core';\r\nimport {\r\n  TuiAvatar,\r\n  TuiBadge,\r\n  TuiBadgeNotification,\r\n} from '@taiga-ui/kit';\r\nimport { TuiCardLarge, TuiCell, TuiHeader } from '@taiga-ui/layout';\r\nimport { filter, map, Observable, of, switchMap } from 'rxjs';\r\nimport { AccountInfo, AuthService } from '../../services/auth/auth-service.service';\r\nimport { MessageChatDTO, MessageDTO, RoomDTO, RoomService } from '../../services/messages/room-service.service';\r\nimport _ from 'lodash';\r\nimport { AsyncPipe, formatDate, NgClass, NgFor, NgIf, SlicePipe } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AccountListItem, CreateRoomComponent } from '../create-room/create-room.component';\r\nimport { UsersService } from '../../services/users/users.service';\r\nimport { TuiInputModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\r\n\r\ninterface MessageChatUI extends MessageChatDTO{\r\n  isOwnMessage: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-chat-page',\r\n  standalone: true,\r\n  imports: [\r\n    TuiTextfield,\r\n    TuiAppearance,\r\n    TuiBadge,\r\n    TuiButton,\r\n    TuiCardLarge,\r\n    TuiHeader,\r\n    TuiLink,\r\n    TuiRoot,\r\n    TuiPlatform,\r\n    TuiTitle,\r\n    TuiButton,\r\n    TuiScrollbar,\r\n    NgFor,\r\n    NgIf,\r\n    AsyncPipe,\r\n    TuiInputModule,\r\n    TuiTextfield,\r\n    TuiTextfieldControllerModule,\r\n    TuiIcon,\r\n    TuiBadgeNotification,\r\n    SlicePipe,\r\n    FormsModule,\r\n    TuiAvatar,\r\n    TuiCell,\r\n    NgClass,\r\n  ],\r\n  templateUrl: './chat-page.component.html',\r\n  styleUrl: './chat-page.component.scss',\r\n})\r\nexport class ChatPageComponent {\r\n  loggedUser: AccountInfo | undefined;\r\n  fiterRoomText?: string;\r\n  selectedRoom?: RoomDTO;\r\n  public userRooms$: Observable<RoomDTO[]> = of([]);\r\n  public roomMessages$: Observable<MessageChatUI[]> = of([]);\r\n  public message: string = '';\r\n  private readonly dialog = tuiDialog(CreateRoomComponent, {\r\n    dismissible: true,\r\n    label: 'Создание комнаты',\r\n  });\r\n\r\n  constructor(\r\n    private accountService: AuthService,\r\n    private messageService: RoomService,\r\n    private userService: UsersService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  protected showDialog(): void {\r\n    const obs$ = this.userService\r\n      .getAllUsers()\r\n      .pipe(map((accounts) => _.map(accounts, (x) => new AccountListItem(x))));\r\n    this.dialog(obs$).subscribe({\r\n      next: (data) => {\r\n        this.messageService.createRoom(data).subscribe((x) => {\r\n          this.refresh();\r\n          this.cdRef.markForCheck();\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  refresh() {\r\n    this.loggedUser = this.accountService.getUserInfo();\r\n    if (!_.isNil(this.loggedUser?.userId)) {\r\n      this.userRooms$ = this.messageService.getUserRooms(\r\n        this.loggedUser.userId\r\n      ).pipe(\r\n        map((x) => {\r\n            if (_.isNil(this.fiterRoomText) || _.isEmpty(this.fiterRoomText)) {\r\n              return x;\r\n            } else {\r\n              return x.filter((y) => y.name?.includes(this.fiterRoomText ?? ''));\r\n            }\r\n          }),\r\n      );\r\n    }\r\n\r\n    this.refreshMessages();\r\n  }\r\n\r\n  onFilterTextUpdate(){\r\n    this.refresh();\r\n  }\r\n\r\n  refreshMessages() {\r\n    if (!_.isNil(this.selectedRoom?.id)) {\r\n      const userId = this.accountService.getUserInfo()?.userId;\r\n      this.roomMessages$ = this.messageService\r\n        .getMessagesById(this.selectedRoom.id)\r\n        .pipe(\r\n          map((x) => {\r\n            return x.map((y) => {\r\n              return {\r\n                ...y,\r\n                isOwnMessage: y.user.id === userId,\r\n              };\r\n            });\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.refresh();\r\n  }\r\n\r\n  updateRoom(room: RoomDTO) {\r\n    this.selectedRoom = room;\r\n    this.refreshMessages();\r\n  }\r\n\r\n  sendMessage() {\r\n    if (!_.isNil(this.selectedRoom?.id) && !_.isEmpty(this.message)) {\r\n      const loggedUser = this.accountService.getUserInfo();\r\n      if (!_.isNil(loggedUser?.userId)) {\r\n        const messageDto: MessageDTO = {\r\n          createdAt: formatDate(new Date(), 'yyyy-MM-ddTHH:mm:ss', 'en-US'),\r\n          text: this.message,\r\n          isRead: true,\r\n          isEdited: false,\r\n          userId: loggedUser.userId,\r\n          roomId: this.selectedRoom.id,\r\n        };\r\n        const messageSend$ = this.messageService.sendMessage(messageDto);\r\n        messageSend$.subscribe((x) => {\r\n          this.message = '';\r\n          this.refreshMessages();\r\n          this.cdRef.markForCheck();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onAddRoom() {\r\n    this.showDialog();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}