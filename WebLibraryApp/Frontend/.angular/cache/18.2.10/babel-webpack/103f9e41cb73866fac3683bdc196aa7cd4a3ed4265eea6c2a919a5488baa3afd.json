{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpCustomService } from '../http/http-service.service';\nimport { catchError, map, of } from 'rxjs';\nlet UsersService = class UsersService {\n  httpService;\n  controller = 'User';\n  http;\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  getAllUsers() {\n    const method = 'GetAllUsers';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.getRequest(api).pipe(map(x => {\n      return x.map(val => ({\n        id: val.id,\n        name: val.name,\n        surname: val.surname,\n        login: val.login,\n        role: val.role,\n        organization: val.organization,\n        lastVisit: val.lastVisitDate,\n        isDisabled: val.isDisabled,\n        email: val.email\n      }));\n    }));\n  }\n  getUsersByFilter(filter) {\n    const method = 'GetUsersByFilter';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      filter\n    }).pipe(map(x => {\n      let res = x;\n      return res.accounts.map(val => ({\n        id: val.id,\n        name: val.name,\n        surname: val.surname,\n        login: val.login,\n        role: val.role,\n        organization: val.organization,\n        lastVisit: val.lastVisitDate,\n        isDisabled: val.isDisabled,\n        email: val.email\n      }));\n    }));\n  }\n  saveUser(registerDto) {\n    let method = 'SaveUser';\n    return this.httpService.postRequest(`api/${this.controller}/${method}`, registerDto).pipe(map(x => {\n      return true;\n    }), catchError(x => {\n      return of(false);\n    }));\n  }\n  deleteUser(id) {\n    let method = 'DeleteUser';\n    return this.httpService.postRequest(`api/${this.controller}/${method}`, {\n      userId: id\n    }).pipe(map(x => {\n      return x;\n    }), catchError(x => {\n      return of(false);\n    }));\n  }\n  updateUserInfo(accountInfo) {\n    const method = 'UpdateUser';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      account: accountInfo\n    });\n  }\n  getUser(id) {\n    const method = 'GetUser';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      userId: id\n    }).pipe(map(val => {\n      return {\n        id: val.id,\n        name: val.name,\n        surname: val.surname,\n        email: val.email,\n        login: val.login,\n        organization: val.organization,\n        profileIconId: val.profileIconId\n      };\n    }));\n  }\n  static ctorParameters = () => [{\n    type: HttpCustomService\n  }];\n};\nUsersService = __decorate([Injectable({\n  providedIn: 'root'\n})], UsersService);\nexport { UsersService };","map":{"version":3,"names":["Injectable","HttpCustomService","catchError","map","of","UsersService","httpService","controller","http","constructor","getAllUsers","method","api","getRequest","pipe","x","val","id","name","surname","login","role","organization","lastVisit","lastVisitDate","isDisabled","email","getUsersByFilter","filter","postRequest","res","accounts","saveUser","registerDto","deleteUser","userId","updateUserInfo","accountInfo","account","getUser","profileIconId","__decorate","providedIn"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\users\\users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpCustomService } from '../http/http-service.service';\r\nimport { catchError, map, Observable, of } from 'rxjs';\r\nimport { AccountDTO, AccountFullInfo } from '../messages/room-service.service';\r\nimport { BaseFilter } from '../filters/filters';\r\nimport { RegisterAdminDto } from '../auth/auth-service.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UsersService {\r\n  private controller: string = 'User';\r\n  http: any;\r\n  constructor(private httpService: HttpCustomService) {}\r\n\r\n  public getAllUsers(): Observable<AccountDTO[]> {\r\n    const method = 'GetAllUsers';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.getRequest(api).pipe(\r\n      map((x) => {\r\n        return (x as any[]).map(\r\n          (val) =>\r\n            <AccountDTO>{\r\n              id: val.id,\r\n              name: val.name,\r\n              surname: val.surname,\r\n              login: val.login,\r\n              role: val.role,\r\n              organization: val.organization,\r\n              lastVisit: val.lastVisitDate,\r\n              isDisabled: val.isDisabled,\r\n              email: val.email,\r\n            }\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  public getUsersByFilter(filter: BaseFilter): Observable<AccountDTO[]> {\r\n    const method = 'GetUsersByFilter';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { filter }).pipe(\r\n      map((x) => {\r\n        let res = x as GetUsersResponse;\r\n        return (res.accounts as any[]).map(\r\n          (val) =>\r\n            <AccountDTO>{\r\n              id: val.id,\r\n              name: val.name,\r\n              surname: val.surname,\r\n              login: val.login,\r\n              role: val.role,\r\n              organization: val.organization,\r\n              lastVisit: val.lastVisitDate,\r\n              isDisabled: val.isDisabled,\r\n              email: val.email,\r\n            }\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  public saveUser(registerDto: RegisterAdminDto): Observable<boolean> {\r\n    let method: string = 'SaveUser';\r\n    return this.httpService\r\n      .postRequest(`api/${this.controller}/${method}`, registerDto)\r\n      .pipe(\r\n        map((x) => {\r\n          return true;\r\n        }),\r\n        catchError((x) => {\r\n          return of(false);\r\n        })\r\n      );\r\n  }\r\n\r\n  public deleteUser(id: number): Observable<boolean> {\r\n    let method: string = 'DeleteUser';\r\n    return this.httpService\r\n      .postRequest(`api/${this.controller}/${method}`, {userId: id})\r\n      .pipe(\r\n        map((x) => {\r\n          return x;\r\n        }),\r\n        catchError((x) => {\r\n          return of(false);\r\n        })\r\n      );\r\n  }\r\n\r\n  public updateUserInfo(accountInfo: AccountDTO): Observable<boolean> {\r\n    const method = 'UpdateUser';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { account: accountInfo });\r\n  }\r\n\r\n  public getUser(id: number): Observable<AccountFullInfo> {\r\n    const method = 'GetUser';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { userId: id }).pipe(\r\n      map((val) => {\r\n        return <AccountFullInfo>{\r\n          id: val.id,\r\n          name: val.name,\r\n          surname: val.surname,\r\n          email: val.email,\r\n          login: val.login,\r\n          organization: val.organization,\r\n          profileIconId: val.profileIconId,\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GetUsersResponse {\r\n  accounts: AccountDTO[];\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}