{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpCustomService } from '../http/http-service.service';\nimport { map } from 'rxjs';\nlet GenreService = class GenreService {\n  httpService;\n  controller = 'Genre';\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  getParameters(filter) {\n    const method = 'GetGenresByFilter';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      filter\n    }).pipe(map(x => {\n      let res = x;\n      return {\n        totalCount: res.totalCount,\n        items: res.items.map(x => {\n          return {\n            id: x.id,\n            name: x.name\n          };\n        })\n      };\n    }));\n  }\n  saveParameter(parameter) {\n    const method = 'SaveGenre';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      genre: parameter\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpCustomService\n  }];\n};\nGenreService = __decorate([Injectable({\n  providedIn: 'root'\n})], GenreService);\nexport { GenreService };","map":{"version":3,"names":["Injectable","HttpCustomService","map","GenreService","httpService","controller","constructor","getParameters","filter","method","api","postRequest","pipe","x","res","totalCount","items","id","name","saveParameter","parameter","genre","__decorate","providedIn"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\parameters\\ekb-parameters.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpCustomService } from '../http/http-service.service';\r\nimport { BaseFilter } from '../filters/filters';\r\nimport { map, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GenreService {\r\n  private controller: string = 'Genre';\r\n  constructor(private httpService: HttpCustomService) {}\r\n\r\n  public getParameters(filter: BaseFilter): Observable<ParametersData> {\r\n    const method = 'GetGenresByFilter';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { filter }).pipe(\r\n      map((x) => {\r\n        let res = x as ParametersData;\r\n        return {\r\n          totalCount: res.totalCount,\r\n          items: res.items.map((x) => {\r\n            return <Genre>{\r\n              id: x.id,\r\n              name: x.name,\r\n            };\r\n          }),\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  public saveParameter(parameter: Genre): Observable<any> {\r\n    const method = 'SaveGenre';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { genre: parameter });\r\n  }\r\n}\r\n\r\nexport interface ParametersData {\r\n  items: Genre[];\r\n  totalCount: number;\r\n}\r\n\r\nexport interface Genre {\r\n  id?: number;\r\n  name: string;\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,iBAAiB,QAAQ,8BAA8B;AAEhE,SAASC,GAAG,QAAoB,MAAM;AAK/B,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAEHC,WAAA;EADZC,UAAU,GAAW,OAAO;EACpCC,YAAoBF,WAA8B;IAA9B,KAAAA,WAAW,GAAXA,WAAW;EAAsB;EAE9CG,aAAaA,CAACC,MAAkB;IACrC,MAAMC,MAAM,GAAG,mBAAmB;IAClC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACL,UAAU,IAAII,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACL,WAAW,CAACO,WAAW,CAACD,GAAG,EAAE;MAAEF;IAAM,CAAE,CAAC,CAACI,IAAI,CACvDV,GAAG,CAAEW,CAAC,IAAI;MACR,IAAIC,GAAG,GAAGD,CAAmB;MAC7B,OAAO;QACLE,UAAU,EAAED,GAAG,CAACC,UAAU;QAC1BC,KAAK,EAAEF,GAAG,CAACE,KAAK,CAACd,GAAG,CAAEW,CAAC,IAAI;UACzB,OAAc;YACZI,EAAE,EAAEJ,CAAC,CAACI,EAAE;YACRC,IAAI,EAAEL,CAAC,CAACK;WACT;QACH,CAAC;OACF;IACH,CAAC,CAAC,CACH;EACH;EAEOC,aAAaA,CAACC,SAAgB;IACnC,MAAMX,MAAM,GAAG,WAAW;IAC1B,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACL,UAAU,IAAII,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACL,WAAW,CAACO,WAAW,CAACD,GAAG,EAAE;MAAEW,KAAK,EAAED;IAAS,CAAE,CAAC;EAChE;;;;;AA3BWjB,YAAY,GAAAmB,UAAA,EAHxBtB,UAAU,CAAC;EACVuB,UAAU,EAAE;CACb,CAAC,C,EACWpB,YAAY,CA4BxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}