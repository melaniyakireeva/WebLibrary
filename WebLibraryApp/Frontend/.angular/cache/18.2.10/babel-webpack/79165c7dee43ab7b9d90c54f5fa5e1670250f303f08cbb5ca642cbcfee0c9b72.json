{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpCustomService } from '../http/http-service.service';\nimport { map } from 'rxjs';\nlet FilesUploaderService = class FilesUploaderService {\n  httpService;\n  controller = 'File';\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  uploadFile(file) {\n    const method = 'UploadFile';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, file, false, {});\n  }\n  getFile(id) {\n    const method = 'GetFile';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      fileId: id\n    });\n  }\n  getAllFiles() {\n    const method = 'GetAllFiles';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.getRequest(api);\n  }\n  getFilesByFilter(filter) {\n    const method = 'GetFilesByFilter';\n    const api = `api/${this.controller}/${method}`;\n    return this.httpService.postRequest(api, {\n      filter\n    }).pipe(map(x => {\n      let res = x;\n      return {\n        totalCount: res.totalCount,\n        items: res.items\n      };\n    }));\n  }\n  static ctorParameters = () => [{\n    type: HttpCustomService\n  }];\n};\nFilesUploaderService = __decorate([Injectable({\n  providedIn: 'root'\n})], FilesUploaderService);\nexport { FilesUploaderService };","map":{"version":3,"names":["Injectable","HttpCustomService","map","FilesUploaderService","httpService","controller","constructor","uploadFile","file","method","api","postRequest","getFile","id","fileId","getAllFiles","getRequest","getFilesByFilter","filter","pipe","x","res","totalCount","items","__decorate","providedIn"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\files\\files-uploader.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpCustomService } from '../http/http-service.service';\r\nimport { map, Observable } from 'rxjs';\r\nimport { BaseFilter } from '../filters/filters';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FilesUploaderService {\r\n  private controller: string = 'File';\r\n\r\n  constructor(private httpService: HttpCustomService) {}\r\n\r\n  public uploadFile(file: any): Observable<number> {\r\n    const method = 'UploadFile';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, file, false, {});\r\n  }\r\n\r\n  public getFile(id: number): Observable<FileModel> {\r\n    const method = 'GetFile';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { fileId: id });\r\n  }\r\n\r\n  public getAllFiles(): Observable<FileModel[]> {\r\n    const method = 'GetAllFiles';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.getRequest(api);\r\n  }\r\n\r\n  public getFilesByFilter(\r\n    filter: BaseFilter\r\n  ): Observable<GetFilesByFilterResponse> {\r\n    const method = 'GetFilesByFilter';\r\n    const api = `api/${this.controller}/${method}`;\r\n    return this.httpService.postRequest(api, { filter }).pipe(\r\n      map((x) => {\r\n        let res = x as GetFilesByFilterResponse;\r\n        return {\r\n          totalCount: res.totalCount,\r\n          items: res.items,\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GetFilesByFilterResponse {\r\n  items: FileModel[];\r\n  totalCount: number;\r\n}\r\n\r\nexport interface FileModel {\r\n  id: number;\r\n  size: number;\r\n  fileName: string;\r\n  fileData: string;\r\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,GAAG,QAAoB,MAAM;AAM/B,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAGXC,WAAA;EAFZC,UAAU,GAAW,MAAM;EAEnCC,YAAoBF,WAA8B;IAA9B,KAAAA,WAAW,GAAXA,WAAW;EAAsB;EAE9CG,UAAUA,CAACC,IAAS;IACzB,MAAMC,MAAM,GAAG,YAAY;IAC3B,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACL,UAAU,IAAII,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACL,WAAW,CAACO,WAAW,CAACD,GAAG,EAAEF,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;EAC3D;EAEOI,OAAOA,CAACC,EAAU;IACvB,MAAMJ,MAAM,GAAG,SAAS;IACxB,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACL,UAAU,IAAII,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACL,WAAW,CAACO,WAAW,CAACD,GAAG,EAAE;MAAEI,MAAM,EAAED;IAAE,CAAE,CAAC;EAC1D;EAEOE,WAAWA,CAAA;IAChB,MAAMN,MAAM,GAAG,aAAa;IAC5B,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACL,UAAU,IAAII,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACL,WAAW,CAACY,UAAU,CAACN,GAAG,CAAC;EACzC;EAEOO,gBAAgBA,CACrBC,MAAkB;IAElB,MAAMT,MAAM,GAAG,kBAAkB;IACjC,MAAMC,GAAG,GAAG,OAAO,IAAI,CAACL,UAAU,IAAII,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACL,WAAW,CAACO,WAAW,CAACD,GAAG,EAAE;MAAEQ;IAAM,CAAE,CAAC,CAACC,IAAI,CACvDjB,GAAG,CAAEkB,CAAC,IAAI;MACR,IAAIC,GAAG,GAAGD,CAA6B;MACvC,OAAO;QACLE,UAAU,EAAED,GAAG,CAACC,UAAU;QAC1BC,KAAK,EAAEF,GAAG,CAACE;OACZ;IACH,CAAC,CAAC,CACH;EACH;;;;;AArCWpB,oBAAoB,GAAAqB,UAAA,EAHhCxB,UAAU,CAAC;EACVyB,UAAU,EAAE;CACb,CAAC,C,EACWtB,oBAAoB,CAsChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}