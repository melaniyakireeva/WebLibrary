{"ast":null,"code":"import _ from 'lodash';\nimport { AndFilter, FilterOperations, FilterType, NumberFilterOperation, OrFilters, StringFilterOperation } from './filterOperations';\nexport class FilterConverter {\n  static getOperatorFromStr(oper) {\n    if (oper === '>') {\n      return FilterOperations.Greater;\n    } else if (oper === '>=') {\n      return FilterOperations.GreaterOrEqual;\n    } else if (oper === '<') {\n      return FilterOperations.Lower;\n    } else if (oper === '<=') {\n      return FilterOperations.LowerOrEqual;\n    } else if (oper.toLowerCase() === 'contains') {\n      return FilterOperations.Contains;\n    } else if (oper === '=') {\n      return FilterOperations.Equal;\n    } else if (oper === '!=' || oper === '<>') {\n      return FilterOperations.NotEqual;\n    } else {\n      return FilterOperations.IsNotNull;\n    }\n  }\n  static getFilterFromObj(obj, allowedColumns) {\n    if (_.isNil(obj)) {\n      return null;\n    }\n    if (_.isArray(obj)) {\n      const filter = new AndFilter();\n      const subFilters = _.compact(_.map(obj, x => this.getFilterFromObj(x, allowedColumns)));\n      filter.filters = subFilters;\n      return filter;\n    } else {\n      const field = _.capitalize(obj.field);\n      if (!_.includes(allowedColumns, field)) {\n        return null;\n      }\n      const operator = this.getOperatorFromStr(obj.operator);\n      const value = obj.value;\n      if (operator === FilterOperations.IsNotNull) {\n        const res = new StringFilterOperation();\n        res.filterColumn = field;\n        res.operation = operator;\n        return res;\n      }\n      if (_.isString(value)) {\n        const res = new StringFilterOperation();\n        res.filterColumn = field;\n        res.operation = operator;\n        res.valueForComparison = value;\n        return res;\n      } else if (_.isNumber(value)) {\n        const res = new NumberFilterOperation();\n        res.filterColumn = field;\n        res.operation = operator;\n        res.valueForComparison = value;\n        return res;\n      } else {\n        return null;\n      }\n    }\n  }\n  static copyFilter(filter) {\n    if (filter.$type === FilterType[FilterType.StringFilter]) {\n      const convertedFilter = filter;\n      const stringFilter = new StringFilterOperation();\n      stringFilter.filterColumn = convertedFilter.filterColumn;\n      stringFilter.operation = convertedFilter.operation;\n      stringFilter.valueForComparison = convertedFilter.valueForComparison;\n      return stringFilter;\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\n      const convertedFilter = filter;\n      const numberFilter = new NumberFilterOperation();\n      numberFilter.filterColumn = convertedFilter.filterColumn;\n      numberFilter.operation = convertedFilter.operation;\n      numberFilter.valueForComparison = convertedFilter.valueForComparison;\n      return numberFilter;\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\n      const orFilter = filter;\n      const newFilter = new OrFilters();\n      newFilter.filters = _.map(orFilter.filters, x => FilterConverter.copyFilter(x));\n      return newFilter;\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\n      const andFilter = filter;\n      const newFilter = new AndFilter();\n      newFilter.filters = _.map(andFilter.filters, x => FilterConverter.copyFilter(x));\n      return newFilter;\n    } else {\n      return new AndFilter();\n    }\n  }\n  static convertToTree(filter, parent) {\n    if (_.isNil(filter)) {\n      return null;\n    } else if (filter.$type === FilterType[FilterType.StringFilter]) {\n      const stringFilter = filter;\n      return {\n        parent: parent,\n        icon: '@tui.text-cursor-input',\n        value: filter,\n        text: 'StringFilter'\n      };\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\n      const numberFilter = filter;\n      return {\n        parent: parent,\n        icon: '@tui.diff',\n        value: filter,\n        text: 'NumberFilter'\n      };\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\n      const orFilter = filter;\n      const treeElem = {\n        parent: parent,\n        icon: '@tui.blend',\n        value: filter,\n        text: 'OR'\n      };\n      treeElem.children = _.filter(_.map(orFilter.filters, x => this.convertToTree(x, treeElem)), x => !_.isNil(x));\n      return treeElem;\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\n      const andFilter = filter;\n      const treeElem = {\n        parent: parent,\n        icon: '@tui.ampersand',\n        value: filter,\n        children: _.filter(_.map(andFilter.filters, x => this.convertToTree(x)), x => !_.isNil(x)),\n        text: 'AND'\n      };\n      treeElem.children = _.filter(_.map(andFilter.filters, x => this.convertToTree(x, treeElem)), x => !_.isNil(x));\n      return treeElem;\n    } else {\n      return {\n        value: filter,\n        text: 'Unknown'\n      };\n    }\n  }\n  static removeEmptyFilters(filter) {\n    if (filter.$type === FilterType[FilterType.StringFilter]) {\n      const stringFilter = filter;\n      return _.isNil(stringFilter.filterColumn) || _.isNil(stringFilter.operation) ? null : stringFilter;\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\n      const numberFilter = filter;\n      return _.isNil(numberFilter.filterColumn) || _.isNil(numberFilter.operation) || _.isNil(numberFilter.valueForComparison) ? null : numberFilter;\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\n      const orFilter = filter;\n      const filteredData = _.compact(_.map(orFilter.filters, x => FilterConverter.removeEmptyFilters(x)));\n      if (_.isEmpty(filteredData)) {\n        return null;\n      } else {\n        const res = new OrFilters();\n        res.filters = filteredData;\n        return res;\n      }\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\n      const orFilter = filter;\n      const filteredData = _.compact(_.map(orFilter.filters, x => FilterConverter.removeEmptyFilters(x)));\n      if (_.isEmpty(filteredData)) {\n        return null;\n      } else {\n        const res = new AndFilter();\n        res.filters = filteredData;\n        return res;\n      }\n    } else {\n      return null;\n    }\n  }\n  static isEmptyFilter(filter) {\n    if (_.isNil(filter)) {\n      return true;\n    } else if (filter.$type === FilterType[FilterType.StringFilter]) {\n      return false;\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\n      return false;\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\n      const orFilter = filter;\n      return _.every(orFilter.filters, x => FilterConverter.isEmptyFilter(x));\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\n      const andFilter = filter;\n      return _.every(andFilter.filters, x => FilterConverter.isEmptyFilter(x));\n    } else {\n      return true;\n    }\n  }\n  static convertToString(filter) {\n    if (_.isNil(filter)) {\n      return '';\n    }\n    if (filter.$type === FilterType[FilterType.StringFilter]) {\n      const stringFilter = filter;\n      return `'${stringFilter.filterColumn}' ${this.convertOperationToString(stringFilter.operation)} '${stringFilter.valueForComparison}'`;\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\n      const numberFilter = filter;\n      return `'${numberFilter.filterColumn}' ${this.convertOperationToString(numberFilter.operation)} ${numberFilter.valueForComparison}`;\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\n      const orFilter = filter;\n      let filterArr = _.map(orFilter.filters, x => this.convertToString(x));\n      return filterArr.join(' OR ');\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\n      const andFilter = filter;\n      let filterArr = _.map(andFilter.filters, x => `(${this.convertToString(x)})`);\n      return filterArr.join(' AND ');\n    } else {\n      return 'Unknown';\n    }\n  }\n  static convertOperationToNameString(filterOper) {\n    switch (filterOper) {\n      case FilterOperations.Contains:\n        return 'Содержит';\n      case FilterOperations.IsNotNull:\n        return 'Имеет значение';\n      case FilterOperations.IsNull:\n        return 'Не имеет значение';\n      case FilterOperations.Equal:\n        return 'Равно';\n      case FilterOperations.GreaterOrEqual:\n        return 'Больше или равно';\n      case FilterOperations.Greater:\n        return 'Больше';\n      case FilterOperations.Lower:\n        return 'Меньше';\n      case FilterOperations.LowerOrEqual:\n        return 'Меньше или равно';\n      case FilterOperations.NotEqual:\n        return 'Не равен';\n      case FilterOperations.Like:\n        return 'Соответствует LIKE выражению';\n    }\n  }\n  static convertOperationToString(filterOper) {\n    switch (filterOper) {\n      case FilterOperations.Contains:\n        return 'содержит';\n      case FilterOperations.IsNotNull:\n        return 'имеет значение';\n      case FilterOperations.IsNull:\n        return 'не имеет значение';\n      case FilterOperations.Equal:\n        return '==';\n      case FilterOperations.GreaterOrEqual:\n        return '>=';\n      case FilterOperations.Greater:\n        return '>';\n      case FilterOperations.Lower:\n        return '<';\n      case FilterOperations.LowerOrEqual:\n        return '<=';\n      case FilterOperations.NotEqual:\n        return '!=';\n      case FilterOperations.Like:\n        return 'LIKE';\n    }\n  }\n}","map":{"version":3,"names":["_","AndFilter","FilterOperations","FilterType","NumberFilterOperation","OrFilters","StringFilterOperation","FilterConverter","getOperatorFromStr","oper","Greater","GreaterOrEqual","Lower","LowerOrEqual","toLowerCase","Contains","Equal","NotEqual","IsNotNull","getFilterFromObj","obj","allowedColumns","isNil","isArray","filter","subFilters","compact","map","x","filters","field","capitalize","includes","operator","value","res","filterColumn","operation","isString","valueForComparison","isNumber","copyFilter","$type","StringFilter","convertedFilter","stringFilter","NumberFilter","numberFilter","OrFilter","orFilter","newFilter","andFilter","convertToTree","parent","icon","text","treeElem","children","removeEmptyFilters","filteredData","isEmpty","isEmptyFilter","every","convertToString","convertOperationToString","filterArr","join","convertOperationToNameString","filterOper","IsNull","Like"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\filters\\filter-converter.ts"],"sourcesContent":["import _ from 'lodash';\r\nimport { AndFilter, FilterOperation, FilterOperations, FilterType, IFilter, NumberFilterOperation, OrFilters, StringFilterOperation } from './filterOperations';\r\n\r\nexport class FilterConverter {\r\n  public static getOperatorFromStr(oper: string): FilterOperations {\r\n    if (oper === '>') {\r\n      return FilterOperations.Greater;\r\n    } else if (oper === '>=') {\r\n      return FilterOperations.GreaterOrEqual;\r\n    } else if (oper === '<') {\r\n      return FilterOperations.Lower;\r\n    } else if (oper === '<=') {\r\n      return FilterOperations.LowerOrEqual;\r\n    } else if (oper.toLowerCase() === 'contains') {\r\n      return FilterOperations.Contains;\r\n    } else if (oper === '=') {\r\n      return FilterOperations.Equal;\r\n    } else if (oper === '!=' || oper === '<>') {\r\n      return FilterOperations.NotEqual;\r\n    } else {\r\n      return FilterOperations.IsNotNull;\r\n    }\r\n  }\r\n\r\n  public static getFilterFromObj(\r\n    obj: any,\r\n    allowedColumns: string[]\r\n  ): IFilter | null {\r\n    if (_.isNil(obj)) {\r\n      return null;\r\n    }\r\n\r\n    if (_.isArray(obj)) {\r\n      const filter = new AndFilter();\r\n      const subFilters = _.compact(\r\n        _.map(obj, (x) => this.getFilterFromObj(x, allowedColumns))\r\n      );\r\n      filter.filters = subFilters;\r\n      return filter;\r\n    } else {\r\n      const field = _.capitalize(obj.field);\r\n      if (!_.includes(allowedColumns, field)) {\r\n        return null;\r\n      }\r\n\r\n      const operator = this.getOperatorFromStr(obj.operator);\r\n      const value = obj.value;\r\n      if (operator === FilterOperations.IsNotNull) {\r\n        const res = new StringFilterOperation();\r\n        res.filterColumn = field;\r\n        res.operation = operator;\r\n        return res;\r\n      }\r\n      if (_.isString(value)) {\r\n        const res = new StringFilterOperation();\r\n        res.filterColumn = field;\r\n        res.operation = operator;\r\n        res.valueForComparison = value;\r\n        return res;\r\n      } else if (_.isNumber(value)) {\r\n        const res = new NumberFilterOperation();\r\n        res.filterColumn = field;\r\n        res.operation = operator;\r\n        res.valueForComparison = value;\r\n        return res;\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  public static copyFilter(filter: IFilter): IFilter {\r\n    if (filter.$type === FilterType[FilterType.StringFilter]) {\r\n      const convertedFilter = filter as StringFilterOperation;\r\n      const stringFilter = new StringFilterOperation();\r\n      stringFilter.filterColumn = convertedFilter.filterColumn;\r\n      stringFilter.operation = convertedFilter.operation;\r\n      stringFilter.valueForComparison = convertedFilter.valueForComparison;\r\n      return stringFilter;\r\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\r\n      const convertedFilter = filter as NumberFilterOperation;\r\n      const numberFilter = new NumberFilterOperation();\r\n      numberFilter.filterColumn = convertedFilter.filterColumn;\r\n      numberFilter.operation = convertedFilter.operation;\r\n      numberFilter.valueForComparison = convertedFilter.valueForComparison;\r\n      return numberFilter;\r\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\r\n      const orFilter = filter as OrFilters;\r\n      const newFilter = new OrFilters();\r\n      newFilter.filters = _.map(orFilter.filters, (x) =>\r\n        FilterConverter.copyFilter(x)\r\n      );\r\n      return newFilter;\r\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\r\n      const andFilter = filter as AndFilter;\r\n      const newFilter = new AndFilter();\r\n      newFilter.filters = _.map(andFilter.filters, (x) =>\r\n        FilterConverter.copyFilter(x)\r\n      );\r\n      return newFilter;\r\n    } else {\r\n      return new AndFilter();\r\n    }\r\n  }\r\n\r\n  public static convertToTree(\r\n    filter: IFilter,\r\n    parent?: TreeNode\r\n  ): TreeNode | undefined | null {\r\n    if (_.isNil(filter)) {\r\n      return null;\r\n    } else if (filter.$type === FilterType[FilterType.StringFilter]) {\r\n      const stringFilter = filter as StringFilterOperation;\r\n      return {\r\n        parent: parent,\r\n        icon: '@tui.text-cursor-input',\r\n        value: filter,\r\n        text: 'StringFilter',\r\n      };\r\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\r\n      const numberFilter = filter as NumberFilterOperation;\r\n      return {\r\n        parent: parent,\r\n        icon: '@tui.diff',\r\n        value: filter,\r\n        text: 'NumberFilter',\r\n      };\r\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\r\n      const orFilter = filter as OrFilters;\r\n      const treeElem: TreeNode = {\r\n        parent: parent,\r\n        icon: '@tui.blend',\r\n        value: filter,\r\n        text: 'OR',\r\n      };\r\n      treeElem.children = _.filter(\r\n        _.map(orFilter.filters, (x) => this.convertToTree(x, treeElem)),\r\n        (x) => !_.isNil(x)\r\n      );\r\n      return treeElem;\r\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\r\n      const andFilter = filter as AndFilter;\r\n      const treeElem: TreeNode = {\r\n        parent: parent,\r\n        icon: '@tui.ampersand',\r\n        value: filter,\r\n        children: _.filter(\r\n          _.map(andFilter.filters, (x) => this.convertToTree(x)),\r\n          (x) => !_.isNil(x)\r\n        ),\r\n        text: 'AND',\r\n      };\r\n      treeElem.children = _.filter(\r\n        _.map(andFilter.filters, (x) => this.convertToTree(x, treeElem)),\r\n        (x) => !_.isNil(x)\r\n      );\r\n      return treeElem;\r\n    } else {\r\n      return {\r\n        value: filter,\r\n        text: 'Unknown',\r\n      };\r\n    }\r\n  }\r\n\r\n  public static removeEmptyFilters(filter: IFilter): IFilter | null {\r\n    if (filter.$type === FilterType[FilterType.StringFilter]) {\r\n      const stringFilter: StringFilterOperation =\r\n        filter as StringFilterOperation;\r\n      return _.isNil(stringFilter.filterColumn) ||\r\n        _.isNil(stringFilter.operation)\r\n        ? null\r\n        : stringFilter;\r\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\r\n      const numberFilter: NumberFilterOperation =\r\n        filter as NumberFilterOperation;\r\n      return _.isNil(numberFilter.filterColumn) ||\r\n        _.isNil(numberFilter.operation) ||\r\n        _.isNil(numberFilter.valueForComparison)\r\n        ? null\r\n        : numberFilter;\r\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\r\n      const orFilter = filter as OrFilters;\r\n      const filteredData = _.compact(\r\n        _.map(orFilter.filters, (x) => FilterConverter.removeEmptyFilters(x))\r\n      );\r\n      if (_.isEmpty(filteredData)) {\r\n        return null;\r\n      } else {\r\n        const res = new OrFilters();\r\n        res.filters = filteredData;\r\n        return res;\r\n      }\r\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\r\n      const orFilter = filter as AndFilter;\r\n      const filteredData = _.compact(\r\n        _.map(orFilter.filters, (x) => FilterConverter.removeEmptyFilters(x))\r\n      );\r\n      if (_.isEmpty(filteredData)) {\r\n        return null;\r\n      } else {\r\n        const res = new AndFilter();\r\n        res.filters = filteredData;\r\n        return res;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public static isEmptyFilter(filter: IFilter): boolean {\r\n    if (_.isNil(filter)) {\r\n      return true;\r\n    } else if (filter.$type === FilterType[FilterType.StringFilter]) {\r\n      return false;\r\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\r\n      return false;\r\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\r\n      const orFilter = filter as OrFilters;\r\n      return _.every(orFilter.filters, (x) => FilterConverter.isEmptyFilter(x));\r\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\r\n      const andFilter = filter as AndFilter;\r\n      return _.every(andFilter.filters, (x) =>\r\n        FilterConverter.isEmptyFilter(x)\r\n      );\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public static convertToString(filter: IFilter): string {\r\n    if (_.isNil(filter)) {\r\n      return '';\r\n    }\r\n    if (filter.$type === FilterType[FilterType.StringFilter]) {\r\n      const stringFilter = filter as StringFilterOperation;\r\n      return `'${stringFilter.filterColumn}' ${this.convertOperationToString(\r\n        stringFilter.operation\r\n      )} '${stringFilter.valueForComparison}'`;\r\n    } else if (filter.$type === FilterType[FilterType.NumberFilter]) {\r\n      const numberFilter = filter as NumberFilterOperation;\r\n      return `'${numberFilter.filterColumn}' ${this.convertOperationToString(\r\n        numberFilter.operation\r\n      )} ${numberFilter.valueForComparison}`;\r\n    } else if (filter.$type === FilterType[FilterType.OrFilter]) {\r\n      const orFilter = filter as OrFilters;\r\n      let filterArr: string[] = _.map(orFilter.filters, (x) =>\r\n        this.convertToString(x)\r\n      );\r\n      return filterArr.join(' OR ');\r\n    } else if (filter.$type === FilterType[FilterType.AndFilter]) {\r\n      const andFilter = filter as AndFilter;\r\n      let filterArr: string[] = _.map(\r\n        andFilter.filters,\r\n        (x) => `(${this.convertToString(x)})`\r\n      );\r\n      return filterArr.join(' AND ');\r\n    } else {\r\n      return 'Unknown';\r\n    }\r\n  }\r\n\r\n  public static convertOperationToNameString(filterOper: FilterOperations) {\r\n    switch (filterOper) {\r\n      case FilterOperations.Contains:\r\n        return 'Содержит';\r\n      case FilterOperations.IsNotNull:\r\n        return 'Имеет значение';\r\n      case FilterOperations.IsNull:\r\n        return 'Не имеет значение';\r\n      case FilterOperations.Equal:\r\n        return 'Равно';\r\n      case FilterOperations.GreaterOrEqual:\r\n        return 'Больше или равно';\r\n      case FilterOperations.Greater:\r\n        return 'Больше';\r\n      case FilterOperations.Lower:\r\n        return 'Меньше';\r\n      case FilterOperations.LowerOrEqual:\r\n        return 'Меньше или равно';\r\n      case FilterOperations.NotEqual:\r\n        return 'Не равен';\r\n      case FilterOperations.Like:\r\n        return 'Соответствует LIKE выражению';\r\n    }\r\n  }\r\n\r\n  public static convertOperationToString(filterOper: FilterOperations) {\r\n    switch (filterOper) {\r\n      case FilterOperations.Contains:\r\n        return 'содержит';\r\n      case FilterOperations.IsNotNull:\r\n        return 'имеет значение';\r\n      case FilterOperations.IsNull:\r\n        return 'не имеет значение';\r\n      case FilterOperations.Equal:\r\n        return '==';\r\n      case FilterOperations.GreaterOrEqual:\r\n        return '>=';\r\n      case FilterOperations.Greater:\r\n        return '>';\r\n      case FilterOperations.Lower:\r\n        return '<';\r\n      case FilterOperations.LowerOrEqual:\r\n        return '<=';\r\n      case FilterOperations.NotEqual:\r\n        return '!=';\r\n      case FilterOperations.Like:\r\n        return 'LIKE';\r\n    }\r\n  }\r\n}\r\n\r\nexport interface TreeNode {\r\n  children?: TreeNode[];\r\n  readonly text: string;\r\n  readonly icon?: string;\r\n  readonly value: IFilter;\r\n  readonly parent?: TreeNode;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}