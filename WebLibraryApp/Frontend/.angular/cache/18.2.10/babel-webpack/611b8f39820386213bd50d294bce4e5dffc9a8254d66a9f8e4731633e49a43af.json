{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./create-room.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./create-room.component.scss?ngResource\";\nimport { AsyncPipe, formatDate, NgIf } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\nimport { TuiButton, TuiDataList, TuiSelect, TuiTextfield } from '@taiga-ui/core';\nimport { TuiDataListWrapper, TuiSlider } from '@taiga-ui/kit';\nimport { TuiInputModule, TuiSelectModule, TuiMultiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nimport { injectContext } from '@taiga-ui/polymorpheus';\nimport _ from 'lodash';\nexport class AccountListItem {\n  id;\n  name;\n  surname;\n  login;\n  email;\n  constructor(accountDto) {\n    this.id = accountDto.id;\n    this.name = accountDto.name;\n    this.surname = accountDto.surname;\n    this.login = accountDto.login;\n    this.email = accountDto.email;\n  }\n  toString() {\n    return `${this.surname} ${this.surname}`;\n  }\n}\nlet CreateRoomComponent = class CreateRoomComponent {\n  search = '';\n  selectedAccounts = [];\n  name = '';\n  context = injectContext();\n  get accounts$() {\n    return this.context.data;\n  }\n  submit() {\n    if (!_.isEmpty(this.selectedAccounts) && !_.isEmpty(this.name)) {\n      const resultRoom = {\n        name: this.name,\n        userIds: _.map(this.selectedAccounts, x => x.id),\n        createdAt: formatDate(new Date(), 'yyyy-MM-ddTHH:mm:ss', 'en-US')\n      };\n      this.context.completeWith(resultRoom);\n    }\n  }\n};\nCreateRoomComponent = __decorate([Component({\n  selector: 'app-create-room',\n  standalone: true,\n  imports: [AsyncPipe, FormsModule, TuiAutoFocus, TuiButton, NgIf, TuiDataListWrapper, TuiDataList, TuiInputModule, TuiSelectModule, TuiSelect, TuiSlider, TuiTextfield, TuiMultiSelectModule, TuiTextfieldControllerModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], CreateRoomComponent);\nexport { CreateRoomComponent };","map":{"version":3,"names":["AsyncPipe","formatDate","NgIf","Component","FormsModule","TuiAutoFocus","TuiButton","TuiDataList","TuiSelect","TuiTextfield","TuiDataListWrapper","TuiSlider","TuiInputModule","TuiSelectModule","TuiMultiSelectModule","TuiTextfieldControllerModule","injectContext","_","AccountListItem","id","name","surname","login","email","constructor","accountDto","toString","CreateRoomComponent","search","selectedAccounts","context","accounts$","data","submit","isEmpty","resultRoom","userIds","map","x","createdAt","Date","completeWith","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\components\\create-room\\create-room.component.ts"],"sourcesContent":["import { AsyncPipe, formatDate, NgIf } from '@angular/common';\r\nimport type { TemplateRef } from '@angular/core';\r\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\r\nimport { FormControl, FormsModule } from '@angular/forms';\r\nimport { TuiAutoFocus, tuiPure } from '@taiga-ui/cdk';\r\nimport type { TuiDialogContext } from '@taiga-ui/core';\r\nimport { TuiButton, TuiDataList, TuiDialogService, TuiRoot, TuiSelect, TuiTextfield } from '@taiga-ui/core';\r\nimport { TuiDataListWrapper, TuiSlider } from '@taiga-ui/kit';\r\nimport {\r\n  TuiInputModule,\r\n  TuiSelectModule,\r\n  TuiMultiSelectModule,\r\n  TuiTextfieldControllerModule,\r\n} from '@taiga-ui/legacy';\r\nimport { injectContext } from '@taiga-ui/polymorpheus';\r\nimport { Observable } from 'rxjs';\r\nimport { AccountDTO, RoomDTO } from '../../services/messages/room-service.service';\r\nimport _ from 'lodash';\r\n\r\nexport class AccountListItem implements AccountDTO{\r\n  id!: number;\r\n  name!: string;\r\n  surname!: string;\r\n  login!: string;\r\n  email: string;\r\n  constructor(accountDto: AccountDTO){\r\n    this.id = accountDto.id;\r\n    this.name = accountDto.name;\r\n    this.surname = accountDto.surname;\r\n    this.login = accountDto.login;\r\n    this.email = accountDto.email;\r\n  }\r\n\r\n  toString(): string{\r\n    return `${this.surname} ${this.surname}`;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-create-room',\r\n  standalone: true,\r\n  imports: [\r\n    AsyncPipe,\r\n    FormsModule,\r\n    TuiAutoFocus,\r\n    TuiButton,\r\n    NgIf,\r\n    TuiDataListWrapper,\r\n    TuiDataList,\r\n    TuiInputModule,\r\n    TuiSelectModule,\r\n    TuiSelect,\r\n    TuiSlider,\r\n    TuiTextfield,\r\n    TuiMultiSelectModule,\r\n    TuiTextfieldControllerModule,\r\n  ],\r\n  templateUrl: './create-room.component.html',\r\n  styleUrl: './create-room.component.scss',\r\n})\r\nexport class CreateRoomComponent {\r\n  search: string | null = '';\r\n\r\n  selectedAccounts: AccountDTO[] = [];\r\n  \r\n  protected name = '';\r\n\r\n  public readonly context =\r\n    injectContext<TuiDialogContext<RoomDTO, Observable<AccountListItem[]>>>();\r\n\r\n\r\n  protected get accounts$(): Observable<AccountListItem[]> {\r\n    return this.context.data;\r\n  }\r\n\r\n  protected submit(): void {\r\n    if (!_.isEmpty(this.selectedAccounts) && !_.isEmpty(this.name)) {\r\n      const resultRoom: RoomDTO = {\r\n        name: this.name,\r\n        userIds: _.map(this.selectedAccounts, x => x.id),\r\n        createdAt: formatDate(new Date(), 'yyyy-MM-ddTHH:mm:ss', 'en-US'),\r\n      };\r\n      this.context.completeWith(resultRoom);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,IAAI,QAAQ,iBAAiB;AAE7D,SAAkCC,SAAS,QAAgB,eAAe;AAC1E,SAAsBC,WAAW,QAAQ,gBAAgB;AACzD,SAASC,YAAY,QAAiB,eAAe;AAErD,SAASC,SAAS,EAAEC,WAAW,EAA6BC,SAAS,EAAEC,YAAY,QAAQ,gBAAgB;AAC3G,SAASC,kBAAkB,EAAEC,SAAS,QAAQ,eAAe;AAC7D,SACEC,cAAc,EACdC,eAAe,EACfC,oBAAoB,EACpBC,4BAA4B,QACvB,kBAAkB;AACzB,SAASC,aAAa,QAAQ,wBAAwB;AAGtD,OAAOC,CAAC,MAAM,QAAQ;AAEtB,OAAM,MAAOC,eAAe;EAC1BC,EAAE;EACFC,IAAI;EACJC,OAAO;EACPC,KAAK;EACLC,KAAK;EACLC,YAAYC,UAAsB;IAChC,IAAI,CAACN,EAAE,GAAGM,UAAU,CAACN,EAAE;IACvB,IAAI,CAACC,IAAI,GAAGK,UAAU,CAACL,IAAI;IAC3B,IAAI,CAACC,OAAO,GAAGI,UAAU,CAACJ,OAAO;IACjC,IAAI,CAACC,KAAK,GAAGG,UAAU,CAACH,KAAK;IAC7B,IAAI,CAACC,KAAK,GAAGE,UAAU,CAACF,KAAK;EAC/B;EAEAG,QAAQA,CAAA;IACN,OAAO,GAAG,IAAI,CAACL,OAAO,IAAI,IAAI,CAACA,OAAO,EAAE;EAC1C;;AAyBK,IAAMM,mBAAmB,GAAzB,MAAMA,mBAAmB;EAC9BC,MAAM,GAAkB,EAAE;EAE1BC,gBAAgB,GAAiB,EAAE;EAEzBT,IAAI,GAAG,EAAE;EAEHU,OAAO,GACrBd,aAAa,EAA4D;EAG3E,IAAce,SAASA,CAAA;IACrB,OAAO,IAAI,CAACD,OAAO,CAACE,IAAI;EAC1B;EAEUC,MAAMA,CAAA;IACd,IAAI,CAAChB,CAAC,CAACiB,OAAO,CAAC,IAAI,CAACL,gBAAgB,CAAC,IAAI,CAACZ,CAAC,CAACiB,OAAO,CAAC,IAAI,CAACd,IAAI,CAAC,EAAE;MAC9D,MAAMe,UAAU,GAAY;QAC1Bf,IAAI,EAAE,IAAI,CAACA,IAAI;QACfgB,OAAO,EAAEnB,CAAC,CAACoB,GAAG,CAAC,IAAI,CAACR,gBAAgB,EAAES,CAAC,IAAIA,CAAC,CAACnB,EAAE,CAAC;QAChDoB,SAAS,EAAEtC,UAAU,CAAC,IAAIuC,IAAI,EAAE,EAAE,qBAAqB,EAAE,OAAO;OACjE;MACD,IAAI,CAACV,OAAO,CAACW,YAAY,CAACN,UAAU,CAAC;IACvC;EACF;CACD;AAzBYR,mBAAmB,GAAAe,UAAA,EAtB/BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,iBAAiB;EAC3BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACP7C,SAAS,EACTI,WAAW,EACXC,YAAY,EACZC,SAAS,EACTJ,IAAI,EACJQ,kBAAkB,EAClBH,WAAW,EACXK,cAAc,EACdC,eAAe,EACfL,SAAS,EACTG,SAAS,EACTF,YAAY,EACZK,oBAAoB,EACpBC,4BAA4B,CAC7B;EACD+B,QAAA,EAAAC,oBAA2C;;CAE5C,CAAC,C,EACWpB,mBAAmB,CAyB/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}