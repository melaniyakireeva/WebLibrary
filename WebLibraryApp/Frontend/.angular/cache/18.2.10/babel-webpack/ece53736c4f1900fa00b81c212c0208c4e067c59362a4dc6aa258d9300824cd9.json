{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, inject, DestroyRef, ChangeDetectorRef, TemplateRef, ViewChild } from '@angular/core';\nimport { tuiInjectId } from '@taiga-ui/cdk/services';\nimport { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';\nimport { TuiDataListDirective } from '@taiga-ui/core/components/data-list';\nimport { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';\nimport { TUI_TEXTFIELD_HOST } from '@taiga-ui/legacy/tokens';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { NgControl, NgModel } from '@angular/forms';\nimport { TuiValueTransformer, TuiControl } from '@taiga-ui/cdk/classes';\nimport { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';\nimport { tuiIsPresent, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { Subject, delay, startWith, map, filter, distinctUntilChanged, switchMap, merge, EMPTY } from 'rxjs';\nconst TUI = 'tui_interactive_';\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiInteractive {\n  constructor() {\n    this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;\n    this.focusVisible = false;\n    this.pseudoHover = null;\n    this.pseudoActive = null;\n    this.pseudoFocus = null;\n    /**\n     * Determines if component is focusable with keyboard.\n     */\n    this.focusable = true;\n    this.nativeId = '';\n    /**\n     * Emits 'true' on focus and 'false' on blur.\n     */\n    this.focusedChange = new EventEmitter();\n    this.focusVisibleChange = new EventEmitter();\n  }\n  static {\n    this.autoId = 0;\n  }\n  get computedDisabled() {\n    return this.disabled;\n  }\n  get computedFocused() {\n    return !this.computedDisabled && (this.pseudoFocus ?? this.focused);\n  }\n  get computedFocusVisible() {\n    return !this.computedDisabled && (this.pseudoFocus ?? this.focusVisible);\n  }\n  get computedFocusable() {\n    return !this.computedDisabled && (this.focusable || this.focused);\n  }\n  // TODO: 3.0 Consider removing since native input is exposed\n  get id() {\n    return this.nativeId || this.autoIdString;\n  }\n  updateFocused(focused) {\n    this.focusedChange.emit(focused);\n  }\n  updateFocusVisible(focusVisible) {\n    if (this.focusVisible === focusVisible) {\n      return;\n    }\n    this.focusVisible = focusVisible;\n    this.focusVisibleChange.emit(focusVisible);\n  }\n  static {\n    this.ɵfac = function AbstractTuiInteractive_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AbstractTuiInteractive)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiInteractive,\n      hostVars: 7,\n      hostBindings: function AbstractTuiInteractive_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"data-focused\", ctx.pseudoFocus);\n          i0.ɵɵclassProp(\"_disabled\", ctx.computedDisabled)(\"_focused\", ctx.computedFocused)(\"_focus-visible\", ctx.computedFocusVisible);\n        }\n      },\n      inputs: {\n        pseudoHover: \"pseudoHover\",\n        pseudoActive: \"pseudoActive\",\n        pseudoFocus: \"pseudoFocus\",\n        focusable: \"focusable\",\n        nativeId: \"nativeId\"\n      },\n      outputs: {\n        focusedChange: \"focusedChange\",\n        focusVisibleChange: \"focusVisibleChange\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiInteractive, [{\n    type: Directive,\n    args: [{\n      standalone: false,\n      host: {\n        '[attr.data-focused]': 'pseudoFocus',\n        '[class._disabled]': 'computedDisabled',\n        '[class._focused]': 'computedFocused',\n        '[class._focus-visible]': 'computedFocusVisible'\n      }\n    }]\n  }], null, {\n    pseudoHover: [{\n      type: Input\n    }],\n    pseudoActive: [{\n      type: Input\n    }],\n    pseudoFocus: [{\n      type: Input\n    }],\n    focusable: [{\n      type: Input\n    }],\n    nativeId: [{\n      type: Input\n    }],\n    focusedChange: [{\n      type: Output\n    }],\n    focusVisibleChange: [{\n      type: Output\n    }]\n  });\n})();\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * @deprecated: drop in v5.0\n * Basic ControlValueAccessor class to build form components upon\n */\nclass AbstractTuiControl extends AbstractTuiInteractive {\n  constructor() {\n    super();\n    this.ngControl = inject(NgControl, {\n      optional: true\n    });\n    this.refresh$ = new Subject();\n    this.onTouched = EMPTY_FUNCTION;\n    this.onChange = EMPTY_FUNCTION;\n    this.fallbackValue = this.getFallbackValue();\n    this.destroyRef = inject(DestroyRef);\n    this.cdr = inject(ChangeDetectorRef);\n    this.valueTransformer = inject(TuiValueTransformer, {\n      optional: true\n    });\n    this.readOnly = false;\n    this.pseudoInvalid = null;\n    if (ngDevMode && this.ngControl === null) {\n      console.assert(false, `NgControl not injected in ${this.constructor.name}!\\n`, 'Use [(ngModel)] or [formControl] or formControlName for correct work.');\n    }\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  get computedInvalid() {\n    return this.interactive && (this.pseudoInvalid !== null ? this.pseudoInvalid : this.touched && this.invalid);\n  }\n  get value() {\n    return this.previousInternalValue ?? this.fallbackValue;\n  }\n  set value(value) {\n    this.updateValue(value);\n  }\n  get safeCurrentValue() {\n    return this.rawValue ?? this.fallbackValue;\n  }\n  get invalid() {\n    return this.safeNgControlData(({\n      invalid\n    }) => invalid, false);\n  }\n  get valid() {\n    return this.safeNgControlData(({\n      valid\n    }) => valid, false);\n  }\n  get touched() {\n    return this.safeNgControlData(({\n      touched\n    }) => touched, false);\n  }\n  get disabled() {\n    return this.safeNgControlData(({\n      disabled\n    }) => disabled, false);\n  }\n  get interactive() {\n    return !this.readOnly && !this.computedDisabled;\n  }\n  get control() {\n    return this.safeNgControlData(({\n      control\n    }) => control, null);\n  }\n  get computedName() {\n    return this.controlName?.toString() ?? null;\n  }\n  get controlName() {\n    return this.ngControl?.name?.toString() ?? null;\n  }\n  ngOnInit() {\n    this.refresh$.pipe(delay(0), startWith(null), map(() => this.ngControl?.control), filter(tuiIsPresent), distinctUntilChanged(), switchMap(control => merge(control.valueChanges, control.statusChanges, control.events || EMPTY)), takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n      this.refreshLocalValue(this.safeCurrentValue);\n    });\n  }\n  checkControlUpdate() {\n    this.cdr.markForCheck();\n  }\n  registerOnChange(onChange) {\n    this.onChange = componentValue => {\n      onChange(this.toControlValue(componentValue));\n    };\n    this.refresh$.next();\n  }\n  registerOnTouched(onTouched) {\n    this.onTouched = onTouched;\n  }\n  setDisabledState() {\n    this.checkControlUpdate();\n  }\n  writeValue(value) {\n    const controlValue = this.ngControl instanceof NgModel && this.previousInternalValue === undefined ? this.ngControl.model : value;\n    this.refreshLocalValue(this.fromControlValue(controlValue));\n  }\n  updateFocused(focused) {\n    if (!focused) {\n      this.controlMarkAsTouched();\n    }\n    super.updateFocused(focused);\n  }\n  /**\n   * @deprecated use `value` setter\n   */\n  updateValue(value) {\n    if (this.disabled || this.valueIdenticalComparator(this.value, value)) {\n      return;\n    }\n    this.previousInternalValue = value;\n    this.controlSetValue(value);\n  }\n  valueIdenticalComparator(oldValue, newValue) {\n    return oldValue === newValue;\n  }\n  get rawValue() {\n    const {\n      ngControl\n    } = this;\n    if (ngControl === null) {\n      return undefined;\n    }\n    const controlValue = ngControl instanceof NgModel && this.previousInternalValue === undefined ? ngControl.viewModel : ngControl.value;\n    return this.fromControlValue(controlValue);\n  }\n  safeNgControlData(extractor, defaultFieldValue) {\n    return (this.ngControl && extractor(this.ngControl)) ?? defaultFieldValue;\n  }\n  controlMarkAsTouched() {\n    this.onTouched();\n    this.checkControlUpdate();\n  }\n  controlSetValue(value) {\n    this.onChange(value);\n    this.checkControlUpdate();\n  }\n  refreshLocalValue(value) {\n    this.previousInternalValue = value;\n    this.checkControlUpdate();\n  }\n  fromControlValue(controlValue) {\n    return this.valueTransformer ? this.valueTransformer.fromControlValue(controlValue) : controlValue;\n  }\n  toControlValue(componentValue) {\n    return this.valueTransformer ? this.valueTransformer.toControlValue(componentValue) : componentValue;\n  }\n  static {\n    this.ɵfac = function AbstractTuiControl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AbstractTuiControl)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiControl,\n      hostVars: 4,\n      hostBindings: function AbstractTuiControl_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"_readonly\", ctx.readOnly)(\"_invalid\", ctx.computedInvalid);\n        }\n      },\n      inputs: {\n        readOnly: \"readOnly\",\n        pseudoInvalid: \"pseudoInvalid\"\n      },\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiControl, [{\n    type: Directive,\n    args: [{\n      standalone: false,\n      host: {\n        '[class._readonly]': 'readOnly',\n        '[class._invalid]': 'computedInvalid'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    readOnly: [{\n      type: Input\n    }],\n    pseudoInvalid: [{\n      type: Input\n    }]\n  });\n})();\nfunction tuiAsControl(control) {\n  return [tuiProvide(AbstractTuiControl, control), tuiProvide(TuiControl, control)];\n}\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiNativeSelect {\n  constructor() {\n    this.datalist = null;\n    this.autoId = tuiInjectId();\n    this.el = tuiInjectElement();\n    this.host = inject(TUI_TEXTFIELD_HOST);\n    this.control = inject(AbstractTuiControl);\n    this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);\n    this.disabledItemHandler = null;\n    this.placeholder = '';\n  }\n  get id() {\n    return this.el.id || this.autoId;\n  }\n  get emptyOption() {\n    return !!this.placeholder && !this.control.value;\n  }\n  static {\n    this.ɵfac = function AbstractTuiNativeSelect_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AbstractTuiNativeSelect)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiNativeSelect,\n      viewQuery: function AbstractTuiNativeSelect_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TuiDataListDirective, 7, TemplateRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datalist = _t.first);\n        }\n      },\n      hostVars: 1,\n      hostBindings: function AbstractTuiNativeSelect_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n        }\n      },\n      inputs: {\n        disabledItemHandler: \"disabledItemHandler\",\n        placeholder: \"placeholder\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiNativeSelect, [{\n    type: Directive,\n    args: [{\n      standalone: false,\n      host: {\n        '[id]': 'id'\n      }\n    }]\n  }], null, {\n    datalist: [{\n      type: ViewChild,\n      args: [TuiDataListDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    disabledItemHandler: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiTextfieldHost {\n  constructor() {\n    this.host = inject(AbstractTuiControl, {\n      optional: true\n    });\n  }\n  get readOnly() {\n    return this.host.readOnly;\n  }\n  get disabled() {\n    return this.host.computedDisabled;\n  }\n  get invalid() {\n    return this.host.computedInvalid;\n  }\n  get focusable() {\n    return this.host.computedFocusable;\n  }\n  get inputMode() {\n    return 'text';\n  }\n  get value() {\n    return this.host.value?.toString() || '';\n  }\n  process(_input) {}\n  static {\n    this.ɵfac = function AbstractTuiTextfieldHost_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AbstractTuiTextfieldHost)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiTextfieldHost\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiTextfieldHost, [{\n    type: Directive\n  }], null, null);\n})();\nclass AbstractTuiController {\n  constructor() {\n    this.change$ = new Subject();\n  }\n  ngOnChanges() {\n    this.change$.next();\n  }\n  static {\n    this.ɵfac = function AbstractTuiController_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AbstractTuiController)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiController,\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiController, [{\n    type: Directive\n  }], null, null);\n})();\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiMultipleControl extends AbstractTuiControl {\n  clear() {\n    this.value = [];\n  }\n  getFallbackValue() {\n    return [];\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵAbstractTuiMultipleControl_BaseFactory;\n      return function AbstractTuiMultipleControl_Factory(__ngFactoryType__) {\n        return (ɵAbstractTuiMultipleControl_BaseFactory || (ɵAbstractTuiMultipleControl_BaseFactory = i0.ɵɵgetInheritedFactory(AbstractTuiMultipleControl)))(__ngFactoryType__ || AbstractTuiMultipleControl);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiMultipleControl,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiMultipleControl, [{\n    type: Directive\n  }], null, null);\n})();\n\n/**\n * @deprecated: drop in v5.0\n */\nclass TuiNamedDay {\n  constructor(day, name, displayDay = day) {\n    this.day = day;\n    this.name = name;\n    this.displayDay = displayDay;\n  }\n  toString() {\n    return this.name;\n  }\n}\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiNullableControl extends AbstractTuiControl {\n  getFallbackValue() {\n    return null;\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵAbstractTuiNullableControl_BaseFactory;\n      return function AbstractTuiNullableControl_Factory(__ngFactoryType__) {\n        return (ɵAbstractTuiNullableControl_BaseFactory || (ɵAbstractTuiNullableControl_BaseFactory = i0.ɵɵgetInheritedFactory(AbstractTuiNullableControl)))(__ngFactoryType__ || AbstractTuiNullableControl);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractTuiNullableControl,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiNullableControl, [{\n    type: Directive\n  }], null, null);\n})();\n\n/**\n * @deprecated: drop in v5.0\n * Wrapper around an item to add `toString()` method\n */\nclass TuiStringifiableItem {\n  constructor(item, stringify) {\n    this.item = item;\n    this.stringify = stringify;\n  }\n  toString() {\n    return this.stringify(this.item);\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTuiControl, AbstractTuiController, AbstractTuiInteractive, AbstractTuiMultipleControl, AbstractTuiNativeSelect, AbstractTuiNullableControl, AbstractTuiTextfieldHost, TuiNamedDay, TuiStringifiableItem, tuiAsControl };","map":{"version":3,"names":["i0","EventEmitter","Directive","Input","Output","inject","DestroyRef","ChangeDetectorRef","TemplateRef","ViewChild","tuiInjectId","tuiInjectElement","TuiDataListDirective","TUI_ITEMS_HANDLERS","TUI_TEXTFIELD_HOST","takeUntilDestroyed","NgControl","NgModel","TuiValueTransformer","TuiControl","EMPTY_FUNCTION","tuiIsPresent","tuiProvide","Subject","delay","startWith","map","filter","distinctUntilChanged","switchMap","merge","EMPTY","TUI","AbstractTuiInteractive","constructor","autoIdString","autoId","Date","now","focusVisible","pseudoHover","pseudoActive","pseudoFocus","focusable","nativeId","focusedChange","focusVisibleChange","computedDisabled","disabled","computedFocused","focused","computedFocusVisible","computedFocusable","id","updateFocused","emit","updateFocusVisible","ɵfac","AbstractTuiInteractive_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","hostVars","hostBindings","AbstractTuiInteractive_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","inputs","outputs","ngDevMode","ɵsetClassMetadata","args","standalone","host","AbstractTuiControl","ngControl","optional","refresh$","onTouched","onChange","fallbackValue","getFallbackValue","destroyRef","cdr","valueTransformer","readOnly","pseudoInvalid","console","assert","name","valueAccessor","computedInvalid","interactive","touched","invalid","value","previousInternalValue","updateValue","safeCurrentValue","rawValue","safeNgControlData","valid","control","computedName","controlName","toString","ngOnInit","pipe","valueChanges","statusChanges","events","subscribe","refreshLocalValue","checkControlUpdate","markForCheck","registerOnChange","componentValue","toControlValue","next","registerOnTouched","setDisabledState","writeValue","controlValue","undefined","model","fromControlValue","controlMarkAsTouched","valueIdenticalComparator","controlSetValue","oldValue","newValue","viewModel","extractor","defaultFieldValue","AbstractTuiControl_Factory","AbstractTuiControl_HostBindings","features","ɵɵInheritDefinitionFeature","tuiAsControl","AbstractTuiNativeSelect","datalist","el","itemsHandlers","disabledItemHandler","placeholder","emptyOption","AbstractTuiNativeSelect_Factory","viewQuery","AbstractTuiNativeSelect_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","AbstractTuiNativeSelect_HostBindings","ɵɵhostProperty","read","static","AbstractTuiTextfieldHost","inputMode","process","_input","AbstractTuiTextfieldHost_Factory","AbstractTuiController","change$","ngOnChanges","AbstractTuiController_Factory","ɵɵNgOnChangesFeature","AbstractTuiMultipleControl","clear","ɵAbstractTuiMultipleControl_BaseFactory","AbstractTuiMultipleControl_Factory","ɵɵgetInheritedFactory","TuiNamedDay","day","displayDay","AbstractTuiNullableControl","ɵAbstractTuiNullableControl_BaseFactory","AbstractTuiNullableControl_Factory","TuiStringifiableItem","item","stringify"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@taiga-ui/legacy/fesm2022/taiga-ui-legacy-classes.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, inject, DestroyRef, ChangeDetectorRef, TemplateRef, ViewChild } from '@angular/core';\nimport { tuiInjectId } from '@taiga-ui/cdk/services';\nimport { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';\nimport { TuiDataListDirective } from '@taiga-ui/core/components/data-list';\nimport { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';\nimport { TUI_TEXTFIELD_HOST } from '@taiga-ui/legacy/tokens';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { NgControl, NgModel } from '@angular/forms';\nimport { TuiValueTransformer, TuiControl } from '@taiga-ui/cdk/classes';\nimport { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';\nimport { tuiIsPresent, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { Subject, delay, startWith, map, filter, distinctUntilChanged, switchMap, merge, EMPTY } from 'rxjs';\n\nconst TUI = 'tui_interactive_';\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiInteractive {\n    constructor() {\n        this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;\n        this.focusVisible = false;\n        this.pseudoHover = null;\n        this.pseudoActive = null;\n        this.pseudoFocus = null;\n        /**\n         * Determines if component is focusable with keyboard.\n         */\n        this.focusable = true;\n        this.nativeId = '';\n        /**\n         * Emits 'true' on focus and 'false' on blur.\n         */\n        this.focusedChange = new EventEmitter();\n        this.focusVisibleChange = new EventEmitter();\n    }\n    static { this.autoId = 0; }\n    get computedDisabled() {\n        return this.disabled;\n    }\n    get computedFocused() {\n        return !this.computedDisabled && (this.pseudoFocus ?? this.focused);\n    }\n    get computedFocusVisible() {\n        return !this.computedDisabled && (this.pseudoFocus ?? this.focusVisible);\n    }\n    get computedFocusable() {\n        return !this.computedDisabled && (this.focusable || this.focused);\n    }\n    // TODO: 3.0 Consider removing since native input is exposed\n    get id() {\n        return this.nativeId || this.autoIdString;\n    }\n    updateFocused(focused) {\n        this.focusedChange.emit(focused);\n    }\n    updateFocusVisible(focusVisible) {\n        if (this.focusVisible === focusVisible) {\n            return;\n        }\n        this.focusVisible = focusVisible;\n        this.focusVisibleChange.emit(focusVisible);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiInteractive, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiInteractive, inputs: { pseudoHover: \"pseudoHover\", pseudoActive: \"pseudoActive\", pseudoFocus: \"pseudoFocus\", focusable: \"focusable\", nativeId: \"nativeId\" }, outputs: { focusedChange: \"focusedChange\", focusVisibleChange: \"focusVisibleChange\" }, host: { properties: { \"attr.data-focused\": \"pseudoFocus\", \"class._disabled\": \"computedDisabled\", \"class._focused\": \"computedFocused\", \"class._focus-visible\": \"computedFocusVisible\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiInteractive, decorators: [{\n            type: Directive,\n            args: [{\n                    standalone: false,\n                    host: {\n                        '[attr.data-focused]': 'pseudoFocus',\n                        '[class._disabled]': 'computedDisabled',\n                        '[class._focused]': 'computedFocused',\n                        '[class._focus-visible]': 'computedFocusVisible',\n                    },\n                }]\n        }], propDecorators: { pseudoHover: [{\n                type: Input\n            }], pseudoActive: [{\n                type: Input\n            }], pseudoFocus: [{\n                type: Input\n            }], focusable: [{\n                type: Input\n            }], nativeId: [{\n                type: Input\n            }], focusedChange: [{\n                type: Output\n            }], focusVisibleChange: [{\n                type: Output\n            }] } });\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * @deprecated: drop in v5.0\n * Basic ControlValueAccessor class to build form components upon\n */\nclass AbstractTuiControl extends AbstractTuiInteractive {\n    constructor() {\n        super();\n        this.ngControl = inject(NgControl, { optional: true });\n        this.refresh$ = new Subject();\n        this.onTouched = EMPTY_FUNCTION;\n        this.onChange = EMPTY_FUNCTION;\n        this.fallbackValue = this.getFallbackValue();\n        this.destroyRef = inject(DestroyRef);\n        this.cdr = inject(ChangeDetectorRef);\n        this.valueTransformer = inject(TuiValueTransformer, { optional: true });\n        this.readOnly = false;\n        this.pseudoInvalid = null;\n        if (ngDevMode && this.ngControl === null) {\n            console.assert(false, `NgControl not injected in ${this.constructor.name}!\\n`, 'Use [(ngModel)] or [formControl] or formControlName for correct work.');\n        }\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    get computedInvalid() {\n        return (this.interactive &&\n            (this.pseudoInvalid !== null\n                ? this.pseudoInvalid\n                : this.touched && this.invalid));\n    }\n    get value() {\n        return this.previousInternalValue ?? this.fallbackValue;\n    }\n    set value(value) {\n        this.updateValue(value);\n    }\n    get safeCurrentValue() {\n        return this.rawValue ?? this.fallbackValue;\n    }\n    get invalid() {\n        return this.safeNgControlData(({ invalid }) => invalid, false);\n    }\n    get valid() {\n        return this.safeNgControlData(({ valid }) => valid, false);\n    }\n    get touched() {\n        return this.safeNgControlData(({ touched }) => touched, false);\n    }\n    get disabled() {\n        return this.safeNgControlData(({ disabled }) => disabled, false);\n    }\n    get interactive() {\n        return !this.readOnly && !this.computedDisabled;\n    }\n    get control() {\n        return this.safeNgControlData(({ control }) => control, null);\n    }\n    get computedName() {\n        return this.controlName?.toString() ?? null;\n    }\n    get controlName() {\n        return this.ngControl?.name?.toString() ?? null;\n    }\n    ngOnInit() {\n        this.refresh$\n            .pipe(delay(0), startWith(null), map(() => this.ngControl?.control), filter(tuiIsPresent), distinctUntilChanged(), switchMap((control) => merge(control.valueChanges, control.statusChanges, control.events || EMPTY)), takeUntilDestroyed(this.destroyRef))\n            .subscribe(() => {\n            this.refreshLocalValue(this.safeCurrentValue);\n        });\n    }\n    checkControlUpdate() {\n        this.cdr.markForCheck();\n    }\n    registerOnChange(onChange) {\n        this.onChange = (componentValue) => {\n            onChange(this.toControlValue(componentValue));\n        };\n        this.refresh$.next();\n    }\n    registerOnTouched(onTouched) {\n        this.onTouched = onTouched;\n    }\n    setDisabledState() {\n        this.checkControlUpdate();\n    }\n    writeValue(value) {\n        const controlValue = this.ngControl instanceof NgModel && this.previousInternalValue === undefined\n            ? this.ngControl.model\n            : value;\n        this.refreshLocalValue(this.fromControlValue(controlValue));\n    }\n    updateFocused(focused) {\n        if (!focused) {\n            this.controlMarkAsTouched();\n        }\n        super.updateFocused(focused);\n    }\n    /**\n     * @deprecated use `value` setter\n     */\n    updateValue(value) {\n        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {\n            return;\n        }\n        this.previousInternalValue = value;\n        this.controlSetValue(value);\n    }\n    valueIdenticalComparator(oldValue, newValue) {\n        return oldValue === newValue;\n    }\n    get rawValue() {\n        const { ngControl } = this;\n        if (ngControl === null) {\n            return undefined;\n        }\n        const controlValue = ngControl instanceof NgModel && this.previousInternalValue === undefined\n            ? ngControl.viewModel\n            : ngControl.value;\n        return this.fromControlValue(controlValue);\n    }\n    safeNgControlData(extractor, defaultFieldValue) {\n        return (this.ngControl && extractor(this.ngControl)) ?? defaultFieldValue;\n    }\n    controlMarkAsTouched() {\n        this.onTouched();\n        this.checkControlUpdate();\n    }\n    controlSetValue(value) {\n        this.onChange(value);\n        this.checkControlUpdate();\n    }\n    refreshLocalValue(value) {\n        this.previousInternalValue = value;\n        this.checkControlUpdate();\n    }\n    fromControlValue(controlValue) {\n        return this.valueTransformer\n            ? this.valueTransformer.fromControlValue(controlValue)\n            : controlValue;\n    }\n    toControlValue(componentValue) {\n        return this.valueTransformer\n            ? this.valueTransformer.toControlValue(componentValue)\n            : componentValue;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiControl, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiControl, inputs: { readOnly: \"readOnly\", pseudoInvalid: \"pseudoInvalid\" }, host: { properties: { \"class._readonly\": \"readOnly\", \"class._invalid\": \"computedInvalid\" } }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiControl, decorators: [{\n            type: Directive,\n            args: [{\n                    standalone: false,\n                    host: {\n                        '[class._readonly]': 'readOnly',\n                        '[class._invalid]': 'computedInvalid',\n                    },\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { readOnly: [{\n                type: Input\n            }], pseudoInvalid: [{\n                type: Input\n            }] } });\nfunction tuiAsControl(control) {\n    return [tuiProvide(AbstractTuiControl, control), tuiProvide(TuiControl, control)];\n}\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiNativeSelect {\n    constructor() {\n        this.datalist = null;\n        this.autoId = tuiInjectId();\n        this.el = tuiInjectElement();\n        this.host = inject(TUI_TEXTFIELD_HOST);\n        this.control = inject(AbstractTuiControl);\n        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);\n        this.disabledItemHandler = null;\n        this.placeholder = '';\n    }\n    get id() {\n        return this.el.id || this.autoId;\n    }\n    get emptyOption() {\n        return !!this.placeholder && !this.control.value;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiNativeSelect, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiNativeSelect, inputs: { disabledItemHandler: \"disabledItemHandler\", placeholder: \"placeholder\" }, host: { properties: { \"id\": \"id\" } }, viewQueries: [{ propertyName: \"datalist\", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiNativeSelect, decorators: [{\n            type: Directive,\n            args: [{\n                    standalone: false,\n                    host: {\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { datalist: [{\n                type: ViewChild,\n                args: [TuiDataListDirective, { read: TemplateRef, static: true }]\n            }], disabledItemHandler: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiTextfieldHost {\n    constructor() {\n        this.host = inject(AbstractTuiControl, { optional: true });\n    }\n    get readOnly() {\n        return this.host.readOnly;\n    }\n    get disabled() {\n        return this.host.computedDisabled;\n    }\n    get invalid() {\n        return this.host.computedInvalid;\n    }\n    get focusable() {\n        return this.host.computedFocusable;\n    }\n    get inputMode() {\n        return 'text';\n    }\n    get value() {\n        return this.host.value?.toString() || '';\n    }\n    process(_input) { }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiTextfieldHost, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiTextfieldHost, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiTextfieldHost, decorators: [{\n            type: Directive\n        }] });\n\nclass AbstractTuiController {\n    constructor() {\n        this.change$ = new Subject();\n    }\n    ngOnChanges() {\n        this.change$.next();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiController, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiController, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiController, decorators: [{\n            type: Directive\n        }] });\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiMultipleControl extends AbstractTuiControl {\n    clear() {\n        this.value = [];\n    }\n    getFallbackValue() {\n        return [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiMultipleControl, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiMultipleControl, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiMultipleControl, decorators: [{\n            type: Directive\n        }] });\n\n/**\n * @deprecated: drop in v5.0\n */\nclass TuiNamedDay {\n    constructor(day, name, displayDay = day) {\n        this.day = day;\n        this.name = name;\n        this.displayDay = displayDay;\n    }\n    toString() {\n        return this.name;\n    }\n}\n\n/**\n * @deprecated: drop in v5.0\n */\nclass AbstractTuiNullableControl extends AbstractTuiControl {\n    getFallbackValue() {\n        return null;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiNullableControl, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractTuiNullableControl, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractTuiNullableControl, decorators: [{\n            type: Directive\n        }] });\n\n/**\n * @deprecated: drop in v5.0\n * Wrapper around an item to add `toString()` method\n */\nclass TuiStringifiableItem {\n    constructor(item, stringify) {\n        this.item = item;\n        this.stringify = stringify;\n    }\n    toString() {\n        return this.stringify(this.item);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTuiControl, AbstractTuiController, AbstractTuiInteractive, AbstractTuiMultipleControl, AbstractTuiNativeSelect, AbstractTuiNullableControl, AbstractTuiTextfieldHost, TuiNamedDay, TuiStringifiableItem, tuiAsControl };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}