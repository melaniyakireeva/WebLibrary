{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, Pipe } from '@angular/core';\nimport { CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { TUI_COUNTRIES_MASKS } from '@taiga-ui/legacy/tokens';\nimport { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion } from '@taiga-ui/legacy/utils';\n\n/**\n * @deprecated: drop in v5.0\n * use `maskitoGetCountryFromNumber` from `@maskito/phone` instead\n * ```\n * npm i @maskito/phone\n * ```\n *\n * ```ts\n * import {maskitoGetCountryFromNumber} from '@maskito/phone';\n * import metadata from 'libphonenumber-js/min/metadata';\n *\n * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'\n * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'\n * ```\n */\nclass TuiToCountryCodePipe {\n  constructor() {\n    this.countriesMasks = inject(TUI_COUNTRIES_MASKS);\n  }\n  /**\n   * @deprecated use `maskitoGetCountryFromNumber` from `@maskito/phone` instead\n   * ```\n   * npm i @maskito/phone\n   * ```\n   *\n   * ```ts\n   * import {maskitoGetCountryFromNumber} from '@maskito/phone';\n   * import metadata from 'libphonenumber-js/min/metadata';\n   *\n   * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'\n   * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'\n   * ```\n   */\n  transform(value, countries) {\n    return countries.find(countryIsoCode => {\n      const ruCodeTest = countryIsoCode === 'RU' && /^[78]/.test(value) && /^(?!880[1-9 ])/.test(value) && value.length + 1 === tuiGetMaxAllowedPhoneLength(this.countriesMasks, 'RU');\n      const matched = ruCodeTest || value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, '')) && value.length + 1 === tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode);\n      if (matched) {\n        switch (countryIsoCode) {\n          case 'KZ':\n            return !tuiNotKzRegion(value);\n          case 'RU':\n            return tuiNotKzRegion(value);\n          default:\n            return true;\n        }\n      }\n      return false;\n    });\n  }\n  static {\n    this.ɵfac = function TuiToCountryCodePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiToCountryCodePipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"tuiToCountryCode\",\n      type: TuiToCountryCodePipe,\n      pure: true,\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiToCountryCodePipe, [{\n    type: Pipe,\n    args: [{\n      standalone: true,\n      name: 'tuiToCountryCode'\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiToCountryCodePipe };","map":{"version":3,"names":["i0","inject","Pipe","CHAR_PLUS","TUI_COUNTRIES_MASKS","tuiGetMaxAllowedPhoneLength","tuiIsoToCountryCode","tuiNotKzRegion","TuiToCountryCodePipe","constructor","countriesMasks","transform","value","countries","find","countryIsoCode","ruCodeTest","test","length","matched","startsWith","replace","ɵfac","TuiToCountryCodePipe_Factory","__ngFactoryType__","ɵpipe","ɵɵdefinePipe","name","type","pure","standalone","ngDevMode","ɵsetClassMetadata","args"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@taiga-ui/legacy/fesm2022/taiga-ui-legacy-pipes-to-country-code.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, Pipe } from '@angular/core';\nimport { CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { TUI_COUNTRIES_MASKS } from '@taiga-ui/legacy/tokens';\nimport { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion } from '@taiga-ui/legacy/utils';\n\n/**\n * @deprecated: drop in v5.0\n * use `maskitoGetCountryFromNumber` from `@maskito/phone` instead\n * ```\n * npm i @maskito/phone\n * ```\n *\n * ```ts\n * import {maskitoGetCountryFromNumber} from '@maskito/phone';\n * import metadata from 'libphonenumber-js/min/metadata';\n *\n * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'\n * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'\n * ```\n */\nclass TuiToCountryCodePipe {\n    constructor() {\n        this.countriesMasks = inject(TUI_COUNTRIES_MASKS);\n    }\n    /**\n     * @deprecated use `maskitoGetCountryFromNumber` from `@maskito/phone` instead\n     * ```\n     * npm i @maskito/phone\n     * ```\n     *\n     * ```ts\n     * import {maskitoGetCountryFromNumber} from '@maskito/phone';\n     * import metadata from 'libphonenumber-js/min/metadata';\n     *\n     * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'\n     * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'\n     * ```\n     */\n    transform(value, countries) {\n        return countries.find((countryIsoCode) => {\n            const ruCodeTest = countryIsoCode === 'RU' &&\n                /^[78]/.test(value) &&\n                /^(?!880[1-9 ])/.test(value) &&\n                value.length + 1 ===\n                    tuiGetMaxAllowedPhoneLength(this.countriesMasks, 'RU');\n            const matched = ruCodeTest ||\n                (value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, '')) &&\n                    value.length + 1 ===\n                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));\n            if (matched) {\n                switch (countryIsoCode) {\n                    case 'KZ':\n                        return !tuiNotKzRegion(value);\n                    case 'RU':\n                        return tuiNotKzRegion(value);\n                    default:\n                        return true;\n                }\n            }\n            return false;\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiToCountryCodePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiToCountryCodePipe, isStandalone: true, name: \"tuiToCountryCode\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiToCountryCodePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    standalone: true,\n                    name: 'tuiToCountryCode',\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiToCountryCodePipe };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,MAAM,EAAEC,IAAI,QAAQ,eAAe;AAC5C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,2BAA2B,EAAEC,mBAAmB,EAAEC,cAAc,QAAQ,wBAAwB;;AAEzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,CAAC;EACvBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,cAAc,GAAGT,MAAM,CAACG,mBAAmB,CAAC;EACrD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,SAASA,CAACC,KAAK,EAAEC,SAAS,EAAE;IACxB,OAAOA,SAAS,CAACC,IAAI,CAAEC,cAAc,IAAK;MACtC,MAAMC,UAAU,GAAGD,cAAc,KAAK,IAAI,IACtC,OAAO,CAACE,IAAI,CAACL,KAAK,CAAC,IACnB,gBAAgB,CAACK,IAAI,CAACL,KAAK,CAAC,IAC5BA,KAAK,CAACM,MAAM,GAAG,CAAC,KACZb,2BAA2B,CAAC,IAAI,CAACK,cAAc,EAAE,IAAI,CAAC;MAC9D,MAAMS,OAAO,GAAGH,UAAU,IACrBJ,KAAK,CAACQ,UAAU,CAACd,mBAAmB,CAAC,IAAI,CAACI,cAAc,EAAEK,cAAc,CAAC,CAACM,OAAO,CAAClB,SAAS,EAAE,EAAE,CAAC,CAAC,IAC9FS,KAAK,CAACM,MAAM,GAAG,CAAC,KACZb,2BAA2B,CAAC,IAAI,CAACK,cAAc,EAAEK,cAAc,CAAE;MAC7E,IAAII,OAAO,EAAE;QACT,QAAQJ,cAAc;UAClB,KAAK,IAAI;YACL,OAAO,CAACR,cAAc,CAACK,KAAK,CAAC;UACjC,KAAK,IAAI;YACL,OAAOL,cAAc,CAACK,KAAK,CAAC;UAChC;YACI,OAAO,IAAI;QACnB;MACJ;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;EACN;EACA;IAAS,IAAI,CAACU,IAAI,YAAAC,6BAAAC,iBAAA;MAAA,YAAAA,iBAAA,IAAyFhB,oBAAoB;IAAA,CAA8C;EAAE;EAC/K;IAAS,IAAI,CAACiB,KAAK,kBAD8EzB,EAAE,CAAA0B,YAAA;MAAAC,IAAA;MAAAC,IAAA,EACMpB,oBAAoB;MAAAqB,IAAA;MAAAC,UAAA;IAAA,EAAiD;EAAE;AACpL;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAHqG/B,EAAE,CAAAgC,iBAAA,CAGXxB,oBAAoB,EAAc,CAAC;IACnHoB,IAAI,EAAE1B,IAAI;IACV+B,IAAI,EAAE,CAAC;MACCH,UAAU,EAAE,IAAI;MAChBH,IAAI,EAAE;IACV,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASnB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}