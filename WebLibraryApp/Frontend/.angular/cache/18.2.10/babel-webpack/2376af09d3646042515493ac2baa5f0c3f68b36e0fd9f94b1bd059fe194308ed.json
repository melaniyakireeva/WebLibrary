{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output } from '@angular/core';\nimport { tuiInjectElement } from '@taiga-ui/cdk/utils';\nclass TuiMedia {\n  constructor() {\n    this.el = tuiInjectElement();\n    this.playbackRate = 1;\n    this.volume = 1;\n    this.currentTimeChange = new EventEmitter();\n    this.pausedChange = new EventEmitter();\n    this.volumeChange = new EventEmitter();\n  }\n  set playbackRateSetter(playbackRate) {\n    this.updatePlaybackRate(playbackRate);\n  }\n  set currentTime(currentTime) {\n    if (Math.abs(currentTime - this.currentTime) > 0.05) {\n      this.el.currentTime = currentTime;\n    }\n  }\n  set paused(paused) {\n    if (paused) {\n      this.el.pause?.();\n    } else {\n      void this.el.play?.();\n      this.updatePlaybackRate(this.playbackRate);\n    }\n  }\n  get currentTime() {\n    return this.el.currentTime ?? 0;\n  }\n  get paused() {\n    return Boolean(this.el.paused);\n  }\n  onPausedChange(paused) {\n    this.pausedChange.emit(paused);\n    this.updatePlaybackRate(this.playbackRate);\n  }\n  onVolumeChange() {\n    this.volume = this.el.volume;\n    this.volumeChange.emit(this.volume);\n  }\n  onCurrentTimeChange() {\n    this.currentTimeChange.emit(this.currentTime);\n  }\n  updatePlaybackRate(playbackRate) {\n    this.playbackRate = playbackRate;\n    this.el.playbackRate = this.playbackRate;\n  }\n  static {\n    this.ɵfac = function TuiMedia_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiMedia)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiMedia,\n      selectors: [[\"video\", \"tuiMedia\", \"\"], [\"audio\", \"tuiMedia\", \"\"]],\n      hostVars: 1,\n      hostBindings: function TuiMedia_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"durationchange\", function TuiMedia_durationchange_HostBindingHandler() {\n            return 0;\n          })(\"ended\", function TuiMedia_ended_HostBindingHandler() {\n            return ctx.onPausedChange(true);\n          })(\"pause\", function TuiMedia_pause_HostBindingHandler() {\n            return ctx.onPausedChange(true);\n          })(\"play\", function TuiMedia_play_HostBindingHandler() {\n            return ctx.onPausedChange(false);\n          })(\"volumechange\", function TuiMedia_volumechange_HostBindingHandler() {\n            return ctx.onVolumeChange();\n          })(\"timeupdate\", function TuiMedia_timeupdate_HostBindingHandler() {\n            return ctx.onCurrentTimeChange();\n          })(\"seeking\", function TuiMedia_seeking_HostBindingHandler() {\n            return ctx.onCurrentTimeChange();\n          })(\"seeked\", function TuiMedia_seeked_HostBindingHandler() {\n            return ctx.onCurrentTimeChange();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"volume\", ctx.volume);\n        }\n      },\n      inputs: {\n        volume: \"volume\",\n        playbackRateSetter: [0, \"playbackRate\", \"playbackRateSetter\"],\n        currentTime: \"currentTime\",\n        paused: \"paused\"\n      },\n      outputs: {\n        currentTimeChange: \"currentTimeChange\",\n        pausedChange: \"pausedChange\",\n        volumeChange: \"volumeChange\"\n      },\n      exportAs: [\"tuiMedia\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiMedia, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: 'video[tuiMedia], audio[tuiMedia]',\n      exportAs: 'tuiMedia',\n      host: {\n        '[volume]': 'volume',\n        '(durationchange)': '0',\n        '(ended)': 'onPausedChange(true)',\n        '(pause)': 'onPausedChange(true)',\n        '(play)': 'onPausedChange(false)',\n        '(volumechange)': 'onVolumeChange()',\n        '(timeupdate)': 'onCurrentTimeChange()',\n        '(seeking)': 'onCurrentTimeChange()',\n        '(seeked)': 'onCurrentTimeChange()'\n      }\n    }]\n  }], null, {\n    volume: [{\n      type: Input\n    }],\n    currentTimeChange: [{\n      type: Output\n    }],\n    pausedChange: [{\n      type: Output\n    }],\n    volumeChange: [{\n      type: Output\n    }],\n    playbackRateSetter: [{\n      type: Input,\n      args: ['playbackRate']\n    }],\n    currentTime: [{\n      type: Input\n    }],\n    paused: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiMedia };","map":{"version":3,"names":["i0","EventEmitter","Directive","Input","Output","tuiInjectElement","TuiMedia","constructor","el","playbackRate","volume","currentTimeChange","pausedChange","volumeChange","playbackRateSetter","updatePlaybackRate","currentTime","Math","abs","paused","pause","play","Boolean","onPausedChange","emit","onVolumeChange","onCurrentTimeChange","ɵfac","TuiMedia_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","hostVars","hostBindings","TuiMedia_HostBindings","rf","ctx","ɵɵlistener","TuiMedia_durationchange_HostBindingHandler","TuiMedia_ended_HostBindingHandler","TuiMedia_pause_HostBindingHandler","TuiMedia_play_HostBindingHandler","TuiMedia_volumechange_HostBindingHandler","TuiMedia_timeupdate_HostBindingHandler","TuiMedia_seeking_HostBindingHandler","TuiMedia_seeked_HostBindingHandler","ɵɵhostProperty","inputs","outputs","exportAs","standalone","ngDevMode","ɵsetClassMetadata","args","selector","host"],"sources":["C:/Users/Asus-PC/Downloads/WebLibraryNew/WebLibrary/WebLibraryApp/Frontend/node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-directives-media.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output } from '@angular/core';\nimport { tuiInjectElement } from '@taiga-ui/cdk/utils';\n\nclass TuiMedia {\n    constructor() {\n        this.el = tuiInjectElement();\n        this.playbackRate = 1;\n        this.volume = 1;\n        this.currentTimeChange = new EventEmitter();\n        this.pausedChange = new EventEmitter();\n        this.volumeChange = new EventEmitter();\n    }\n    set playbackRateSetter(playbackRate) {\n        this.updatePlaybackRate(playbackRate);\n    }\n    set currentTime(currentTime) {\n        if (Math.abs(currentTime - this.currentTime) > 0.05) {\n            this.el.currentTime = currentTime;\n        }\n    }\n    set paused(paused) {\n        if (paused) {\n            this.el.pause?.();\n        }\n        else {\n            void this.el.play?.();\n            this.updatePlaybackRate(this.playbackRate);\n        }\n    }\n    get currentTime() {\n        return this.el.currentTime ?? 0;\n    }\n    get paused() {\n        return Boolean(this.el.paused);\n    }\n    onPausedChange(paused) {\n        this.pausedChange.emit(paused);\n        this.updatePlaybackRate(this.playbackRate);\n    }\n    onVolumeChange() {\n        this.volume = this.el.volume;\n        this.volumeChange.emit(this.volume);\n    }\n    onCurrentTimeChange() {\n        this.currentTimeChange.emit(this.currentTime);\n    }\n    updatePlaybackRate(playbackRate) {\n        this.playbackRate = playbackRate;\n        this.el.playbackRate = this.playbackRate;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiMedia, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: TuiMedia, isStandalone: true, selector: \"video[tuiMedia], audio[tuiMedia]\", inputs: { volume: \"volume\", playbackRateSetter: [\"playbackRate\", \"playbackRateSetter\"], currentTime: \"currentTime\", paused: \"paused\" }, outputs: { currentTimeChange: \"currentTimeChange\", pausedChange: \"pausedChange\", volumeChange: \"volumeChange\" }, host: { listeners: { \"durationchange\": \"0\", \"ended\": \"onPausedChange(true)\", \"pause\": \"onPausedChange(true)\", \"play\": \"onPausedChange(false)\", \"volumechange\": \"onVolumeChange()\", \"timeupdate\": \"onCurrentTimeChange()\", \"seeking\": \"onCurrentTimeChange()\", \"seeked\": \"onCurrentTimeChange()\" }, properties: { \"volume\": \"volume\" } }, exportAs: [\"tuiMedia\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: TuiMedia, decorators: [{\n            type: Directive,\n            args: [{\n                    standalone: true,\n                    selector: 'video[tuiMedia], audio[tuiMedia]',\n                    exportAs: 'tuiMedia',\n                    host: {\n                        '[volume]': 'volume',\n                        '(durationchange)': '0',\n                        '(ended)': 'onPausedChange(true)',\n                        '(pause)': 'onPausedChange(true)',\n                        '(play)': 'onPausedChange(false)',\n                        '(volumechange)': 'onVolumeChange()',\n                        '(timeupdate)': 'onCurrentTimeChange()',\n                        '(seeking)': 'onCurrentTimeChange()',\n                        '(seeked)': 'onCurrentTimeChange()',\n                    },\n                }]\n        }], propDecorators: { volume: [{\n                type: Input\n            }], currentTimeChange: [{\n                type: Output\n            }], pausedChange: [{\n                type: Output\n            }], volumeChange: [{\n                type: Output\n            }], playbackRateSetter: [{\n                type: Input,\n                args: ['playbackRate']\n            }], currentTime: [{\n                type: Input\n            }], paused: [{\n                type: Input\n            }] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiMedia };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}