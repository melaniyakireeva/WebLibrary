{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./auth-page.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./auth-page.component.scss?ngResource\";\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { TuiIcon, TuiTextfield, TuiButton, TuiError } from '@taiga-ui/core';\nimport { TuiTooltip, TuiPassword } from '@taiga-ui/kit';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { AuthService } from '../../services/auth/auth-service.service';\nimport _ from 'lodash';\nimport { catchError, of, tap } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet AuthPageComponent = class AuthPageComponent {\n  authService;\n  router;\n  cdRef;\n  error = null;\n  email;\n  password;\n  isAuthProces = false;\n  constructor(authService, router, cdRef) {\n    this.authService = authService;\n    this.router = router;\n    this.cdRef = cdRef;\n  }\n  onLogin() {\n    this.error = null;\n    this.isAuthProces = true;\n    if (_.isEmpty(this.email)) {\n      this.error = 'Почта не должна быть пустым значением';\n      this.isAuthProces = false;\n      return;\n    }\n    if (_.isEmpty(this.password)) {\n      this.error = 'Пароль не может быть пустым значением';\n      this.isAuthProces = false;\n      return;\n    }\n    const loginDto = {\n      email: this.email,\n      password: this.password\n    };\n    const obs$ = this.authService.login(loginDto).pipe(tap(isAuthorized => {\n      this.isAuthProces = false;\n      if (isAuthorized) {\n        this.router.navigate(['']);\n      } else {\n        this.error = 'В системе нет такого пользователя';\n      }\n      this.cdRef.markForCheck();\n    }), catchError(x => {\n      this.isAuthProces = false;\n      this.error = x.error.errorText;\n      this.cdRef.markForCheck();\n      return of(undefined);\n    }));\n    obs$.subscribe(() => {});\n  }\n  static ctorParameters = () => [{\n    type: AuthService\n  }, {\n    type: Router\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\nAuthPageComponent = __decorate([Component({\n  selector: 'app-auth-page',\n  standalone: true,\n  imports: [TuiTextfield, TuiIcon, TuiTooltip, TuiPassword, TuiButton, TuiError, RouterLink, RouterLinkActive, FormsModule, CommonModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AuthPageComponent);\nexport { AuthPageComponent };","map":{"version":3,"names":["ChangeDetectorRef","Component","TuiIcon","TuiTextfield","TuiButton","TuiError","TuiTooltip","TuiPassword","Router","RouterLink","RouterLinkActive","AuthService","_","catchError","of","tap","FormsModule","CommonModule","AuthPageComponent","authService","router","cdRef","error","email","password","isAuthProces","constructor","onLogin","isEmpty","loginDto","obs$","login","pipe","isAuthorized","navigate","markForCheck","x","errorText","undefined","subscribe","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\components\\auth-page\\auth-page.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, NgModule } from '@angular/core';\r\nimport { TuiIcon, TuiTextfield, TuiButton, TuiError } from '@taiga-ui/core';\r\nimport { TuiTooltip, TuiPassword } from '@taiga-ui/kit';\r\nimport {\r\n  NavigationEnd,\r\n  Router,\r\n  RouterLink,\r\n  RouterLinkActive,\r\n  RouterOutlet,\r\n} from '@angular/router';\r\nimport { AuthService, LoginDto } from '../../services/auth/auth-service.service';\r\nimport _ from 'lodash';\r\nimport { catchError, of, tap } from 'rxjs';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-auth-page',\r\n  standalone: true,\r\n  imports: [\r\n    TuiTextfield,\r\n    TuiIcon,\r\n    TuiTooltip,\r\n    TuiPassword,\r\n    TuiButton,\r\n    TuiError,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  templateUrl: './auth-page.component.html',\r\n  styleUrl: './auth-page.component.scss',\r\n})\r\nexport class AuthPageComponent {\r\n  error: string | null = null;\r\n  email?: string;\r\n  password?: string;\r\n  isAuthProces: boolean = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  onLogin() {\r\n    this.error = null;\r\n    this.isAuthProces = true;\r\n    if (_.isEmpty(this.email)) {\r\n      this.error = 'Почта не должна быть пустым значением';\r\n      this.isAuthProces = false;\r\n      return;\r\n    }\r\n    if (_.isEmpty(this.password)) {\r\n      this.error = 'Пароль не может быть пустым значением';\r\n      this.isAuthProces = false;\r\n      return;\r\n    }\r\n\r\n    const loginDto: LoginDto = {\r\n      email: this.email,\r\n      password: this.password,\r\n    };\r\n\r\n    const obs$ = this.authService.login(loginDto).pipe(\r\n      tap((isAuthorized) => {\r\n        this.isAuthProces = false;\r\n        if (isAuthorized) {\r\n          this.router.navigate(['']);\r\n        } else {\r\n          this.error = 'В системе нет такого пользователя';\r\n        }\r\n        this.cdRef.markForCheck();\r\n      }),\r\n      catchError((x) => {\r\n        this.isAuthProces = false;\r\n        this.error = x.error.errorText;\r\n        this.cdRef.markForCheck();\r\n        return of(undefined);\r\n      })\r\n    );\r\n\r\n    obs$.subscribe(() => {});\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,iBAAiB,EAAEC,SAAS,QAAkB,eAAe;AACtE,SAASC,OAAO,EAAEC,YAAY,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,gBAAgB;AAC3E,SAASC,UAAU,EAAEC,WAAW,QAAQ,eAAe;AACvD,SAEEC,MAAM,EACNC,UAAU,EACVC,gBAAgB,QAEX,iBAAiB;AACxB,SAASC,WAAW,QAAkB,0CAA0C;AAChF,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;AAC1C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,YAAY,QAAQ,iBAAiB;AAoBvC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAOlBC,WAAA;EACAC,MAAA;EACAC,KAAA;EARVC,KAAK,GAAkB,IAAI;EAC3BC,KAAK;EACLC,QAAQ;EACRC,YAAY,GAAY,KAAK;EAE7BC,YACUP,WAAwB,EACxBC,MAAc,EACdC,KAAwB;IAFxB,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACZ;EAEHM,OAAOA,CAAA;IACL,IAAI,CAACL,KAAK,GAAG,IAAI;IACjB,IAAI,CAACG,YAAY,GAAG,IAAI;IACxB,IAAIb,CAAC,CAACgB,OAAO,CAAC,IAAI,CAACL,KAAK,CAAC,EAAE;MACzB,IAAI,CAACD,KAAK,GAAG,uCAAuC;MACpD,IAAI,CAACG,YAAY,GAAG,KAAK;MACzB;IACF;IACA,IAAIb,CAAC,CAACgB,OAAO,CAAC,IAAI,CAACJ,QAAQ,CAAC,EAAE;MAC5B,IAAI,CAACF,KAAK,GAAG,uCAAuC;MACpD,IAAI,CAACG,YAAY,GAAG,KAAK;MACzB;IACF;IAEA,MAAMI,QAAQ,GAAa;MACzBN,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,QAAQ,EAAE,IAAI,CAACA;KAChB;IAED,MAAMM,IAAI,GAAG,IAAI,CAACX,WAAW,CAACY,KAAK,CAACF,QAAQ,CAAC,CAACG,IAAI,CAChDjB,GAAG,CAAEkB,YAAY,IAAI;MACnB,IAAI,CAACR,YAAY,GAAG,KAAK;MACzB,IAAIQ,YAAY,EAAE;QAChB,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;MAC5B,CAAC,MAAM;QACL,IAAI,CAACZ,KAAK,GAAG,mCAAmC;MAClD;MACA,IAAI,CAACD,KAAK,CAACc,YAAY,EAAE;IAC3B,CAAC,CAAC,EACFtB,UAAU,CAAEuB,CAAC,IAAI;MACf,IAAI,CAACX,YAAY,GAAG,KAAK;MACzB,IAAI,CAACH,KAAK,GAAGc,CAAC,CAACd,KAAK,CAACe,SAAS;MAC9B,IAAI,CAAChB,KAAK,CAACc,YAAY,EAAE;MACzB,OAAOrB,EAAE,CAACwB,SAAS,CAAC;IACtB,CAAC,CAAC,CACH;IAEDR,IAAI,CAACS,SAAS,CAAC,MAAK,CAAE,CAAC,CAAC;EAC1B;;;;;;;;;AAlDWrB,iBAAiB,GAAAsB,UAAA,EAlB7BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,eAAe;EACzBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACPxC,YAAY,EACZD,OAAO,EACPI,UAAU,EACVC,WAAW,EACXH,SAAS,EACTC,QAAQ,EACRI,UAAU,EACVC,gBAAgB,EAChBM,WAAW,EACXC,YAAY,CACb;EACD2B,QAAA,EAAAC,oBAAyC;;CAE1C,CAAC,C,EACW3B,iBAAiB,CAmD7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}