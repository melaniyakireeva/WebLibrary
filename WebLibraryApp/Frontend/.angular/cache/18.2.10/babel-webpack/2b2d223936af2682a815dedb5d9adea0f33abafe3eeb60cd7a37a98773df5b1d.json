{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpCustomService } from '../http/http-service.service';\nimport { mapTo, tap } from 'rxjs';\nimport _ from 'lodash';\nlet AuthService = class AuthService {\n  http;\n  controller = 'auth';\n  JWT_TOKEN = 'JWT_TOKEN';\n  USER_INFO = 'USER_INFO';\n  loggedUserInfo;\n  constructor(http) {\n    this.http = http;\n  }\n  changePassword(changePasswordDto) {\n    let method = 'ChangePassword';\n    return this.http.postRequest(`api/${this.controller}/${method}`, changePasswordDto);\n  }\n  getUserInfo() {\n    if (_.isNil(this.loggedUserInfo)) {\n      const item = localStorage.getItem(this.USER_INFO);\n      if (!_.isNil(item)) {\n        this.loggedUserInfo = JSON.parse(item);\n      }\n    }\n    return this.loggedUserInfo;\n  }\n  login(loginDto) {\n    let method = 'token';\n    return this.http.postRequest(`api/${this.controller}/${method}`, loginDto).pipe(tap(tokens => this.doLoginUser(tokens)), mapTo(true));\n  }\n  register(registerDto) {\n    let method = 'register';\n    return this.http.postRequest(`api/${this.controller}/${method}`, registerDto);\n  }\n  logout() {\n    this.doLogoutUser();\n  }\n  isLoggedIn() {\n    return !!this.getJwtToken();\n  }\n  // refreshToken() {\n  //   return this.http\n  //     .post<any>(`${config.apiUrl}/refresh`, {\n  //       refreshToken: this.getRefreshToken(),\n  //     })\n  //     .pipe(\n  //       tap((tokens: Tokens) => {\n  //         this.storeJwtToken(tokens.jwt);\n  //       })\n  //     );\n  // }\n  getJwtToken() {\n    return localStorage.getItem(this.JWT_TOKEN);\n  }\n  doLoginUser(tokens) {\n    this.loggedUserInfo = {\n      userId: tokens.userid,\n      userLogin: tokens.username,\n      role: tokens.role\n    };\n    localStorage.setItem(this.USER_INFO, JSON.stringify(this.loggedUserInfo));\n    this.storeTokens(tokens);\n  }\n  doLogoutUser() {\n    this.loggedUserInfo = undefined;\n    this.removeTokens();\n  }\n  storeTokens(tokens) {\n    localStorage.setItem(this.JWT_TOKEN, tokens.access_token);\n  }\n  removeTokens() {\n    localStorage.removeItem(this.JWT_TOKEN);\n    localStorage.removeItem(this.USER_INFO);\n  }\n  static ctorParameters = () => [{\n    type: HttpCustomService\n  }];\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };\nexport class LoginDto {\n  email;\n  password;\n}\nexport class ChangePasswordDto {\n  email;\n  oldPassword;\n  newPassword;\n}\nexport class TokenRes {\n  access_token;\n  username;\n  userid;\n  role;\n}\nexport class RegisterDto {\n  name;\n  surname;\n  email;\n  password;\n  login;\n  organization;\n}\nexport class RegisterAdminDto {\n  name;\n  surname;\n  email;\n  password;\n  login;\n  organization;\n  role;\n}","map":{"version":3,"names":["Injectable","HttpCustomService","mapTo","tap","_","AuthService","http","controller","JWT_TOKEN","USER_INFO","loggedUserInfo","constructor","changePassword","changePasswordDto","method","postRequest","getUserInfo","isNil","item","localStorage","getItem","JSON","parse","login","loginDto","pipe","tokens","doLoginUser","register","registerDto","logout","doLogoutUser","isLoggedIn","getJwtToken","userId","userid","userLogin","username","role","setItem","stringify","storeTokens","undefined","removeTokens","access_token","removeItem","__decorate","providedIn","LoginDto","email","password","ChangePasswordDto","oldPassword","newPassword","TokenRes","RegisterDto","name","surname","organization","RegisterAdminDto"],"sources":["C:\\Users\\Asus-PC\\Downloads\\WebLibraryNew\\WebLibrary\\WebLibraryApp\\Frontend\\src\\app\\services\\auth\\auth-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpCustomService } from '../http/http-service.service';\r\nimport { catchError, mapTo, Observable, of, tap } from 'rxjs';\r\nimport _ from 'lodash';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private readonly controller = 'auth';\r\n  private readonly JWT_TOKEN = 'JWT_TOKEN';\r\n  private readonly USER_INFO = 'USER_INFO';\r\n\r\n  private loggedUserInfo?: AccountInfo;\r\n\r\n  constructor(private http: HttpCustomService) {}\r\n\r\n  changePassword(changePasswordDto: ChangePasswordDto): Observable<boolean> {\r\n    let method: string = 'ChangePassword';\r\n    return this.http.postRequest(\r\n      `api/${this.controller}/${method}`,\r\n      changePasswordDto\r\n    );\r\n  }\r\n\r\n  getUserInfo(): AccountInfo | undefined {\r\n    if (_.isNil(this.loggedUserInfo)) {\r\n      const item = localStorage.getItem(this.USER_INFO);\r\n      if (!_.isNil(item)) {\r\n        this.loggedUserInfo = JSON.parse(item);\r\n      }\r\n    }\r\n    return this.loggedUserInfo;\r\n  }\r\n\r\n  login(loginDto: LoginDto): Observable<boolean> {\r\n    let method: string = 'token';\r\n    return this.http\r\n      .postRequest(`api/${this.controller}/${method}`, loginDto)\r\n      .pipe(\r\n        tap((tokens) => this.doLoginUser(tokens)),\r\n        mapTo(true)\r\n      );\r\n  }\r\n\r\n  register(registerDto: RegisterDto): Observable<boolean> {\r\n    let method: string = 'register';\r\n    return this.http.postRequest(\r\n      `api/${this.controller}/${method}`,\r\n      registerDto\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.doLogoutUser();\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return !!this.getJwtToken();\r\n  }\r\n\r\n  // refreshToken() {\r\n  //   return this.http\r\n  //     .post<any>(`${config.apiUrl}/refresh`, {\r\n  //       refreshToken: this.getRefreshToken(),\r\n  //     })\r\n  //     .pipe(\r\n  //       tap((tokens: Tokens) => {\r\n  //         this.storeJwtToken(tokens.jwt);\r\n  //       })\r\n  //     );\r\n  // }\r\n\r\n  getJwtToken() {\r\n    return localStorage.getItem(this.JWT_TOKEN);\r\n  }\r\n\r\n  private doLoginUser(tokens: TokenRes) {\r\n    this.loggedUserInfo = {\r\n      userId: tokens.userid,\r\n      userLogin: tokens.username,\r\n      role: tokens.role,\r\n    };\r\n    localStorage.setItem(this.USER_INFO, JSON.stringify(this.loggedUserInfo));\r\n    this.storeTokens(tokens);\r\n  }\r\n\r\n  private doLogoutUser() {\r\n    this.loggedUserInfo = undefined;\r\n    this.removeTokens();\r\n  }\r\n\r\n  private storeTokens(tokens: TokenRes) {\r\n    localStorage.setItem(this.JWT_TOKEN, tokens.access_token);\r\n  }\r\n\r\n  private removeTokens() {\r\n    localStorage.removeItem(this.JWT_TOKEN);\r\n    localStorage.removeItem(this.USER_INFO);\r\n  }\r\n}\r\n\r\nexport class LoginDto\r\n{\r\n    public email?: string\r\n    public password?: string\r\n}\r\n\r\nexport class ChangePasswordDto {\r\n  public email?: string;\r\n  public oldPassword?: string;\r\n  public newPassword?: string;\r\n}\r\n\r\nexport interface AccountInfo{\r\n  userId?: number;\r\n  userLogin?: string;\r\n  role?: number;\r\n}\r\n\r\nexport class TokenRes {\r\n  public access_token!: string;\r\n  public username!: string;\r\n  public userid!: number;\r\n  public role!: number;\r\n}\r\n\r\nexport class RegisterDto {\r\n  name!: string;\r\n  surname!: string;\r\n  email!: string;\r\n  password!: string;\r\n  login!: string;\r\n  organization?: string;\r\n}\r\n\r\nexport class RegisterAdminDto {\r\n  name!: string;\r\n  surname!: string;\r\n  email!: string;\r\n  password!: string;\r\n  login!: string;\r\n  organization?: string;\r\n  role!: number;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}