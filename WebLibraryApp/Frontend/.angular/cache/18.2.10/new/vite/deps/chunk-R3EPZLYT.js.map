{
  "version": 3,
  "sources": ["../../../../../../node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-components-calendar-month.mjs", "../../../../../../node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-components-calendar-range.mjs", "../../../../../../node_modules/@maskito/angular/fesm2022/maskito-angular.mjs", "../../../../../../node_modules/libphonenumber-js/es6/ParseError.js", "../../../../../../node_modules/libphonenumber-js/es6/constants.js", "../../../../../../node_modules/libphonenumber-js/es6/tools/semver-compare.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/isObject.js", "../../../../../../node_modules/libphonenumber-js/es6/metadata.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/parseDigits.js", "../../../../../../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js", "../../../../../../node_modules/libphonenumber-js/es6/isPossible.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/getNumberType.js", "../../../../../../node_modules/libphonenumber-js/es6/isValid.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/RFC3966.js", "../../../../../../node_modules/libphonenumber-js/es6/format.js", "../../../../../../node_modules/libphonenumber-js/es6/PhoneNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js", "../../../../../../node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js", "../../../../../../node_modules/libphonenumber-js/es6/parse.js", "../../../../../../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js", "../../../../../../node_modules/libphonenumber-js/es6/normalizeArguments.js", "../../../../../../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError.js", "../../../../../../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js", "../../../../../../node_modules/libphonenumber-js/es6/parsePhoneNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/validatePhoneNumberLength.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/LRUCache.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/RegExpCache.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/util.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/utf-8.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/matchPhoneNumberStringAgainstPhoneNumber.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/Leniency.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js", "../../../../../../node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js", "../../../../../../node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeState.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternParser.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouTypeParser.js", "../../../../../../node_modules/libphonenumber-js/es6/AsYouType.js", "../../../../../../node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-utils.mjs", "../../../../../../node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-components-slider.mjs", "../../../../../../node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-components-range.mjs", "../../../../../../node_modules/@taiga-ui/kit/fesm2022/taiga-ui-kit-pipes-stringify-content.mjs", "../../../../../../node_modules/@maskito/kit/index.esm.js"],
  "sourcesContent": ["import { __decorate } from 'tslib';\nimport { NgIf, AsyncPipe, NgForOf } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';\nimport { TuiDay, TUI_FIRST_DAY, TUI_LAST_DAY, TuiMonthRange, TuiMonth, TuiYear } from '@taiga-ui/cdk/date-time';\nimport { TuiHovered } from '@taiga-ui/cdk/directives/hovered';\nimport { TuiLet } from '@taiga-ui/cdk/directives/let';\nimport { TuiRepeatTimes } from '@taiga-ui/cdk/directives/repeat-times';\nimport { tuiNullableSame, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { TuiCalendarYear } from '@taiga-ui/core/components/calendar';\nimport { TuiLink } from '@taiga-ui/core/components/link';\nimport { TuiScrollbar } from '@taiga-ui/core/components/scrollbar';\nimport { TuiSpinButton } from '@taiga-ui/core/components/spin-button';\nimport { TUI_CALENDAR_MONTHS } from '@taiga-ui/kit/tokens';\nfunction TuiCalendarMonth_tui_scrollbar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-scrollbar\", 2)(1, \"tui-calendar-year\", 3);\n    i0.ɵɵlistener(\"yearClick\", function TuiCalendarMonth_tui_scrollbar_0_Template_tui_calendar_year_yearClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onPickerYearClick($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"initialItem\", ctx_r1.year.year)(\"max\", ctx_r1.computedMax.year)(\"min\", ctx_r1.computedMin.year)(\"value\", ctx_r1.value);\n  }\n}\nfunction TuiCalendarMonth_ng_template_1_div_3_ng_container_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"click\", function TuiCalendarMonth_ng_template_1_div_3_ng_container_1_div_1_Template_div_click_0_listener() {\n      const item_r5 = i0.ɵɵrestoreView(_r4).tuiLet;\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.onItemClick(item_r5));\n    })(\"tuiHoveredChange\", function TuiCalendarMonth_ng_template_1_div_3_ng_container_1_div_1_Template_div_tuiHoveredChange_0_listener($event) {\n      const item_r5 = i0.ɵɵrestoreView(_r4).tuiLet;\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.onItemHovered($event, item_r5));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_11_0;\n    const item_r5 = ctx.tuiLet;\n    const column_r6 = i0.ɵɵnextContext().$implicit;\n    const row_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"t-cell_disabled\", ctx_r1.disabledItemHandlerWithMinMax(item_r5))(\"t-cell_today\", ctx_r1.isItemToday(item_r5));\n    i0.ɵɵattribute(\"data-range\", ctx_r1.getItemRange(item_r5));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", (tmp_11_0 = ctx_r1.months()) == null ? null : tmp_11_0[row_r7 * 4 + column_r6], \" \");\n  }\n}\nfunction TuiCalendarMonth_ng_template_1_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TuiCalendarMonth_ng_template_1_div_3_ng_container_1_div_1_Template, 2, 6, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const column_r6 = ctx.$implicit;\n    const row_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"tuiLet\", ctx_r1.getTuiMonth(row_r7 * 4 + column_r6, ctx_r1.year.year));\n  }\n}\nfunction TuiCalendarMonth_ng_template_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, TuiCalendarMonth_ng_template_1_div_3_ng_container_1_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"tuiRepeatTimesOf\", 4);\n  }\n}\nfunction TuiCalendarMonth_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-spin-button\", 4);\n    i0.ɵɵlistener(\"leftClick\", function TuiCalendarMonth_ng_template_1_Template_tui_spin_button_leftClick_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onPreviousYear());\n    })(\"rightClick\", function TuiCalendarMonth_ng_template_1_Template_tui_spin_button_rightClick_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onNextYear());\n    });\n    i0.ɵɵelementStart(1, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function TuiCalendarMonth_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onYearClick());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(3, TuiCalendarMonth_ng_template_1_div_3_Template, 2, 1, \"div\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"focusable\", false)(\"leftDisabled\", ctx_r1.previousYearDisabled)(\"rightDisabled\", ctx_r1.nextYearDisabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.year.formattedYear, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"tuiRepeatTimesOf\", 3);\n  }\n}\nconst TODAY = TuiDay.currentLocal();\nclass TuiCalendarMonth {\n  constructor() {\n    this.isYearPickerShown = false;\n    this.months = toSignal(inject(TUI_CALENDAR_MONTHS));\n    this.value = null;\n    this.year = TODAY;\n    this.disabledItemHandler = TUI_FALSE_HANDLER;\n    this.minLength = null;\n    this.maxLength = null;\n    this.min = TUI_FIRST_DAY;\n    this.max = TUI_LAST_DAY;\n    this.monthClick = new EventEmitter();\n    this.hoveredItemChange = new EventEmitter();\n    this.yearChange = new EventEmitter();\n    this.hoveredItem = null;\n  }\n  get isSingle() {\n    return this.value instanceof TuiMonthRange && this.value.isSingleMonth;\n  }\n  onNextYear() {\n    this.updateActiveYear(this.year.append({\n      year: 1\n    }));\n  }\n  onPreviousYear() {\n    this.updateActiveYear(this.year.append({\n      year: -1\n    }));\n  }\n  getItemRange(item) {\n    const {\n      value,\n      hoveredItem\n    } = this;\n    if (!(value instanceof TuiMonthRange)) {\n      return value?.monthSame(item) ? 'active' : null;\n    }\n    const months = item.month + item.year * 12;\n    const hovered = hoveredItem ? hoveredItem.month + hoveredItem.year * 12 : null;\n    const from = value.from.month + value.from.year * 12;\n    const to = value.to.month + value.to.year * 12;\n    const picking = this.isSingle ? hovered : null;\n    const min = Math.min(from, to, picking ?? from);\n    const max = Math.max(from, to, picking ?? from);\n    if (min === max && min === months) {\n      return 'active';\n    }\n    if (min === months) {\n      return 'start';\n    }\n    if (max === months) {\n      return 'end';\n    }\n    return min < months && months < max ? 'middle' : null;\n  }\n  get computedMin() {\n    return this.min ?? TUI_FIRST_DAY;\n  }\n  get computedMax() {\n    return this.max ?? TUI_LAST_DAY;\n  }\n  get previousYearDisabled() {\n    return this.year.yearSameOrBefore(this.computedMin);\n  }\n  get nextYearDisabled() {\n    return this.year.yearSameOrAfter(this.computedMax);\n  }\n  get disabledItemHandlerWithMinMax() {\n    return this.calculateDisabledItemHandlerWithMinMax(this.disabledItemHandler, this.value, this.computedMin, this.computedMax, this.minLength, this.maxLength);\n  }\n  getTuiMonth(monthNumber, yearNumber) {\n    return new TuiMonth(yearNumber, monthNumber);\n  }\n  isItemToday(item) {\n    return TODAY.monthSame(item);\n  }\n  onPickerYearClick(year) {\n    this.isYearPickerShown = false;\n    if (this.year.year !== year) {\n      this.updateActiveYear(new TuiYear(year));\n    }\n  }\n  onItemClick(month) {\n    if (!this.disabledItemHandlerWithMinMax(month)) {\n      this.monthClick.emit(month);\n    }\n  }\n  onYearClick() {\n    this.isYearPickerShown = true;\n  }\n  onItemHovered(hovered, item) {\n    this.updateHoveredItem(hovered ? item : null);\n  }\n  calculateDisabledItemHandlerWithMinMax(disabledItemHandler, value, min, max, minLength, maxLength) {\n    return item => {\n      const delta = value instanceof TuiMonthRange && value.isSingleMonth ? Math.abs(item.year * 12 + item.month - value.from.year * 12 - value.from.month) : 0;\n      const tooLong = delta && maxLength && delta > maxLength;\n      const tooShort = delta && minLength && delta < minLength;\n      return tooLong || tooShort || item.monthBefore(min) || item.monthAfter(max) || disabledItemHandler(item);\n    };\n  }\n  updateHoveredItem(month) {\n    if (tuiNullableSame(this.hoveredItem, month, (a, b) => a.monthSame(b))) {\n      return;\n    }\n    this.hoveredItem = month;\n    this.hoveredItemChange.emit(month);\n  }\n  updateActiveYear(year) {\n    this.year = year;\n    this.yearChange.emit(year);\n  }\n  static {\n    this.ɵfac = function TuiCalendarMonth_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiCalendarMonth)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiCalendarMonth,\n      selectors: [[\"tui-calendar-month\"]],\n      hostVars: 2,\n      hostBindings: function TuiCalendarMonth_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"_picking\", ctx.isSingle);\n        }\n      },\n      inputs: {\n        value: \"value\",\n        year: \"year\",\n        disabledItemHandler: \"disabledItemHandler\",\n        minLength: \"minLength\",\n        maxLength: \"maxLength\",\n        min: \"min\",\n        max: \"max\"\n      },\n      outputs: {\n        monthClick: \"monthClick\",\n        hoveredItemChange: \"hoveredItemChange\",\n        yearChange: \"yearChange\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 2,\n      consts: [[\"monthSelect\", \"\"], [\"class\", \"t-scrollbar\", 4, \"ngIf\", \"ngIfElse\"], [1, \"t-scrollbar\"], [3, \"yearClick\", \"initialItem\", \"max\", \"min\", \"value\"], [1, \"t-spin\", 3, \"leftClick\", \"rightClick\", \"focusable\", \"leftDisabled\", \"rightDisabled\"], [\"automation-id\", \"tui-calendar-month__active-year\", \"tabIndex\", \"-1\", \"tuiLink\", \"\", \"type\", \"button\", 3, \"click\"], [\"class\", \"t-row\", 4, \"tuiRepeatTimes\", \"tuiRepeatTimesOf\"], [1, \"t-row\"], [4, \"tuiRepeatTimes\", \"tuiRepeatTimesOf\"], [\"class\", \"t-cell\", 3, \"t-cell_disabled\", \"t-cell_today\", \"click\", \"tuiHoveredChange\", 4, \"tuiLet\"], [1, \"t-cell\", 3, \"click\", \"tuiHoveredChange\"]],\n      template: function TuiCalendarMonth_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, TuiCalendarMonth_tui_scrollbar_0_Template, 2, 4, \"tui-scrollbar\", 1)(1, TuiCalendarMonth_ng_template_1_Template, 4, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        }\n        if (rf & 2) {\n          const monthSelect_r8 = i0.ɵɵreference(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isYearPickerShown)(\"ngIfElse\", monthSelect_r8);\n        }\n      },\n      dependencies: [NgIf, TuiCalendarYear, TuiHovered, TuiLet, TuiLink, TuiRepeatTimes, TuiScrollbar, TuiSpinButton],\n      styles: [\".t-row[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;font:var(--tui-font-text-m)}.t-row[_ngcontent-%COMP%]:first-child{justify-content:flex-end}.t-row[_ngcontent-%COMP%]:last-child{justify-content:flex-start}.t-cell[_ngcontent-%COMP%]{position:relative;display:flex;align-items:center;justify-content:center;line-height:2rem;isolation:isolate;cursor:pointer;overflow:hidden;border:.125rem solid transparent;box-sizing:border-box;-webkit-mask:linear-gradient(transparent calc(50% - 1rem),#000 calc(50% - 1rem),#000 calc(50% + 1rem),transparent calc(50% + 1rem));mask:linear-gradient(transparent calc(50% - 1rem),#000 calc(50% - 1rem),#000 calc(50% + 1rem),transparent calc(50% + 1rem))}.t-cell[_ngcontent-%COMP%]:first-child{border-inline-start-color:transparent!important}.t-cell[_ngcontent-%COMP%]:last-child{border-inline-end-color:transparent!important}.t-cell[_ngcontent-%COMP%]:before, .t-cell[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\\\"\\\";z-index:-1;border-radius:var(--tui-radius-m)}.t-cell[_ngcontent-%COMP%]:after{-webkit-mask:url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 12 32\\\"><path d=\\\"M0.2856 0L0.6763 0C2.9265 0 4.9876 1.259 6.0147 3.2611L10.2442 11.5048C11.5301 14.0113 11.5683 16.9754 10.3472 19.5141L5.9766 28.6007C4.9772 30.6786 2.8754 32 0.5696 32H0.285645V0Z\\\"></path></svg>') right / .75rem 100% no-repeat,linear-gradient(#000,#000) left / calc(100% - .7rem) 100% no-repeat;mask:url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 12 32\\\"><path d=\\\"M0.2856 0L0.6763 0C2.9265 0 4.9876 1.259 6.0147 3.2611L10.2442 11.5048C11.5301 14.0113 11.5683 16.9754 10.3472 19.5141L5.9766 28.6007C4.9772 30.6786 2.8754 32 0.5696 32H0.285645V0Z\\\"></path></svg>') right / .75rem 100% no-repeat,linear-gradient(#000,#000) left / calc(100% - .7rem) 100% no-repeat}.t-cell[data-range][_ngcontent-%COMP%]:before{background:var(--tui-background-neutral-1)}._picking[_nghost-%COMP%]   .t-cell[data-range][_ngcontent-%COMP%]:before{background:var(--tui-background-neutral-1-hover)}.t-cell[data-range=middle][_ngcontent-%COMP%]{border-color:var(--tui-background-neutral-1)}._picking[_nghost-%COMP%]   .t-cell[data-range=middle][_ngcontent-%COMP%]{border-color:var(--tui-background-neutral-1-hover)}.t-cell[data-range=middle][_ngcontent-%COMP%]:not(:first-child):before{border-start-start-radius:0;border-end-start-radius:0}.t-cell[data-range=middle][_ngcontent-%COMP%]:not(:last-child):before{border-start-end-radius:0;border-end-end-radius:0}.t-cell[data-range=start][_ngcontent-%COMP%]{border-inline-end-color:var(--tui-background-neutral-1);color:var(--tui-text-primary-on-accent-1)}._picking[_nghost-%COMP%]   .t-cell[data-range=start][_ngcontent-%COMP%]{border-inline-end-color:var(--tui-background-neutral-1-hover)}.t-cell[data-range=start][_ngcontent-%COMP%]:not(:last-child):before{right:-1rem}.t-cell[data-range=start][_ngcontent-%COMP%]:after{background:var(--tui-background-accent-1)}.t-cell[data-range=end][_ngcontent-%COMP%]{border-inline-start-color:var(--tui-background-neutral-1);color:var(--tui-text-primary-on-accent-1)}._picking[_nghost-%COMP%]   .t-cell[data-range=end][_ngcontent-%COMP%]{border-inline-start-color:var(--tui-background-neutral-1-hover)}.t-cell[data-range=end][_ngcontent-%COMP%]:not(:first-child):before{left:-1rem}.t-cell[data-range=end][_ngcontent-%COMP%]:after{background:var(--tui-background-accent-1);transform:scaleX(-1)}.t-cell[data-range=active][_ngcontent-%COMP%]{color:var(--tui-text-primary-on-accent-1)}.t-cell[data-range=active][_ngcontent-%COMP%]:after{background:var(--tui-background-accent-1);-webkit-mask:none;mask:none}.t-cell_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity);pointer-events:none}.t-cell_today[_ngcontent-%COMP%]{text-decoration:underline;text-underline-offset:.25rem}@media (hover: hover){.t-cell[_ngcontent-%COMP%]:hover:not([data-range=start]):not([data-range=end]):before{background:var(--tui-background-neutral-1-hover)}.t-cell[data-range=start][_ngcontent-%COMP%]:hover:after, .t-cell[data-range=end][_ngcontent-%COMP%]:hover:after, .t-cell[data-range=active][_ngcontent-%COMP%]:hover:after{background:var(--tui-background-accent-1-hover)}}[_nghost-%COMP%]{display:block;block-size:12rem;inline-size:16rem;padding:1.125rem;box-sizing:content-box}.t-spin[_ngcontent-%COMP%]{margin-block-end:1rem}.t-cell[_ngcontent-%COMP%]{inline-size:4rem;border-block-start-width:.75rem;border-block-end-width:.75rem}.t-scrollbar[_ngcontent-%COMP%]{block-size:inherit;inline-size:inherit}\"],\n      changeDetection: 0\n    });\n  }\n}\n__decorate([tuiPure], TuiCalendarMonth.prototype, \"calculateDisabledItemHandlerWithMinMax\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiCalendarMonth, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: 'tui-calendar-month',\n      imports: [AsyncPipe, NgForOf, NgIf, TuiCalendarYear, TuiHovered, TuiLet, TuiLink, TuiRepeatTimes, TuiScrollbar, TuiSpinButton],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[class._picking]': 'isSingle'\n      },\n      template: \"<tui-scrollbar\\n    *ngIf=\\\"isYearPickerShown; else monthSelect\\\"\\n    class=\\\"t-scrollbar\\\"\\n>\\n    <tui-calendar-year\\n        [initialItem]=\\\"year.year\\\"\\n        [max]=\\\"computedMax.year\\\"\\n        [min]=\\\"computedMin.year\\\"\\n        [value]=\\\"value\\\"\\n        (yearClick)=\\\"onPickerYearClick($event)\\\"\\n    />\\n</tui-scrollbar>\\n<ng-template #monthSelect>\\n    <tui-spin-button\\n        class=\\\"t-spin\\\"\\n        [focusable]=\\\"false\\\"\\n        [leftDisabled]=\\\"previousYearDisabled\\\"\\n        [rightDisabled]=\\\"nextYearDisabled\\\"\\n        (leftClick)=\\\"onPreviousYear()\\\"\\n        (rightClick)=\\\"onNextYear()\\\"\\n    >\\n        <button\\n            automation-id=\\\"tui-calendar-month__active-year\\\"\\n            tabIndex=\\\"-1\\\"\\n            tuiLink\\n            type=\\\"button\\\"\\n            (click)=\\\"onYearClick()\\\"\\n        >\\n            {{ year.formattedYear }}\\n        </button>\\n    </tui-spin-button>\\n    <div\\n        *tuiRepeatTimes=\\\"let row of 3\\\"\\n        class=\\\"t-row\\\"\\n    >\\n        <ng-container *tuiRepeatTimes=\\\"let column of 4\\\">\\n            <div\\n                *tuiLet=\\\"getTuiMonth(row * 4 + column, year.year) as item\\\"\\n                class=\\\"t-cell\\\"\\n                [attr.data-range]=\\\"getItemRange(item)\\\"\\n                [class.t-cell_disabled]=\\\"disabledItemHandlerWithMinMax(item)\\\"\\n                [class.t-cell_today]=\\\"isItemToday(item)\\\"\\n                (click)=\\\"onItemClick(item)\\\"\\n                (tuiHoveredChange)=\\\"onItemHovered($event, item)\\\"\\n            >\\n                {{ months()?.[row * 4 + column] }}\\n            </div>\\n        </ng-container>\\n    </div>\\n</ng-template>\\n\",\n      styles: [\".t-row{display:flex;justify-content:flex-start;font:var(--tui-font-text-m)}.t-row:first-child{justify-content:flex-end}.t-row:last-child{justify-content:flex-start}.t-cell{position:relative;display:flex;align-items:center;justify-content:center;line-height:2rem;isolation:isolate;cursor:pointer;overflow:hidden;border:.125rem solid transparent;box-sizing:border-box;-webkit-mask:linear-gradient(transparent calc(50% - 1rem),#000 calc(50% - 1rem),#000 calc(50% + 1rem),transparent calc(50% + 1rem));mask:linear-gradient(transparent calc(50% - 1rem),#000 calc(50% - 1rem),#000 calc(50% + 1rem),transparent calc(50% + 1rem))}.t-cell:first-child{border-inline-start-color:transparent!important}.t-cell:last-child{border-inline-end-color:transparent!important}.t-cell:before,.t-cell:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\\\"\\\";z-index:-1;border-radius:var(--tui-radius-m)}.t-cell:after{-webkit-mask:url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 12 32\\\"><path d=\\\"M0.2856 0L0.6763 0C2.9265 0 4.9876 1.259 6.0147 3.2611L10.2442 11.5048C11.5301 14.0113 11.5683 16.9754 10.3472 19.5141L5.9766 28.6007C4.9772 30.6786 2.8754 32 0.5696 32H0.285645V0Z\\\"></path></svg>') right / .75rem 100% no-repeat,linear-gradient(#000,#000) left / calc(100% - .7rem) 100% no-repeat;mask:url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 12 32\\\"><path d=\\\"M0.2856 0L0.6763 0C2.9265 0 4.9876 1.259 6.0147 3.2611L10.2442 11.5048C11.5301 14.0113 11.5683 16.9754 10.3472 19.5141L5.9766 28.6007C4.9772 30.6786 2.8754 32 0.5696 32H0.285645V0Z\\\"></path></svg>') right / .75rem 100% no-repeat,linear-gradient(#000,#000) left / calc(100% - .7rem) 100% no-repeat}.t-cell[data-range]:before{background:var(--tui-background-neutral-1)}:host._picking .t-cell[data-range]:before{background:var(--tui-background-neutral-1-hover)}.t-cell[data-range=middle]{border-color:var(--tui-background-neutral-1)}:host._picking .t-cell[data-range=middle]{border-color:var(--tui-background-neutral-1-hover)}.t-cell[data-range=middle]:not(:first-child):before{border-start-start-radius:0;border-end-start-radius:0}.t-cell[data-range=middle]:not(:last-child):before{border-start-end-radius:0;border-end-end-radius:0}.t-cell[data-range=start]{border-inline-end-color:var(--tui-background-neutral-1);color:var(--tui-text-primary-on-accent-1)}:host._picking .t-cell[data-range=start]{border-inline-end-color:var(--tui-background-neutral-1-hover)}.t-cell[data-range=start]:not(:last-child):before{right:-1rem}.t-cell[data-range=start]:after{background:var(--tui-background-accent-1)}.t-cell[data-range=end]{border-inline-start-color:var(--tui-background-neutral-1);color:var(--tui-text-primary-on-accent-1)}:host._picking .t-cell[data-range=end]{border-inline-start-color:var(--tui-background-neutral-1-hover)}.t-cell[data-range=end]:not(:first-child):before{left:-1rem}.t-cell[data-range=end]:after{background:var(--tui-background-accent-1);transform:scaleX(-1)}.t-cell[data-range=active]{color:var(--tui-text-primary-on-accent-1)}.t-cell[data-range=active]:after{background:var(--tui-background-accent-1);-webkit-mask:none;mask:none}.t-cell_disabled{opacity:var(--tui-disabled-opacity);pointer-events:none}.t-cell_today{text-decoration:underline;text-underline-offset:.25rem}@media (hover: hover){.t-cell:hover:not([data-range=start]):not([data-range=end]):before{background:var(--tui-background-neutral-1-hover)}.t-cell[data-range=start]:hover:after,.t-cell[data-range=end]:hover:after,.t-cell[data-range=active]:hover:after{background:var(--tui-background-accent-1-hover)}}:host{display:block;block-size:12rem;inline-size:16rem;padding:1.125rem;box-sizing:content-box}.t-spin{margin-block-end:1rem}.t-cell{inline-size:4rem;border-block-start-width:.75rem;border-block-end-width:.75rem}.t-scrollbar{block-size:inherit;inline-size:inherit}\\n\"]\n    }]\n  }], null, {\n    value: [{\n      type: Input\n    }],\n    year: [{\n      type: Input\n    }],\n    disabledItemHandler: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    monthClick: [{\n      type: Output\n    }],\n    hoveredItemChange: [{\n      type: Output\n    }],\n    yearChange: [{\n      type: Output\n    }],\n    calculateDisabledItemHandlerWithMinMax: []\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiCalendarMonth };\n", "import { __decorate } from 'tslib';\nimport { AsyncPipe, NgForOf, NgIf } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';\nimport { TUI_FIRST_DAY, TUI_LAST_DAY, TuiMonth, TuiDayRange, TuiDay } from '@taiga-ui/cdk/date-time';\nimport { tuiWatch } from '@taiga-ui/cdk/observables';\nimport { TuiMapperPipe } from '@taiga-ui/cdk/pipes/mapper';\nimport { tuiIsString, tuiNullableSame, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { TuiCalendar } from '@taiga-ui/core/components/calendar';\nimport * as i1 from '@taiga-ui/core/components/data-list';\nimport { TuiDataList } from '@taiga-ui/core/components/data-list';\nimport { TuiIcon } from '@taiga-ui/core/components/icon';\nimport { TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';\nimport { TUI_OTHER_DATE_TEXT, TUI_CALENDAR_DATE_STREAM } from '@taiga-ui/kit/tokens';\nconst _c0 = (a0, a1, a2, a3) => [a0, a1, a2, a3, false];\nconst _c1 = (a0, a1, a2, a3) => [a0, a1, a2, a3, true];\nconst _c2 = (a0, a1, a2, a3, a4, a5) => [a0, a1, a2, a3, a4, a5];\nfunction TuiCalendarRange_tui_calendar_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-calendar\", 3);\n    i0.ɵɵpipe(1, \"tuiMapper\");\n    i0.ɵɵpipe(2, \"tuiMapper\");\n    i0.ɵɵpipe(3, \"tuiMapper\");\n    i0.ɵɵpipe(4, \"tuiMapper\");\n    i0.ɵɵtwoWayListener(\"hoveredItemChange\", function TuiCalendarRange_tui_calendar_4_Template_tui_calendar_hoveredItemChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r2.hoveredItem, $event) || (ctx_r2.hoveredItem = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"dayClick\", function TuiCalendarRange_tui_calendar_4_Template_tui_calendar_dayClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDayClick($event));\n    })(\"monthChange\", function TuiCalendarRange_tui_calendar_4_Template_tui_calendar_monthChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onMonthChange($event.append({\n        month: -1\n      })));\n    })(\"mousedown.prevent.silent\", function TuiCalendarRange_tui_calendar_4_Template_tui_calendar_mousedown_prevent_silent_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      return i0.ɵɵresetView(0);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabledItemHandler\", ctx_r2.calculatedDisabledItemHandler)(\"markerHandler\", ctx_r2.markerHandler)(\"max\", i0.ɵɵpipeBindV(1, 9, i0.ɵɵpureFunction4(29, _c0, ctx_r2.max, ctx_r2.capsMapper, ctx_r2.value, ctx_r2.maxLength)))(\"min\", i0.ɵɵpipeBindV(2, 15, i0.ɵɵpureFunction4(34, _c1, ctx_r2.min, ctx_r2.capsMapper, ctx_r2.value, ctx_r2.maxLength)))(\"minViewedMonth\", i0.ɵɵpipeBind3(3, 21, ctx_r2.defaultViewedMonth, ctx_r2.monthOffset, 1))(\"month\", i0.ɵɵpipeBind3(4, 25, ctx_r2.defaultViewedMonth, ctx_r2.monthOffset, 1))(\"showAdjacent\", false)(\"value\", ctx_r2.value);\n    i0.ɵɵtwoWayProperty(\"hoveredItem\", ctx_r2.hoveredItem);\n  }\n}\nfunction TuiCalendarRange_ng_template_5_button_1_tui_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tui-icon\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"font-size\", 1, \"rem\");\n    i0.ɵɵproperty(\"icon\", ctx_r2.icons.check);\n  }\n}\nfunction TuiCalendarRange_ng_template_5_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function TuiCalendarRange_ng_template_5_button_1_Template_button_click_0_listener() {\n      const item_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onItemSelect(item_r5));\n    })(\"mousedown.prevent.silent\", function TuiCalendarRange_ng_template_5_button_1_Template_button_mousedown_prevent_silent_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      return i0.ɵɵresetView(0);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, TuiCalendarRange_ng_template_5_button_1_tui_icon_2_Template, 1, 3, \"tui-icon\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"aria-checked\", ctx_r2.isItemActive(item_r5));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r5, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isItemActive(item_r5));\n  }\n}\nfunction TuiCalendarRange_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tui-data-list\", 4);\n    i0.ɵɵtemplate(1, TuiCalendarRange_ng_template_5_button_1_Template, 3, 3, \"button\", 5);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"tuiMapper\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"flex\", 1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBindV(3, 5, i0.ɵɵpureFunction6(12, _c2, ctx_r2.items, ctx_r2.mapper, ctx_r2.min, ctx_r2.max, ctx_r2.minLength, i0.ɵɵpipeBind1(2, 3, ctx_r2.otherDateText$))));\n  }\n}\nconst calculateDisabledItemHandler = (disabledItemHandler, value, minLength) => item => {\n  if (!value?.isSingleDay || !minLength) {\n    return disabledItemHandler(item);\n  }\n  const negativeMinLength = Object.fromEntries(Object.entries(minLength).map(([key, value]) => [key, -value]));\n  const disabledBefore = value.from.append(negativeMinLength).append({\n    day: 1\n  });\n  const disabledAfter = value.from.append(minLength).append({\n    day: -1\n  });\n  const inDisabledRange = disabledBefore.dayBefore(item) && disabledAfter.dayAfter(item);\n  return inDisabledRange || disabledItemHandler(item);\n};\nconst TUI_DAY_CAPS_MAPPER = (current, value, maxLength, backwards) => {\n  if (!value?.isSingleDay || !maxLength) {\n    return backwards ? current || TUI_FIRST_DAY : current || TUI_LAST_DAY;\n  }\n  const negativeMaxLength = Object.fromEntries(Object.entries(maxLength).map(([key, value]) => [key, -value]));\n  const dateShift = value.from.append(backwards ? negativeMaxLength : maxLength).append({\n    day: !backwards ? -1 : 1\n  });\n  if (backwards) {\n    return dateShift.dayBefore(current || TUI_FIRST_DAY) ? current || TUI_FIRST_DAY : dateShift;\n  }\n  if (!current) {\n    return dateShift;\n  }\n  return dateShift.dayAfter(current) ? current : dateShift;\n};\nclass TuiCalendarRange {\n  constructor() {\n    /**\n     * @deprecated use `item`\n     */\n    this.selectedPeriod = null;\n    this.otherDateText$ = inject(TUI_OTHER_DATE_TEXT);\n    this.icons = inject(TUI_COMMON_ICONS);\n    this.previousValue = null;\n    this.hoveredItem = null;\n    this.capsMapper = TUI_DAY_CAPS_MAPPER;\n    this.defaultViewedMonth = TuiMonth.currentLocal();\n    this.disabledItemHandler = TUI_FALSE_HANDLER;\n    this.markerHandler = null;\n    this.items = [];\n    this.min = TUI_FIRST_DAY;\n    this.max = TUI_LAST_DAY;\n    this.minLength = null;\n    this.maxLength = null;\n    this.value = null;\n    this.item = null;\n    this.valueChange = new EventEmitter();\n    this.itemChange = new EventEmitter();\n    this.monthOffset = (value, month) => value.append({\n      month\n    });\n    this.mapper = (items, min, max, minLength, otherDateText) => [...items.filter(item => (minLength === null || item.range.from.append(minLength).daySameOrBefore(item.range.to)) && (min === null || item.range.to.daySameOrAfter(min)) && (max === null || item.range.from.daySameOrBefore(max))), otherDateText || ''];\n    inject(TUI_CALENDAR_DATE_STREAM, {\n      optional: true\n    })?.pipe(tuiWatch(), takeUntilDestroyed()).subscribe(value => {\n      this.value = value;\n      this.initDefaultViewedMonth();\n    });\n  }\n  /**\n   * @deprecated use `item`\n   */\n  get selectedActivePeriod() {\n    return this.selectedPeriod;\n  }\n  /**\n   * @deprecated use `item`\n   */\n  set selectedActivePeriod(period) {\n    this.selectedPeriod = period;\n  }\n  ngOnChanges() {\n    this.initDefaultViewedMonth();\n  }\n  ngOnInit() {\n    this.initDefaultViewedMonth();\n  }\n  get calculatedDisabledItemHandler() {\n    return this.calculateDisabledItemHandler(this.disabledItemHandler, this.value, this.minLength);\n  }\n  onEsc(event) {\n    if (event.key !== 'Escape' || !this.value?.isSingleDay) {\n      return;\n    }\n    event.stopPropagation();\n    this.value = this.previousValue;\n  }\n  isItemActive(item) {\n    const {\n      activePeriod\n    } = this;\n    return tuiIsString(item) && activePeriod === null || activePeriod === item || activePeriod?.toString() === item.toString();\n  }\n  onItemSelect(item) {\n    if (!tuiIsString(item)) {\n      this.selectedActivePeriod = item;\n      this.updateValue(item.range.dayLimit(this.min, this.max));\n      this.itemChange.emit(item);\n    } else if (this.activePeriod !== null) {\n      this.selectedActivePeriod = null;\n      this.updateValue(null);\n      this.itemChange.emit(null);\n    }\n    this.initDefaultViewedMonth();\n  }\n  onMonthChange(month) {\n    this.defaultViewedMonth = month;\n  }\n  onDayClick(day) {\n    this.previousValue = this.value;\n    this.selectedActivePeriod = null;\n    if (!this.value?.isSingleDay) {\n      this.value = new TuiDayRange(day, day);\n      this.itemChange.emit(this.findItemByDayRange(this.value));\n    } else {\n      const sortedDayRange = TuiDayRange.sort(this.value.from, day);\n      this.updateValue(sortedDayRange);\n      this.itemChange.emit(this.findItemByDayRange(sortedDayRange));\n    }\n  }\n  updateValue(value) {\n    this.value = value;\n    this.valueChange.emit(value);\n  }\n  get activePeriod() {\n    return this.item ?? this.selectedActivePeriod ?? (this.items.find(item => tuiNullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) && a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null);\n  }\n  calculateDisabledItemHandler(disabledItemHandler, value, minLength) {\n    return calculateDisabledItemHandler(disabledItemHandler, value, minLength);\n  }\n  initDefaultViewedMonth() {\n    if (this.value) {\n      this.defaultViewedMonth = this.items.length ? this.value.to : this.value.from;\n    } else if (this.max && this.defaultViewedMonth.monthSameOrAfter(this.max)) {\n      this.defaultViewedMonth = this.items.length ? this.max : this.max.append({\n        month: -1\n      });\n    } else if (this.min && this.defaultViewedMonth.monthSameOrBefore(this.min)) {\n      this.defaultViewedMonth = this.min;\n    }\n  }\n  findItemByDayRange(dayRange) {\n    return this.items.find(item => dayRange.daySame(item.range)) ?? null;\n  }\n  static {\n    this.ɵfac = function TuiCalendarRange_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiCalendarRange)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiCalendarRange,\n      selectors: [[\"tui-calendar-range\"]],\n      hostBindings: function TuiCalendarRange_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown.capture\", function TuiCalendarRange_keydown_capture_HostBindingHandler($event) {\n            return ctx.onEsc($event);\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      inputs: {\n        defaultViewedMonth: \"defaultViewedMonth\",\n        disabledItemHandler: \"disabledItemHandler\",\n        markerHandler: \"markerHandler\",\n        items: \"items\",\n        min: \"min\",\n        max: \"max\",\n        minLength: \"minLength\",\n        maxLength: \"maxLength\",\n        value: \"value\",\n        item: \"item\"\n      },\n      outputs: {\n        valueChange: \"valueChange\",\n        itemChange: \"itemChange\"\n      },\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 7,\n      vars: 37,\n      consts: [[\"presets\", \"\"], [\"automation-id\", \"tui-calendar-range__calendar\", 1, \"t-calendar\", 3, \"hoveredItemChange\", \"dayClick\", \"monthChange\", \"mousedown.prevent.silent\", \"disabledItemHandler\", \"markerHandler\", \"max\", \"maxViewedMonth\", \"min\", \"month\", \"showAdjacent\", \"value\", \"hoveredItem\"], [3, \"disabledItemHandler\", \"markerHandler\", \"max\", \"min\", \"minViewedMonth\", \"month\", \"showAdjacent\", \"value\", \"hoveredItem\", \"hoveredItemChange\", \"dayClick\", \"monthChange\", \"mousedown.prevent.silent\", 4, \"ngIf\", \"ngIfElse\"], [3, \"hoveredItemChange\", \"dayClick\", \"monthChange\", \"mousedown.prevent.silent\", \"disabledItemHandler\", \"markerHandler\", \"max\", \"min\", \"minViewedMonth\", \"month\", \"showAdjacent\", \"value\", \"hoveredItem\"], [\"automation-id\", \"tui-calendar-range__menu\", \"role\", \"menu\"], [\"automation-id\", \"tui-calendar-range__menu__item\", \"role\", \"menuitemradio\", \"tuiOption\", \"\", \"type\", \"button\", 3, \"click\", \"mousedown.prevent.silent\", 4, \"ngFor\", \"ngForOf\"], [\"automation-id\", \"tui-calendar-range__menu__item\", \"role\", \"menuitemradio\", \"tuiOption\", \"\", \"type\", \"button\", 3, \"click\", \"mousedown.prevent.silent\"], [\"automation-id\", \"tui-calendar-range__checkmark\", 3, \"icon\", \"font-size\", 4, \"ngIf\"], [\"automation-id\", \"tui-calendar-range__checkmark\", 3, \"icon\"]],\n      template: function TuiCalendarRange_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"tui-calendar\", 1);\n          i0.ɵɵpipe(1, \"tuiMapper\");\n          i0.ɵɵpipe(2, \"tuiMapper\");\n          i0.ɵɵpipe(3, \"tuiMapper\");\n          i0.ɵɵtwoWayListener(\"hoveredItemChange\", function TuiCalendarRange_Template_tui_calendar_hoveredItemChange_0_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.hoveredItem, $event) || (ctx.hoveredItem = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵlistener(\"dayClick\", function TuiCalendarRange_Template_tui_calendar_dayClick_0_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onDayClick($event));\n          })(\"monthChange\", function TuiCalendarRange_Template_tui_calendar_monthChange_0_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onMonthChange($event));\n          })(\"mousedown.prevent.silent\", function TuiCalendarRange_Template_tui_calendar_mousedown_prevent_silent_0_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(0);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(4, TuiCalendarRange_tui_calendar_4_Template, 5, 39, \"tui-calendar\", 2)(5, TuiCalendarRange_ng_template_5_Template, 4, 19, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        }\n        if (rf & 2) {\n          const presets_r6 = i0.ɵɵreference(6);\n          i0.ɵɵproperty(\"disabledItemHandler\", ctx.calculatedDisabledItemHandler)(\"markerHandler\", ctx.markerHandler)(\"max\", i0.ɵɵpipeBindV(1, 11, i0.ɵɵpureFunction4(27, _c0, ctx.max, ctx.capsMapper, ctx.value, ctx.maxLength)))(\"maxViewedMonth\", ctx.items.length ? null : i0.ɵɵpipeBind3(2, 17, ctx.defaultViewedMonth, ctx.monthOffset, -1))(\"min\", i0.ɵɵpipeBindV(3, 21, i0.ɵɵpureFunction4(32, _c1, ctx.min, ctx.capsMapper, ctx.value, ctx.maxLength)))(\"month\", ctx.defaultViewedMonth)(\"showAdjacent\", !!ctx.items.length)(\"value\", ctx.value);\n          i0.ɵɵtwoWayProperty(\"hoveredItem\", ctx.hoveredItem);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", !ctx.items.length)(\"ngIfElse\", presets_r6);\n        }\n      },\n      dependencies: [AsyncPipe, NgForOf, NgIf, TuiCalendar, i1.TuiDataListComponent, i1.TuiOption, TuiIcon, TuiMapperPipe],\n      styles: [\"[_nghost-%COMP%]{display:flex;min-inline-size:30rem}.t-calendar[_ngcontent-%COMP%]{border-inline-end:1px solid var(--tui-border-normal)}\"],\n      changeDetection: 0\n    });\n  }\n}\n__decorate([tuiPure], TuiCalendarRange.prototype, \"calculateDisabledItemHandler\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiCalendarRange, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: 'tui-calendar-range',\n      imports: [AsyncPipe, NgForOf, NgIf, TuiCalendar, TuiDataList, TuiIcon, TuiMapperPipe],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '(document:keydown.capture)': 'onEsc($event)'\n      },\n      template: \"<tui-calendar\\n    automation-id=\\\"tui-calendar-range__calendar\\\"\\n    class=\\\"t-calendar\\\"\\n    [disabledItemHandler]=\\\"calculatedDisabledItemHandler\\\"\\n    [markerHandler]=\\\"markerHandler\\\"\\n    [max]=\\\"max | tuiMapper: capsMapper : value : maxLength : false\\\"\\n    [maxViewedMonth]=\\\"items.length ? null : (defaultViewedMonth | tuiMapper: monthOffset : -1)\\\"\\n    [min]=\\\"min | tuiMapper: capsMapper : value : maxLength : true\\\"\\n    [month]=\\\"defaultViewedMonth\\\"\\n    [showAdjacent]=\\\"!!items.length\\\"\\n    [value]=\\\"value\\\"\\n    [(hoveredItem)]=\\\"hoveredItem\\\"\\n    (dayClick)=\\\"onDayClick($event)\\\"\\n    (monthChange)=\\\"onMonthChange($event)\\\"\\n    (mousedown.prevent.silent)=\\\"(0)\\\"\\n/>\\n<tui-calendar\\n    *ngIf=\\\"!items.length; else presets\\\"\\n    [disabledItemHandler]=\\\"calculatedDisabledItemHandler\\\"\\n    [markerHandler]=\\\"markerHandler\\\"\\n    [max]=\\\"max | tuiMapper: capsMapper : value : maxLength : false\\\"\\n    [min]=\\\"min | tuiMapper: capsMapper : value : maxLength : true\\\"\\n    [minViewedMonth]=\\\"defaultViewedMonth | tuiMapper: monthOffset : 1\\\"\\n    [month]=\\\"defaultViewedMonth | tuiMapper: monthOffset : 1\\\"\\n    [showAdjacent]=\\\"false\\\"\\n    [value]=\\\"value\\\"\\n    [(hoveredItem)]=\\\"hoveredItem\\\"\\n    (dayClick)=\\\"onDayClick($event)\\\"\\n    (monthChange)=\\\"onMonthChange($event.append({month: -1}))\\\"\\n    (mousedown.prevent.silent)=\\\"(0)\\\"\\n/>\\n<ng-template #presets>\\n    <tui-data-list\\n        automation-id=\\\"tui-calendar-range__menu\\\"\\n        role=\\\"menu\\\"\\n        [style.flex]=\\\"1\\\"\\n    >\\n        <button\\n            *ngFor=\\\"let item of items | tuiMapper: mapper : min : max : minLength : (otherDateText$ | async)\\\"\\n            automation-id=\\\"tui-calendar-range__menu__item\\\"\\n            role=\\\"menuitemradio\\\"\\n            tuiOption\\n            type=\\\"button\\\"\\n            [attr.aria-checked]=\\\"isItemActive(item)\\\"\\n            (click)=\\\"onItemSelect(item)\\\"\\n            (mousedown.prevent.silent)=\\\"(0)\\\"\\n        >\\n            {{ item }}\\n            <tui-icon\\n                *ngIf=\\\"isItemActive(item)\\\"\\n                automation-id=\\\"tui-calendar-range__checkmark\\\"\\n                [icon]=\\\"icons.check\\\"\\n                [style.font-size.rem]=\\\"1\\\"\\n            />\\n        </button>\\n    </tui-data-list>\\n</ng-template>\\n\",\n      styles: [\":host{display:flex;min-inline-size:30rem}.t-calendar{border-inline-end:1px solid var(--tui-border-normal)}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    defaultViewedMonth: [{\n      type: Input\n    }],\n    disabledItemHandler: [{\n      type: Input\n    }],\n    markerHandler: [{\n      type: Input\n    }],\n    items: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    item: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    itemChange: [{\n      type: Output\n    }],\n    calculateDisabledItemHandler: []\n  });\n})();\nclass TuiDayRangePeriod {\n  constructor(range, name, content) {\n    this.range = range;\n    this.name = name;\n    this.content = content;\n  }\n  toString() {\n    return this.name;\n  }\n}\nfunction tuiCreateDefaultDayRangePeriods(periodTitles = ['For all the time', 'Today', 'Yesterday', 'Current week', 'Current month', 'Previous month']) {\n  const today = TuiDay.currentLocal();\n  const yesterday = today.append({\n    day: -1\n  });\n  const startOfWeek = today.append({\n    day: -today.dayOfWeek()\n  });\n  const endOfWeek = startOfWeek.append({\n    day: 6\n  });\n  const startOfMonth = today.append({\n    day: 1 - today.day\n  });\n  const endOfMonth = startOfMonth.append({\n    month: 1,\n    day: -1\n  });\n  const startOfLastMonth = startOfMonth.append({\n    month: -1\n  });\n  return [new TuiDayRangePeriod(new TuiDayRange(TUI_FIRST_DAY, today), periodTitles[0]), new TuiDayRangePeriod(new TuiDayRange(today, today), periodTitles[1]), new TuiDayRangePeriod(new TuiDayRange(yesterday, yesterday), periodTitles[2]), new TuiDayRangePeriod(new TuiDayRange(startOfWeek, endOfWeek), periodTitles[3]), new TuiDayRangePeriod(new TuiDayRange(startOfMonth, endOfMonth), periodTitles[4]), new TuiDayRangePeriod(new TuiDayRange(startOfLastMonth, startOfMonth.append({\n    day: -1\n  })), periodTitles[5])];\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_DAY_CAPS_MAPPER, TuiCalendarRange, TuiDayRangePeriod, calculateDisabledItemHandler, tuiCreateDefaultDayRangePeriods };\n", "import * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, Directive, Input, Pipe } from '@angular/core';\nimport { DefaultValueAccessor } from '@angular/forms';\nimport { MASKITO_DEFAULT_ELEMENT_PREDICATE, maskitoTransform, Maskito, MASKITO_DEFAULT_OPTIONS } from '@maskito/core';\nclass MaskitoDirective {\n  constructor() {\n    this.elementRef = inject(ElementRef).nativeElement;\n    this.ngZone = inject(NgZone);\n    this.maskedElement = null;\n    this.options = null;\n    this.elementPredicate = MASKITO_DEFAULT_ELEMENT_PREDICATE;\n    const accessor = inject(DefaultValueAccessor, {\n      self: true,\n      optional: true\n    });\n    if (accessor) {\n      const original = accessor.writeValue.bind(accessor);\n      accessor.writeValue = value => {\n        original(this.options ? maskitoTransform(String(value ?? ''), this.options) : value);\n      };\n    }\n  }\n  async ngOnChanges() {\n    const {\n      elementPredicate,\n      options,\n      maskedElement,\n      elementRef,\n      ngZone\n    } = this;\n    maskedElement?.destroy();\n    if (!options) {\n      return;\n    }\n    const predicateResult = await elementPredicate(elementRef);\n    if (this.elementPredicate !== elementPredicate || this.options !== options) {\n      // Ignore the result of the predicate if the\n      // maskito element (or its options) has changed before the predicate was resolved.\n      return;\n    }\n    ngZone.runOutsideAngular(() => {\n      this.maskedElement = new Maskito(predicateResult, options);\n    });\n  }\n  ngOnDestroy() {\n    this.maskedElement?.destroy();\n  }\n  static {\n    this.ɵfac = function MaskitoDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MaskitoDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MaskitoDirective,\n      selectors: [[\"\", \"maskito\", \"\"]],\n      inputs: {\n        options: [0, \"maskito\", \"options\"],\n        elementPredicate: [0, \"maskitoElement\", \"elementPredicate\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskitoDirective, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[maskito]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    options: [{\n      type: Input,\n      args: ['maskito']\n    }],\n    elementPredicate: [{\n      type: Input,\n      args: ['maskitoElement']\n    }]\n  });\n})();\nclass MaskitoPipe {\n  transform(value, maskitoOptions) {\n    return maskitoTransform(String(value ?? ''), maskitoOptions ?? MASKITO_DEFAULT_OPTIONS);\n  }\n  static {\n    this.ɵfac = function MaskitoPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MaskitoPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"maskito\",\n      type: MaskitoPipe,\n      pure: true,\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskitoPipe, [{\n    type: Pipe,\n    args: [{\n      standalone: true,\n      name: 'maskito'\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MaskitoDirective, MaskitoPipe };\n", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n  var _super = _createSuper(ParseError);\n  function ParseError(code) {\n    var _this;\n    _classCallCheck(this, ParseError);\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexport { ParseError as default };\n", "// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n", "// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n", "var objectConstructor = {}.constructor;\nexport default function isObject(object) {\n  return object !== undefined && object !== null && object.constructor === objectConstructor;\n}\n", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport compare from './tools/semver-compare.js';\nimport isObject from './helpers/isObject.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n  return Metadata;\n}();\nexport { Metadata as default };\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n  return NumberingPlan;\n}();\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n    this._format = format;\n    this.metadata = metadata;\n  }\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() &&\n      // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n    this.type = type;\n    this.metadata = metadata;\n  }\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n  return Type;\n}();\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n    case 'MOBILE':\n      return types[1];\n    case 'TOLL_FREE':\n      return types[2];\n    case 'PREMIUM_RATE':\n      return types[3];\n    case 'PERSONAL_NUMBER':\n      return types[4];\n    case 'VOICEMAIL':\n      return types[5];\n    case 'UAN':\n      return types[6];\n    case 'PAGER':\n      return types[7];\n    case 'VOIP':\n      return types[8];\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n  if (!isObject(metadata) || !isObject(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar typeOf = function typeOf(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries.hasOwnProperty(country);\n}\nfunction setVersion(metadata) {\n  var version = metadata.version;\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n", "import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n", "import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n", "import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n    i++;\n  }\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n    if (digit) {\n      result += digit;\n    }\n  }\n  return result;\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {function?} emitEvent - An optional \"emit event\" function.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      // `emitEvent` argument was added to this `export`ed function on Dec 26th, 2023.\n      // Any 3rd-party code that used to `import` and call this function before that\n      // won't be passing any `emitEvent` argument.\n      //\n      // The addition of the `emitEvent` argument was to fix the slightly-weird behavior\n      // of parsing an input string when the user inputs something like `\"2+7\"\n      // https://github.com/catamphetamine/react-phone-number-input/issues/437\n      //\n      // If the parser encounters an unexpected `+` in a string being parsed\n      // then it simply discards that out-of-place `+` and any following characters.\n      //\n      if (typeof emitEvent === 'function') {\n        emitEvent('end');\n      }\n      return;\n    }\n    return '+';\n  } // Allow digits.\n\n  return parseDigit(character);\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n", "import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n    var mobile_type = metadata.type('MOBILE');\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n", "import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n  metadata = new Metadata(metadata);\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n", "/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returns an empty object — `{}` —\n  // that means that the phone number is malformed,\n  // so it can't possibly be valid.\n\n  if (!input.country && !input.countryCallingCode) {\n    return;\n  }\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n    return 'FIXED_LINE';\n  }\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n", "import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());\n}\n", "import Metadata from '../metadata.js';\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\n\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\n  var _metadata = new Metadata(metadata);\n  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);\n  if (!possibleCountries) {\n    return [];\n  }\n  return possibleCountries.filter(function (country) {\n    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);\n  });\n}\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\n  var _metadata = new Metadata(metadata);\n  _metadata.selectNumberingPlan(country);\n  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\n    return true;\n  }\n  return false;\n}\n", "import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n", "import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n    withNationalPrefix = _ref.withNationalPrefix,\n    carrierCode = _ref.carrierCode,\n    metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() :\n  // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n  return formattedNumber;\n}\n", "import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n", "function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n    var _part$split = part.split('='),\n      _part$split2 = _slicedToArray(_part$split, 2),\n      name = _part$split2[0],\n      value = _part$split2[1];\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n      case 'ext':\n        ext = value;\n        break;\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n  var result = {\n    number: number\n  };\n  if (ext) {\n    result.ext = ext;\n  }\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n    ext = _ref.ext;\n  if (!number) {\n    return '';\n  }\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n};\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n  metadata = new Metadata(metadata);\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n  if (!format) {\n    return number;\n  }\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n    return formattedNumber;\n  }\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n", "function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js'; // import checkNumberLength from './helpers/checkNumberLength.js'\n\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata — Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n      country = _getCountryAndCountry.country,\n      countryCallingCode = _getCountryAndCountry.countryCallingCode;\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber; // Exclude `metadata` property output from `PhoneNumber.toString()`\n    // so that it doesn't clutter the console output of Node.js.\n    // Previously, when Node.js did `console.log(new PhoneNumber(...))`,\n    // it would output the whole internal structure of the `metadata` object.\n\n    this.getMetadata = function () {\n      return metadata;\n    };\n  }\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.getMetadata());\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.getMetadata());\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.getMetadata())\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n  return PhoneNumber;\n}();\nexport { PhoneNumber as default };\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson); // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}\n", "import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n  return number;\n}\n", "/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n      var nationalPrefix;\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n  return {\n    nationalNumber: number\n  };\n}\n", "import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n    carrierCode = _extractNationalNumbe.carrierCode,\n    nationalNumber = _extractNationalNumbe.nationalNumber;\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n  return true;\n}\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n    default:\n      return true;\n  }\n}\n", "import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n      possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n      nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n  return {\n    number: number\n  };\n}\n", "import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  }\n  var isNumberWithIddPrefix; // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      isNumberWithIddPrefix = true;\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          shorterNumber = _extractCountryCallin.number;\n        if (countryCallingCode) {\n          return {\n            countryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n      return {\n        // No need to set it to `UNSPECIFIED`. It can be just `undefined`.\n        // countryCallingCodeSource: 'UNSPECIFIED',\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n  if (number[1] === '0') {\n    return {};\n  }\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n    i++;\n  }\n  return {};\n} // The possible values for the returned `countryCallingCodeSource` are:\n//\n// Copy-pasted from:\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\n//\n// // The source from which the country_code is derived. This is not set in the\n// // general parsing method, but in the method that parses and keeps raw_input.\n// // New fields could be added upon request.\n// enum CountryCodeSource {\n//  // Default value returned if this is not set, because the phone number was\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\n//  // return false if this is the case.\n//  UNSPECIFIED = 0;\n//\n//  // The country_code is derived based on a phone number with a leading \"+\",\n//  // e.g. the French number \"+33 1 42 68 53 00\".\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\n//\n//  // The country_code is derived based on a phone number with a leading IDD,\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\n//  FROM_NUMBER_WITH_IDD = 5;\n//\n//  // The country_code is derived based on a phone number without a leading\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\n//  // supplied as France.\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\n//\n//  // The country_code is derived NOT based on the phone number itself, but\n//  // from the defaultCountry parameter provided in the parsing function by the\n//  // clients. This happens mostly for numbers written in the national format\n//  // (without country code). For example, this would be set when parsing the\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\n//  // France.\n//  FROM_DEFAULT_COUNTRY = 20;\n// }\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nexport default function getCountryByNationalNumber(nationalPhoneNumber, _ref) {\n  var countries = _ref.countries,\n    defaultCountry = _ref.defaultCountry,\n    metadata = _ref.metadata;\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata); // const matchingCountries = []\n\n  for (var _iterator = _createForOfIteratorHelperLoose(countries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // \"Leading digits\" patterns are only defined for about 20% of all countries.\n    // By definition, matching \"leading digits\" is a sufficient but not a necessary\n    // condition for a phone number to belong to a country.\n    // The point of \"leading digits\" check is that it's the fastest one to get a match.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\n    // because of the intended use of that feature.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      // If both the `defaultCountry` and the \"main\" one match the phone number,\n      // don't prefer the `defaultCountry` over the \"main\" one.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/154\n      return country; // // If the `defaultCountry` is among the `matchingCountries` then return it.\n      // if (defaultCountry) {\n      // \tif (country === defaultCountry) {\n      // \t\treturn country\n      // \t}\n      // \tmatchingCountries.push(country)\n      // } else {\n      // \treturn country\n      // }\n    }\n  } // // Return the first (\"main\") one of the `matchingCountries`.\n  // if (matchingCountries.length > 0) {\n  // \treturn matchingCountries[0]\n  // }\n}\n", "import getCountryByNationalNumber from './getCountryByNationalNumber.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, _ref) {\n  var nationalPhoneNumber = _ref.nationalNumber,\n    defaultCountry = _ref.defaultCountry,\n    metadata = _ref.metadata;\n\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  }\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n  return getCountryByNationalNumber(nationalPhoneNumber, {\n    countries: possibleCountries,\n    defaultCountry: defaultCountry,\n    metadata: metadata.metadata\n  });\n}\n", "// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\n// Example: `\"tel:12133734253;phone-context=+1\"`.\n// This function parses the full phone number from the local number and the `phone-context`\n// when the `phone-context` contains a `+` sign.\nimport { VALID_DIGITS // PLUS_CHARS\n} from '../constants.js';\nexport var PLUS_SIGN = '+';\nvar RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?';\nvar RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')';\nvar RFC3966_GLOBAL_NUMBER_DIGITS_ = '^' + '\\\\' + PLUS_SIGN + RFC3966_PHONE_DIGIT_ + '*' + '[' + VALID_DIGITS + ']' + RFC3966_PHONE_DIGIT_ + '*' + '$';\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g'); // In this port of Google's library, we don't accept alpha characters in phone numbers.\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\n\nvar ALPHANUM_ = VALID_DIGITS;\nvar RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar VALID_ALPHA_ = 'a-zA-Z';\nvar RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$';\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g');\nexport var RFC3966_PREFIX_ = 'tel:';\nexport var RFC3966_PHONE_CONTEXT_ = ';phone-context=';\nexport var RFC3966_ISDN_SUBADDRESS_ = ';isub=';\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\n\nexport default function extractPhoneContext(numberToExtractFrom) {\n  var indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_); // If no phone-context parameter is present\n\n  if (indexOfPhoneContext < 0) {\n    return null;\n  }\n  var phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length; // If phone-context parameter is empty\n\n  if (phoneContextStart >= numberToExtractFrom.length) {\n    return '';\n  }\n  var phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart); // If phone-context is not the last parameter\n\n  if (phoneContextEnd >= 0) {\n    return numberToExtractFrom.substring(phoneContextStart, phoneContextEnd);\n  } else {\n    return numberToExtractFrom.substring(phoneContextStart);\n  }\n}\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\n\nexport function isPhoneContextValid(phoneContext) {\n  if (phoneContext === null) {\n    return true;\n  }\n  if (phoneContext.length === 0) {\n    return false;\n  } // Does phone-context value match pattern of global-number-digits or domainname.\n\n  return RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) || RFC3966_DOMAINNAME_PATTERN_.test(phoneContext);\n}\n", "import extractPhoneContext, { isPhoneContextValid, PLUS_SIGN, RFC3966_PREFIX_, RFC3966_PHONE_CONTEXT_, RFC3966_ISDN_SUBADDRESS_ } from './extractPhoneContext.js';\nimport ParseError from '../ParseError.js';\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\n\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, _ref) {\n  var extractFormattedPhoneNumber = _ref.extractFormattedPhoneNumber;\n  var phoneContext = extractPhoneContext(numberToParse);\n  if (!isPhoneContextValid(phoneContext)) {\n    throw new ParseError('NOT_A_NUMBER');\n  }\n  var phoneNumberString;\n  if (phoneContext === null) {\n    // Extract a possible number from the string passed in.\n    // (this strips leading characters that could not be the start of a phone number)\n    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || '';\n  } else {\n    phoneNumberString = ''; // If the phone context contains a phone number prefix, we need to capture\n    // it, whereas domains will be ignored.\n\n    if (phoneContext.charAt(0) === PLUS_SIGN) {\n      phoneNumberString += phoneContext;\n    } // Now append everything between the \"tel:\" prefix and the phone-context.\n    // This should include the national number, an optional extension or\n    // isdn-subaddress component. Note we also handle the case when \"tel:\" is\n    // missing, as we have seen in some of the phone number inputs.\n    // In that case, we append everything from the beginning.\n\n    var indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_);\n    var indexOfNationalNumber; // RFC 3966 \"tel:\" prefix is preset at this stage because\n    // `isPhoneContextValid()` requires it to be present.\n\n    /* istanbul ignore else */\n\n    if (indexOfRfc3966Prefix >= 0) {\n      indexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length;\n    } else {\n      indexOfNationalNumber = 0;\n    }\n    var indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_);\n    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);\n  } // Delete the isdn-subaddress and everything after it if it is present.\n  // Note extension won't appear at the same time with isdn-subaddress\n  // according to paragraph 5.3 of the RFC3966 spec.\n\n  var indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_);\n  if (indexOfIsdn > 0) {\n    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);\n  } // If both phone context and isdn-subaddress are absent but other\n  // parameters are present, the parameters are left in nationalNumber.\n  // This is because we are concerned about deleting content from a potential\n  // number string when there is no strong evidence that the number is\n  // actually written in RFC3966.\n\n  if (phoneNumberString !== '') {\n    return phoneNumberString;\n  }\n}\n", "// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossible.js'; // import { parseRFC3966 } from './helpers/RFC3966.js'\n\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n    formattedPhoneNumber = _parseInput.number,\n    ext = _parseInput.ext,\n    error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n      throw new ParseError('NOT_A_NUMBER');\n    }\n    return {};\n  }\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n    country = _parsePhoneNumber.country,\n    nationalNumber = _parsePhoneNumber.nationalNumber,\n    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n    countryCallingCodeSource = _parsePhoneNumber.countryCallingCodeSource,\n    carrierCode = _parsePhoneNumber.carrierCode;\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n    return {};\n  } // Validate national (significant) number length.\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n    return {};\n  }\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n    if (country) {\n      phoneNumber.country = country;\n    }\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n    phoneNumber.__countryCallingCodeSource = countryCallingCodeSource;\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction _extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n    return;\n  }\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n  if (startsAt < 0) {\n    return;\n  }\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nfunction parseInput(text, v2, extract) {\n  // // Parse RFC 3966 phone number URI.\n  // if (text && text.indexOf('tel:') === 0) {\n  // \treturn parseRFC3966(text)\n  // }\n  // let number = extractFormattedPhoneNumber(text, extract, v2)\n  var number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\n    extractFormattedPhoneNumber: function extractFormattedPhoneNumber(text) {\n      return _extractFormattedPhoneNumber(text, extract, v2);\n    }\n  }); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n  var withExtensionStripped = extractExtension(number);\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n  if (ext) {\n    result.ext = ext;\n  }\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n    countryCallingCodeSource = _extractCountryCallin.countryCallingCodeSource,\n    countryCallingCode = _extractCountryCallin.countryCallingCode,\n    number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n  var country;\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is passed in \"national\" format\n  // then `number` is defined and `countryCallingCode` is `undefined`.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n  if (!number) {\n    return {\n      countryCallingCodeSource: countryCallingCodeSource,\n      countryCallingCode: countryCallingCode\n    };\n  }\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n    nationalNumber = _extractNationalNumbe.nationalNumber,\n    carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, {\n    nationalNumber: nationalNumber,\n    defaultCountry: defaultCountry,\n    metadata: metadata\n  });\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    countryCallingCodeSource: countryCallingCodeSource,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n", "function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport parse from './parse.js';\nexport default function parsePhoneNumberWithError(text, options, metadata) {\n  return parse(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n", "function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport isObject from './helpers/isObject.js'; // Extracts the following properties from function arguments:\n// * input `text`\n// * `options` object\n// * `metadata` JSON\n\nexport default function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n    arg_1 = _Array$prototype$slic2[0],\n    arg_2 = _Array$prototype$slic2[1],\n    arg_3 = _Array$prototype$slic2[2],\n    arg_4 = _Array$prototype$slic2[3];\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n}\n", "import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js';\nimport normalizeArguments from './normalizeArguments.js';\nexport default function parsePhoneNumberWithError() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  return parsePhoneNumberWithError_(text, options, metadata);\n}\n", "function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport parsePhoneNumberWithError from './parsePhoneNumberWithError_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n  try {\n    return parsePhoneNumberWithError(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n", "import normalizeArguments from './normalizeArguments.js';\nimport parsePhoneNumber_ from './parsePhoneNumber_.js';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  return parsePhoneNumber_(text, options, metadata);\n}\n", "function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport normalizeArguments from './normalizeArguments.js';\nimport parsePhoneNumberWithError from './parsePhoneNumberWithError_.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function validatePhoneNumberLength() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  }); // Parse phone number.\n\n  try {\n    var phoneNumber = parsePhoneNumberWithError(text, options, metadata);\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(phoneNumber.countryCallingCode);\n    var result = checkNumberLength(phoneNumber.nationalNumber, metadata);\n    if (result !== 'IS_POSSIBLE') {\n      return result;\n    }\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {\n      return error.message;\n    } else {\n      throw error;\n    }\n  }\n}\n", "function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\nvar Node = /*#__PURE__*/_createClass(function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  _classCallCheck(this, Node);\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n});\nvar LRUCache = /*#__PURE__*/function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    _classCallCheck(this, LRUCache);\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n      console.log(\"Item not available in cache for key \".concat(key));\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n  }]);\n  return LRUCache;\n}();\nexport { LRUCache as default };\n", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport LRUCache from './LRUCache.js'; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = /*#__PURE__*/function () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n    this.cache = new LRUCache(size);\n  }\n  _createClass(RegExpCache, [{\n    key: \"getPatternForRegExp\",\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n      return regExp;\n    }\n  }]);\n  return RegExpCache;\n}();\nexport { RegExpCache as default };\n", "/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n", "// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nexport var pZ = \"[\".concat(_pZ, \"]\");\nexport var PZ = \"[^\".concat(_pZ, \"]\");\nexport var _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nexport var pNd = \"[\".concat(_pNd, \"]\");\nexport var _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar pL = \"[\".concat(_pL, \"]\");\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = \"[\".concat(_pSc, \"]\");\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = \"[\".concat(_pMn, \"]\");\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = \"\\0-\\x7F\";\nvar _InLatin_1_Supplement = \"\\x80-\\xFF\";\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n  return latinLetterRegexp.test(letter);\n}\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n", "import parsePhoneNumber from '../parsePhoneNumber.js';\n/**\r\n * Matches a phone number object against a phone number string.\r\n * @param  {string} phoneNumberString\r\n * @param  {PhoneNumber} phoneNumber\r\n * @param  {object} metadata — Metadata JSON\r\n * @return {'INVALID_NUMBER'|'NO_MATCH'|'SHORT_NSN_MATCH'|'NSN_MATCH'|'EXACT_MATCH'}\r\n */\n\nexport default function matchPhoneNumberStringAgainstPhoneNumber(phoneNumberString, phoneNumber, metadata) {\n  // Parse `phoneNumberString`.\n  var phoneNumberStringContainsCallingCode = true;\n  var parsedPhoneNumber = parsePhoneNumber(phoneNumberString, metadata);\n  if (!parsedPhoneNumber) {\n    // If `phoneNumberString` didn't contain a country calling code\n    // then substitute it with the `phoneNumber`'s country calling code.\n    phoneNumberStringContainsCallingCode = false;\n    parsedPhoneNumber = parsePhoneNumber(phoneNumberString, {\n      defaultCallingCode: phoneNumber.countryCallingCode\n    }, metadata);\n  }\n  if (!parsedPhoneNumber) {\n    return 'INVALID_NUMBER';\n  } // Check that the extensions match.\n\n  if (phoneNumber.ext) {\n    if (parsedPhoneNumber.ext !== phoneNumber.ext) {\n      return 'NO_MATCH';\n    }\n  } else {\n    if (parsedPhoneNumber.ext) {\n      return 'NO_MATCH';\n    }\n  } // Check that country calling codes match.\n\n  if (phoneNumberStringContainsCallingCode) {\n    if (phoneNumber.countryCallingCode !== parsedPhoneNumber.countryCallingCode) {\n      return 'NO_MATCH';\n    }\n  } // Check if the whole numbers match.\n\n  if (phoneNumber.number === parsedPhoneNumber.number) {\n    if (phoneNumberStringContainsCallingCode) {\n      return 'EXACT_MATCH';\n    } else {\n      return 'NSN_MATCH';\n    }\n  } // Check if one national number is a \"suffix\" of the other.\n\n  if (phoneNumber.nationalNumber.indexOf(parsedPhoneNumber.nationalNumber) === 0 || parsedPhoneNumber.nationalNumber.indexOf(phoneNumber.nationalNumber) === 0) {\n    // \"A SHORT_NSN_MATCH occurs if there is a difference because of the\n    //  presence or absence of an 'Italian leading zero', the presence or\n    //  absence of an extension, or one NSN being a shorter variant of the\n    //  other.\"\n    return 'SHORT_NSN_MATCH';\n  }\n  return 'NO_MATCH';\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport isValidNumber from '../isValid.js';\nimport parseDigits from '../helpers/parseDigits.js';\nimport matchPhoneNumberStringAgainstPhoneNumber from './matchPhoneNumberStringAgainstPhoneNumber.js';\nimport Metadata from '../metadata.js';\nimport getCountryByCallingCode from '../helpers/getCountryByCallingCode.js';\nimport { chooseFormatForNumber } from '../format.js';\nimport { startsWith, endsWith } from './util.js';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(phoneNumber, _ref) {\n    var candidate = _ref.candidate,\n      metadata = _ref.metadata;\n    return true;\n  },\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(phoneNumber, _ref2) {\n    var candidate = _ref2.candidate,\n      defaultCountry = _ref2.defaultCountry,\n      metadata = _ref2.metadata;\n    if (!phoneNumber.isValid() || !containsOnlyValidXChars(phoneNumber, candidate, metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\n\n    return true;\n  },\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(phoneNumber, _ref3) {\n    var candidate = _ref3.candidate,\n      defaultCountry = _ref3.defaultCountry,\n      metadata = _ref3.metadata,\n      regExpCache = _ref3.regExpCache;\n    if (!phoneNumber.isValid() || !containsOnlyValidXChars(phoneNumber, candidate, metadata) || containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) || !isNationalPrefixPresentIfRequired(phoneNumber, {\n      defaultCountry: defaultCountry,\n      metadata: metadata\n    })) {\n      return false;\n    }\n    return checkNumberGroupingIsValid(phoneNumber, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n  /**\r\n   * Phone numbers accepted are \"valid\" and are grouped in the same way\r\n   * that we would have formatted it, or as a single block.\r\n   * For example, a US number written as \"650 2530000\" is not accepted\r\n   * at this leniency level, whereas \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(phoneNumber, _ref4) {\n    var candidate = _ref4.candidate,\n      defaultCountry = _ref4.defaultCountry,\n      metadata = _ref4.metadata,\n      regExpCache = _ref4.regExpCache;\n    if (!phoneNumber.isValid() || !containsOnlyValidXChars(phoneNumber, candidate, metadata) || containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) || !isNationalPrefixPresentIfRequired(phoneNumber, {\n      defaultCountry: defaultCountry,\n      metadata: metadata\n    })) {\n      return false;\n    }\n    return checkNumberGroupingIsValid(phoneNumber, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\nfunction containsOnlyValidXChars(phoneNumber, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n        if (matchPhoneNumberStringAgainstPhoneNumber(candidate.substring(index), phoneNumber, metadata) !== 'NSN_MATCH') {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n      } else {\n        var ext = parseDigits(candidate.substring(index));\n        if (ext) {\n          if (phoneNumber.ext !== ext) {\n            return false;\n          }\n        } else {\n          if (phoneNumber.ext) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction isNationalPrefixPresentIfRequired(phoneNumber, _ref5) {\n  var defaultCountry = _ref5.defaultCountry,\n    _metadata = _ref5.metadata;\n\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (phoneNumber.__countryCallingCodeSource !== 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n  var metadata = new Metadata(_metadata);\n  metadata.selectNumberingPlan(phoneNumber.countryCallingCode);\n  var phoneNumberRegion = phoneNumber.country || getCountryByCallingCode(phoneNumber.countryCallingCode, {\n    nationalNumber: phoneNumber.nationalNumber,\n    defaultCountry: defaultCountry,\n    metadata: metadata\n  }); // Check if a national prefix should be present when formatting this number.\n\n  var nationalNumber = phoneNumber.nationalNumber;\n  var format = chooseFormatForNumber(metadata.numberingPlan.formats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (format.nationalPrefixFormattingRule()) {\n    if (metadata.numberingPlan.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was present.\n      return true;\n    }\n    if (!format.usesNationalPrefix()) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n    return Boolean(phoneNumber.nationalPrefix);\n  }\n  return true;\n}\nexport function containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n  var candidateHasCountryCode = phoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITH_PLUS_SIGN' || phoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITHOUT_PLUS_SIGN';\n  if (candidateHasCountryCode && parseDigits(candidate.substring(0, firstSlashInBodyIndex)) === phoneNumber.countryCallingCode) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n  return true;\n}\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  throw new Error('This part of code hasn\\'t been ported');\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */);\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n  if (alternateFormats) {\n    for (var _iterator = _createForOfIteratorHelperLoose(alternateFormats.numberFormats()), _step; !(_step = _iterator()).done;) {\n      var alternateFormat = _step.value;\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  throw new Error('This part of code hasn\\'t been ported');\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  throw new Error('This part of code hasn\\'t been ported');\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  throw new Error('This part of code hasn\\'t been ported');\n  var fromIndex = 0;\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n    fromIndex += formattedNumberGroups[i].length();\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n", "import { trimAfterFirstMatch } from './util.js'; // Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\n\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\nexport default function parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n", "// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants.js';\nimport { limit } from './util.js';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8.js';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nexport var LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n    var lastCharIndex = offset + candidate.length;\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\nimport PhoneNumber from './PhoneNumber.js';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport RegExpCache from './findNumbers/RegExpCache.js';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util.js';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8.js';\nimport Leniency from './findNumbers/Leniency.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js';\nimport { isSupportedCountry } from './metadata.js';\nimport parsePhoneNumber from './parsePhoneNumber.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching');\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"),\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"),\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"),\n// Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = /*#__PURE__*/function () {\n  /**\r\n   * @param {string} text — the character sequence that we will search, null for no text.\r\n   * @param {'POSSIBLE'|'VALID'|'STRICT_GROUPING'|'EXACT_GROUPING'} [options.leniency] — The leniency to use when evaluating candidate phone numbers. See `source/findNumbers/Leniency.js` for more details.\r\n   * @param {number} [options.maxTries] — The maximum number of invalid numbers to try before giving up on the text. This is to cover degenerate cases where the text has a lot of false positives in it. Must be >= 0.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, PhoneNumberMatcher);\n    options = {\n      v2: options.v2,\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || (options.extended ? 'POSSIBLE' : 'VALID'),\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    }; // Validate `leniency`.\n\n    if (!options.leniency) {\n      throw new TypeError('`leniency` is required');\n    }\n    if (options.leniency !== 'POSSIBLE' && options.leniency !== 'VALID') {\n      throw new TypeError(\"Invalid `leniency`: \\\"\".concat(options.leniency, \"\\\". Supported values: \\\"POSSIBLE\\\", \\\"VALID\\\".\"));\n    } // Validate `maxTries`.\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` must be `>= 0`');\n    }\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata; // The degree of phone number validation.\n\n    this.leniency = Leniency[options.leniency];\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \\\"\".concat(options.leniency, \"\\\"\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n    /** The iteration tristate. */\n\n    this.state = 'NOT_READY';\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n    this.searchIndex = 0; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n    // that use-case won't have a lot of benefit.\n\n    this.regExpCache = new RegExpCache(32);\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n          if (match) {\n            if (this.options.v2) {\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: match.phoneNumber\n              };\n            } else {\n              var phoneNumber = match.phoneNumber;\n              var result = {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                phone: phoneNumber.nationalNumber\n              };\n              if (phoneNumber.country) {\n                /* istanbul ignore if */\n                if (USE_NON_GEOGRAPHIC_COUNTRY_CODE && country === '001') {\n                  result.countryCallingCode = phoneNumber.countryCallingCode;\n                } else {\n                  result.country = phoneNumber.country;\n                }\n              } else {\n                result.countryCallingCode = phoneNumber.countryCallingCode;\n              }\n              if (phoneNumber.ext) {\n                result.ext = phoneNumber.ext;\n              }\n              return result;\n            }\n          }\n        }\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `substring`\r\n     * if the substring itself does not qualify as a match.\r\n     */\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(substring, offset, text) {\n      for (var _iterator = _createForOfIteratorHelperLoose(INNER_MATCHES), _step; !(_step = _iterator()).done;) {\n        var innerMatchPattern = _step.value;\n        var isFirstMatch = true;\n        var candidateMatch = void 0;\n        var innerMatchRegExp = new RegExp(innerMatchPattern, 'g');\n        while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));\n            var _match = this.parseAndVerify(_candidate, offset, text);\n            if (_match) {\n              return _match;\n            }\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n          var candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a `candidate` start index,\n          // therefore resort to using this kind of an approximation.\n          // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\n          // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n\n          var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);\n          var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);\n          if (match) {\n            return match;\n          }\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parse` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n      var phoneNumber = parsePhoneNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n      if (!phoneNumber) {\n        return;\n      }\n      if (!phoneNumber.isPossible()) {\n        return;\n      }\n      if (this.leniency(phoneNumber, {\n        candidate: candidate,\n        defaultCountry: this.options.defaultCountry,\n        metadata: this.metadata,\n        regExpCache: this.regExpCache\n      })) {\n        return {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phoneNumber: phoneNumber\n        };\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n  return PhoneNumberMatcher;\n}();\nexport { PhoneNumberMatcher as default };\n", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n// This \"state\" object simply holds the state of the \"AsYouType\" parser:\n//\n// * `country?: string`\n// * `callingCode?: string`\n// * `digits: string`\n// * `international: boolean`\n// * `missingPlus: boolean`\n// * `IDDPrefix?: string`\n// * `carrierCode?: string`\n// * `nationalPrefix?: string`\n// * `nationalSignificantNumber?: string`\n// * `nationalSignificantNumberMatchesInput: boolean`\n// * `complexPrefixBeforeNationalSignificantNumber?: string`\n//\n// `state.country` and `state.callingCode` aren't required to be in sync.\n// For example, `state.country` could be `\"AR\"` and `state.callingCode` could be `undefined`.\n// So `state.country` and `state.callingCode` are totally independent.\n//\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n      onCallingCodeChange = _ref.onCallingCodeChange;\n    _classCallCheck(this, AsYouTypeState);\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(_ref2) {\n      var country = _ref2.country,\n        callingCode = _ref2.callingCode;\n      this.international = false;\n      this.missingPlus = false;\n      this.IDDPrefix = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(country, callingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      this.onCallingCodeChange(callingCode, this.country);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(country, callingCode) {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode(country, callingCode);\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n      return this.digits;\n    }\n  }]);\n  return AsYouTypeState;\n}();\nexport { AsYouTypeState as default };\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    if (character === symbol) {\n      count++;\n    }\n  }\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n  var result = '';\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n    times >>= 1;\n    string += string;\n  }\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n    cut_before++;\n  }\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n    i++;\n  }\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n  return [template, position];\n}\n", "import checkNumberLength from './helpers/checkNumberLength.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n    shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n    getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n    shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n    getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n    international = state.international,\n    nationalPrefix = state.nationalPrefix,\n    carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n    useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n    getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}\n", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n      var _this$context$ = this.context[0],\n        branches = _this$context$.branches,\n        instructions = _this$context$.instructions;\n      if (branches) {\n        return {\n          op: '|',\n          args: branches.concat([expandSingleElementArray(instructions)])\n        };\n      }\n      /* istanbul ignore if */\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n      if (instructions.length === 1) {\n        return instructions[0];\n      }\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n      var match = pattern.match(OPERATOR);\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n          if (before) {\n            this.parsePattern(before);\n          }\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n          var _this$getContext = this.getContext(),\n            branches = _this$getContext.branches;\n          branches.push(expandSingleElementArray(this.getContext().instructions));\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n          this.getContext().branches.push(expandSingleElementArray(this.getContext().instructions));\n          this.getContext().instructions = [];\n          break;\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n  return PatternParser;\n}();\nexport { PatternParser as default };\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n    i++;\n  }\n  return values;\n}\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\nvar OPERATOR = new RegExp(\n// any of:\n'(' +\n// or operator\n'\\\\|' +\n// or\n'|' +\n// or group start\n'\\\\(\\\\?\\\\:' +\n// or\n'|' +\n// or group end\n'\\\\)' +\n// or\n'|' +\n// one-of set start\n'\\\\[' +\n// or\n'|' +\n// one-of set end\n'\\\\]' + ')');\nfunction expandSingleElementArray(array) {\n  if (array.length === 1) {\n    return array[0];\n  }\n  return array;\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport PatternParser from './AsYouTypeFormatter.PatternParser.js';\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        allowOverflow = _ref.allowOverflow;\n      if (!string) {\n        throw new Error('String is required');\n      }\n      var result = _match(string.split(''), this.matchTree, true);\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n      return result;\n    }\n  }]);\n  return PatternMatcher;\n}();\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\n\nexport { PatternMatcher as default };\nfunction _match(characters, tree, last) {\n  // If `tree` is a string, then `tree` is a single character.\n  // That's because when a pattern is parsed, multi-character-string parts\n  // of a pattern are compiled into arrays of single characters.\n  // I still wrote this piece of code for a \"general\" hypothetical case\n  // when `tree` could be a string of several characters, even though\n  // such case is not possible with the current implementation.\n  if (typeof tree === 'string') {\n    var characterString = characters.join('');\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n      return {\n        partialMatch: true // matchedChars: characters\n      };\n    }\n    if (characterString.indexOf(tree) === 0) {\n      if (last) {\n        // The `else` path is not possible because `tree` is always a single character.\n        // The `else` case for `characters.length > tree.length` would be\n        // `characters.length <= tree.length` which means `characters.length <= 1`.\n        // `characters` array can't be empty, so that means `characters === [tree]`,\n        // which would also mean `tree.indexOf(characterString) === 0` and that'd mean\n        // that the `if (tree.indexOf(characterString) === 0)` condition before this\n        // `if` condition would be entered, and returned from there, not reaching this code.\n\n        /* istanbul ignore else */\n        if (characters.length > tree.length) {\n          return {\n            overflow: true\n          };\n        }\n      }\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n    return;\n  }\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n    while (i < tree.length) {\n      var subtree = tree[i];\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n        var _result = _match(characters, branch, last);\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n        };\n      } // Not even a partial match.\n\n      return;\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util.js';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete.js';\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js';\nimport parseDigits from './helpers/parseDigits.js';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js';\nimport { VALID_PUNCTUATION } from './constants.js';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + VALID_PUNCTUATION + ']*' +\n// Google developers say:\n// \"We require that the first matching group is present in the\n//  output pattern to ensure no data is lost while formatting.\"\n'\\\\$1' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var state = _ref.state,\n      metadata = _ref.metadata;\n    _classCallCheck(this, AsYouTypeFormatter);\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {\n          var format = _step.value;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {\n              return _this.getSeparatorAfterNationalPrefix(format);\n            }\n          });\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref2) {\n      var _this2 = this;\n      var nationalSignificantNumber = _ref2.nationalSignificantNumber,\n        nationalPrefix = _ref2.nationalPrefix,\n        international = _ref2.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() &&\n      // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n      // The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error) /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this3 = this;\n      var _loop = function _loop() {\n        var format = _step2.value;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this3.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n        if (!_this3.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n        _this3.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      //\n      // For some weird reason, `istanbul` says \"else path not taken\"\n      // for the `for of` line below. Supposedly that means that\n      // the loop doesn't ever go over the last element in the list.\n      // That's true because there always is `this.chosenFormat`\n      // when `this.matchingFormats` is non-empty.\n      // And, for some weird reason, it doesn't think that the case\n      // with empty `this.matchingFormats` qualifies for a valid \"else\" path.\n      // So simply muting this `istanbul` warning.\n      // It doesn't skip the contents of the `for of` loop,\n      // it just skips the `for of` line.\n      //\n\n      /* istanbul ignore next */\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ret = _loop();\n        if (_ret === \"break\") break;\n        if (_ret === \"continue\") continue;\n      }\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n      return '';\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {\n      var IDDPrefix = _ref3.IDDPrefix,\n        missingPlus = _ref3.missingPlus;\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n      if (missingPlus) {\n        return '';\n      }\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref4) {\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n        international = _ref4.international,\n        nationalPrefix = _ref4.nationalPrefix,\n        complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"shouldTryNationalPrefixFormattingRule\",\n    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {\n      var international = _ref5.international,\n        nationalPrefix = _ref5.nationalPrefix;\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    }\n  }]);\n  return AsYouTypeFormatter;\n}();\nexport { AsYouTypeFormatter as default };\n", "function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants.js';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\nvar AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n      defaultCallingCode = _ref.defaultCallingCode,\n      metadata = _ref.metadata,\n      onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n    _classCallCheck(this, AsYouTypeParser);\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n        _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n        formattedDigits = _extractFormattedDigi2[0],\n        hasPlus = _extractFormattedDigi2[1];\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n            return state.update(stateUpdate);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n        callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n        countryCallingCode = _extractCountryCallin.countryCallingCode,\n        number = _extractCountryCallin.number;\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n        nationalPrefix = _extractNationalNumbe.nationalPrefix,\n        nationalNumber = _extractNationalNumbe.nationalNumber,\n        carrierCode = _extractNationalNumbe.carrierCode;\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n        nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n        nationalNumber = _extractNationalNumbe2.nationalNumber,\n        carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {\n        return state.update(stateUpdate);\n      })) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n        IDDPrefix = state.IDDPrefix,\n        digits = state.digits,\n        nationalSignificantNumber = state.nationalSignificantNumber;\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state, {\n          country: undefined,\n          callingCode: undefined\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          newCallingCode = _extractCountryCallin2.countryCallingCode,\n          number = _extractCountryCallin2.number;\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state, {\n            country: state.country,\n            callingCode: newCallingCode\n          });\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state, _ref3) {\n      var country = _ref3.country,\n        callingCode = _ref3.callingCode;\n      state.startInternationalNumber(country, callingCode); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n          return state.update(stateUpdate);\n        });\n      }\n    }\n  }]);\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\nexport { AsYouTypeParser as default };\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n    _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n    formattedDigits = _extractFormattedDigi4[0],\n    hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n  return [formattedDigits, hasPlus];\n}\n", "function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport Metadata from './metadata.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport AsYouTypeState from './AsYouTypeState.js';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nimport getCountryByNationalNumber from './helpers/getCountryByNationalNumber.js';\nimport isObject from './helpers/isObject.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n    this.metadata = new Metadata(metadata);\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n      _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n      defaultCountry = _this$getCountryAndCa2[0],\n      defaultCallingCode = _this$getCountryAndCa2[1]; // `this.defaultCountry` and `this.defaultCallingCode` aren't required to be in sync.\n    // For example, `this.defaultCountry` could be `\"AR\"` and `this.defaultCallingCode` could be `undefined`.\n    // So `this.defaultCountry` and `this.defaultCallingCode` are totally independent.\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (isObject(optionsOrDefaultCountry)) {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n        digits = _this$parser$input.digits,\n        justLeadingPlus = _this$parser$input.justLeadingPlus;\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n        var formattedNationalNumber;\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(callingCode, country) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset({\n        country: this.defaultCountry,\n        callingCode: this.defaultCallingCode\n      });\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n        var callingCode = this.state.callingCode;\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n        nationalSignificantNumber = _this$state.nationalSignificantNumber,\n        complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n        nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n      if (prefix) {\n        number = prefix + number;\n      }\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, {\n        nationalNumber: this.state.nationalSignificantNumber,\n        defaultCountry: this.defaultCountry,\n        metadata: this.metadata\n      }));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n        digits = _this$state2.digits,\n        callingCode = _this$state2.callingCode,\n        country = _this$state2.country,\n        nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n        nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n        carrierCode = _this$state3.carrierCode,\n        callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n      if (!nationalSignificantNumber) {\n        return;\n      } // `state.country` and `state.callingCode` aren't required to be in sync.\n      // For example, `country` could be `\"AR\"` and `callingCode` could be `undefined`.\n      // So `country` and `callingCode` are totally independent.\n\n      if (!country && !callingCode) {\n        return;\n      } // By default, if `defaultCountry` parameter was passed when\n      // creating `AsYouType` instance, `state.country` is gonna be\n      // that `defaultCountry`, which doesn't entirely conform with\n      // `parsePhoneNumber()`'s behavior where it attempts to determine\n      // the country more precisely in cases when multiple countries\n      // could correspond to the same `countryCallingCode`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/103#note_1417192969\n      //\n      // Because `AsYouType.getNumber()` method is supposed to be a 1:1\n      // equivalent for `parsePhoneNumber(AsYouType.getNumberValue())`,\n      // then it should also behave accordingly in cases of `country` ambiguity.\n      // That's how users of this library would expect it to behave anyway.\n      //\n\n      if (country) {\n        if (country === this.defaultCountry) {\n          // `state.country` and `state.callingCode` aren't required to be in sync.\n          // For example, `state.country` could be `\"AR\"` and `state.callingCode` could be `undefined`.\n          // So `state.country` and `state.callingCode` are totally independent.\n          var metadata = new Metadata(this.metadata.metadata);\n          metadata.selectNumberingPlan(country);\n          var _callingCode = metadata.numberingPlan.callingCode();\n          var ambiguousCountries = this.metadata.getCountryCodesForCallingCode(_callingCode);\n          if (ambiguousCountries.length > 1) {\n            var exactCountry = getCountryByNationalNumber(nationalSignificantNumber, {\n              countries: ambiguousCountries,\n              defaultCountry: this.defaultCountry,\n              metadata: this.metadata.metadata\n            });\n            if (exactCountry) {\n              country = exactCountry;\n            }\n          }\n        }\n      }\n      var phoneNumber = new PhoneNumber(country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n      if (!phoneNumber) {\n        return false;\n      }\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n      if (!phoneNumber) {\n        return false;\n      }\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n  return AsYouType;\n}();\nexport { AsYouType as default };\n", "import { TuiTime, HOURS_IN_DAY } from '@taiga-ui/cdk/date-time';\nimport { MaskitoDirective } from '@maskito/angular';\nimport { tuiDirectiveBinding } from '@taiga-ui/cdk/utils';\nimport { CHAR_PLUS } from '@taiga-ui/cdk/constants';\nimport { getCountryCallingCode } from 'libphonenumber-js/core';\nfunction tuiCreateTimePeriods(minHour = 0, maxHour = HOURS_IN_DAY, minutes = [0, 30]) {\n  const timeArray = [];\n  for (let i = minHour; i < maxHour; i++) {\n    minutes.forEach(minute => {\n      const time = new TuiTime(i, minute);\n      timeArray.push(time);\n    });\n  }\n  return timeArray;\n}\nfunction tuiIsFlat(items) {\n  return !Array.isArray(items[0]);\n}\nfunction tuiMaskito(options) {\n  return tuiDirectiveBinding(MaskitoDirective, 'options', options);\n}\nfunction tuiGetCallingCode(iso, metadata) {\n  return metadata ? CHAR_PLUS + getCountryCallingCode(iso, metadata) : '';\n}\nfunction tuiToggleDay(days, day) {\n  return (days?.find(item => item.daySame(day)) ? days.filter(item => !item.daySame(day)) : days?.concat(day)) || [];\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCreateTimePeriods, tuiGetCallingCode, tuiIsFlat, tuiMaskito, tuiToggleDay };\n", "import { tuiRound, tuiClamp } from '@taiga-ui/cdk/utils/math';\nimport * as i0 from '@angular/core';\nimport { inject, INJECTOR, Component, ChangeDetectionStrategy, Input, forwardRef, Directive, ContentChild } from '@angular/core';\nimport { TuiControl } from '@taiga-ui/cdk/classes';\nimport { tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';\nimport { __decorate } from 'tslib';\nimport { NgControl, NgModel } from '@angular/forms';\nimport { tuiWatch, tuiTypedFromEvent } from '@taiga-ui/cdk/observables';\nimport { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';\nimport { tuiCreateToken, tuiProvideOptions, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { take, merge, tap, map, combineLatest, filter } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT, AsyncPipe, NgIf } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { TUI_TRUE_HANDLER, TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';\n\n/**\n * Used as a limit for eliminating JS issues with floating point math\n */\nconst _c0 = [\"type\", \"range\", \"tuiSlider\", \"\"];\nconst _c1 = [\"tuiSliderThumbLabel\", \"\"];\nconst _c2 = [\"*\", [[\"input\", \"type\", \"range\"]]];\nconst _c3 = [\"*\", \"input[type=range]\"];\nfunction TuiSliderThumbLabel_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst TUI_FLOATING_PRECISION = 7;\nfunction tuiFindKeyStepsBoundariesByFn(keySteps, fn) {\n  const keyStepUpperIndex = keySteps.findIndex((keyStep, i) => i && fn(keyStep));\n  const lowerStep = keySteps[keyStepUpperIndex - 1] || keySteps[0];\n  const upperStep = keySteps[keyStepUpperIndex] || keySteps[keySteps.length - 1] || [0, 0];\n  return [lowerStep, upperStep];\n}\nfunction tuiPercentageToKeyStepValue(valuePercentage, keySteps) {\n  const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([keyStepPercentage, _]) => valuePercentage <= keyStepPercentage);\n  const ratio = (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);\n  const controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;\n  return tuiRound(controlValue, TUI_FLOATING_PRECISION);\n}\nfunction tuiKeyStepValueToPercentage(value, keySteps) {\n  const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([_, keyStepValue]) => value <= keyStepValue);\n  const ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;\n  return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;\n}\nconst TUI_SLIDER_DEFAULT_OPTIONS = {\n  size: 'm',\n  trackColor: 'var(--tui-background-neutral-2)'\n};\n/**\n * Default parameters for Slider component\n */\nconst TUI_SLIDER_OPTIONS = tuiCreateToken(TUI_SLIDER_DEFAULT_OPTIONS);\nfunction tuiSliderOptionsProvider(options) {\n  return tuiProvideOptions(TUI_SLIDER_OPTIONS, options, TUI_SLIDER_DEFAULT_OPTIONS);\n}\nclass TuiSliderComponent {\n  constructor() {\n    this.injector = inject(INJECTOR);\n    this.control = inject(NgControl, {\n      self: true,\n      optional: true\n    });\n    this.options = inject(TUI_SLIDER_OPTIONS);\n    this.size = this.options.size;\n    this.segments = 1;\n    this.el = tuiInjectElement();\n    if (this.control instanceof NgModel) {\n      /**\n       * The ValueAccessor.writeValue method is called twice on any value accessor during component initialization,\n       * when a control is bound using [(ngModel)], first time with a phantom null value.\n       * With `changeDetection: ChangeDetectionStrategy.OnPush` the second call of writeValue with real value don't re-render the view.\n       * ___\n       * See this {@link https://github.com/angular/angular/issues/14988 issue}\n       */\n      this.control.valueChanges?.pipe(tuiWatch(), take(1)).subscribe();\n    }\n  }\n  get valueRatio() {\n    return (this.value - this.min) / (this.max - this.min) || 0;\n  }\n  get min() {\n    return Number(this.el.min);\n  }\n  get max() {\n    return Number(this.el.max || 100);\n  }\n  get value() {\n    if (!this.hasKeySteps && this.control instanceof NgModel) {\n      /**\n       * If developer uses `[(ngModel)]` and programmatically change value,\n       * the `el.nativeElement.value` is equal to the previous value at this moment.\n       */\n      return this.control.viewModel;\n    }\n    return Number(this.el.value) || 0;\n  }\n  set value(newValue) {\n    this.el.value = `${newValue}`;\n  }\n  get hasKeySteps() {\n    return Boolean(this.injector.get(TuiSliderKeySteps, null));\n  }\n  get segmentWidth() {\n    return 100 / Math.max(1, this.segments);\n  }\n  get step() {\n    return Number(this.el.step) || 1;\n  }\n  static {\n    this.ɵfac = function TuiSliderComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiSliderComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiSliderComponent,\n      selectors: [[\"input\", \"type\", \"range\", \"tuiSlider\", \"\"]],\n      hostVars: 7,\n      hostBindings: function TuiSliderComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function TuiSliderComponent_input_HostBindingHandler() {\n            return 0;\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"data-size\", ctx.size);\n          i0.ɵɵstyleProp(\"--tui-slider-track-color\", ctx.options.trackColor)(\"--tui-slider-segment-width\", ctx.segmentWidth, \"%\")(\"--tui-slider-fill-ratio\", ctx.valueRatio);\n        }\n      },\n      inputs: {\n        size: \"size\",\n        segments: \"segments\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      attrs: _c0,\n      decls: 0,\n      vars: 0,\n      template: function TuiSliderComponent_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%]{position:relative;display:block;inline-size:100%;color:var(--tui-background-accent-1);cursor:pointer;-webkit-appearance:none;appearance:none;block-size:.125rem;padding:.4375rem 0;background-color:transparent;background-clip:content-box;outline:none;border-radius:var(--tui-radius-m)}[_nghost-%COMP%]:active{cursor:ew-resize}[_nghost-%COMP%]:disabled{opacity:var(--tui-disabled-opacity);cursor:auto}[data-size=s][_nghost-%COMP%]:not(:disabled):before{transition-property:transform,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.25rem;left:calc(var(--tui-slider-fill-ratio) * 100% - var(--tui-slider-fill-ratio) * .5rem);inline-size:.5rem;block-size:.5rem;border-radius:50%;transform:var(--tui-slider-thumb-transform, scale(1));content:\\\"\\\";cursor:ew-resize;background:currentColor;opacity:0}[data-size=s][_nghost-%COMP%]:active:before{opacity:.2;transform:var(--tui-slider-thumb-transform, scale(1)) scale(2.33)}[data-size=m][_nghost-%COMP%]:not(:disabled):before{transition-property:transform,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.125rem;left:calc(var(--tui-slider-fill-ratio) * 100% - var(--tui-slider-fill-ratio) * .75rem);inline-size:.75rem;block-size:.75rem;border-radius:50%;transform:var(--tui-slider-thumb-transform, scale(1));content:\\\"\\\";cursor:ew-resize;background:currentColor;opacity:0}[data-size=m][_nghost-%COMP%]:active:before{opacity:.2;transform:var(--tui-slider-thumb-transform, scale(1)) scale(2.33)}[_nghost-%COMP%]::-webkit-slider-container{border-radius:inherit}[data-size=m][_nghost-%COMP%]::-webkit-slider-runnable-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .5rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor calc(100% * var(--tui-slider-fill-ratio)),transparent calc(100% * var(--tui-slider-fill-ratio)));background-position-x:0,.25rem,0;background-size:calc(100% - .75rem),calc(100% - .75rem),auto}[data-size=s][_nghost-%COMP%]::-webkit-slider-runnable-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor calc(100% * var(--tui-slider-fill-ratio)),transparent calc(100% * var(--tui-slider-fill-ratio)));background-position-x:0,.125rem,0;background-size:calc(100% - .5rem),calc(100% - .5rem),auto}[data-size=m][_nghost-%COMP%]::-moz-range-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .5rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.25rem;background-size:calc(100% - .75rem)}[data-size=s][_nghost-%COMP%]::-moz-range-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.125rem;background-size:calc(100% - .5rem)}[data-size=m][_nghost-%COMP%]::-webkit-slider-thumb{-webkit-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.75rem;inline-size:.75rem;box-sizing:content-box;background-clip:content-box;border:.125rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1));margin-top:-.4375rem}:not(:disabled)[data-size=m][_nghost-%COMP%]::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled)[data-size=m][_nghost-%COMP%]::-webkit-slider-thumb:hover, :active:not(:disabled)[data-size=m][_nghost-%COMP%]::-webkit-slider-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.333)}:focus-visible[data-size=m][_nghost-%COMP%]::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}[data-size=s][_nghost-%COMP%]::-webkit-slider-thumb{-webkit-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.5rem;inline-size:.5rem;box-sizing:content-box;background-clip:content-box;border:.25rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1));margin-top:-.4375rem}:not(:disabled)[data-size=s][_nghost-%COMP%]::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled)[data-size=s][_nghost-%COMP%]::-webkit-slider-thumb:hover, :active:not(:disabled)[data-size=s][_nghost-%COMP%]::-webkit-slider-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.5)}:focus-visible[data-size=s][_nghost-%COMP%]::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}[data-size=m][_nghost-%COMP%]::-moz-range-thumb{-moz-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.75rem;inline-size:.75rem;box-sizing:content-box;background-clip:content-box;border:.125rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1))}:not(:disabled)[data-size=m][_nghost-%COMP%]::-moz-range-thumb{cursor:ew-resize}:not(:disabled)[data-size=m][_nghost-%COMP%]::-moz-range-thumb:hover, :active:not(:disabled)[data-size=m][_nghost-%COMP%]::-moz-range-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.333)}:focus-visible[data-size=m][_nghost-%COMP%]::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}[data-size=s][_nghost-%COMP%]::-moz-range-thumb{-moz-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.5rem;inline-size:.5rem;box-sizing:content-box;background-clip:content-box;border:.25rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1))}:not(:disabled)[data-size=s][_nghost-%COMP%]::-moz-range-thumb{cursor:ew-resize}:not(:disabled)[data-size=s][_nghost-%COMP%]::-moz-range-thumb:hover, :active:not(:disabled)[data-size=s][_nghost-%COMP%]::-moz-range-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.5)}:focus-visible[data-size=s][_nghost-%COMP%]::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}[_nghost-%COMP%]::-moz-range-progress{border-radius:inherit}[_nghost-%COMP%]::-moz-range-progress{block-size:.125rem;background:currentColor;border-start-end-radius:0;border-end-end-radius:0}\"],\n      changeDetection: 0\n    });\n  }\n}\n__decorate([tuiPure], TuiSliderComponent.prototype, \"hasKeySteps\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiSliderComponent, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: 'input[type=range][tuiSlider]',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        /**\n         * For change detection.\n         * Webkit does not have built-in method for customization of filling progress (as Firefox).\n         * We draw filling of progress by `background: linear-gradient(...)` of the track.\n         * This function triggers change detection (for {@link valueRatio} getter) when we drag thumb of the input.\n         */\n        '(input)': '0',\n        '[style.--tui-slider-track-color]': 'options.trackColor',\n        '[style.--tui-slider-segment-width.%]': 'segmentWidth',\n        '[style.--tui-slider-fill-ratio]': 'valueRatio',\n        '[attr.data-size]': 'size'\n      },\n      styles: [\":host{position:relative;display:block;inline-size:100%;color:var(--tui-background-accent-1);cursor:pointer;-webkit-appearance:none;appearance:none;block-size:.125rem;padding:.4375rem 0;background-color:transparent;background-clip:content-box;outline:none;border-radius:var(--tui-radius-m)}:host:active{cursor:ew-resize}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:auto}:host[data-size=s]:not(:disabled):before{transition-property:transform,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.25rem;left:calc(var(--tui-slider-fill-ratio) * 100% - var(--tui-slider-fill-ratio) * .5rem);inline-size:.5rem;block-size:.5rem;border-radius:50%;transform:var(--tui-slider-thumb-transform, scale(1));content:\\\"\\\";cursor:ew-resize;background:currentColor;opacity:0}:host[data-size=s]:active:before{opacity:.2;transform:var(--tui-slider-thumb-transform, scale(1)) scale(2.33)}:host[data-size=m]:not(:disabled):before{transition-property:transform,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.125rem;left:calc(var(--tui-slider-fill-ratio) * 100% - var(--tui-slider-fill-ratio) * .75rem);inline-size:.75rem;block-size:.75rem;border-radius:50%;transform:var(--tui-slider-thumb-transform, scale(1));content:\\\"\\\";cursor:ew-resize;background:currentColor;opacity:0}:host[data-size=m]:active:before{opacity:.2;transform:var(--tui-slider-thumb-transform, scale(1)) scale(2.33)}:host::-webkit-slider-container{border-radius:inherit}:host[data-size=m]::-webkit-slider-runnable-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .5rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor calc(100% * var(--tui-slider-fill-ratio)),transparent calc(100% * var(--tui-slider-fill-ratio)));background-position-x:0,.25rem,0;background-size:calc(100% - .75rem),calc(100% - .75rem),auto}:host[data-size=s]::-webkit-slider-runnable-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor calc(100% * var(--tui-slider-fill-ratio)),transparent calc(100% * var(--tui-slider-fill-ratio)));background-position-x:0,.125rem,0;background-size:calc(100% - .5rem),calc(100% - .5rem),auto}:host[data-size=m]::-moz-range-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .5rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.25rem;background-size:calc(100% - .75rem)}:host[data-size=s]::-moz-range-track{block-size:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.125rem;background-size:calc(100% - .5rem)}:host[data-size=m]::-webkit-slider-thumb{-webkit-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.75rem;inline-size:.75rem;box-sizing:content-box;background-clip:content-box;border:.125rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1));margin-top:-.4375rem}:not(:disabled):host[data-size=m]::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled):host[data-size=m]::-webkit-slider-thumb:hover,:active:not(:disabled):host[data-size=m]::-webkit-slider-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.333)}:focus-visible:host[data-size=m]::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}:host[data-size=s]::-webkit-slider-thumb{-webkit-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.5rem;inline-size:.5rem;box-sizing:content-box;background-clip:content-box;border:.25rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1));margin-top:-.4375rem}:not(:disabled):host[data-size=s]::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled):host[data-size=s]::-webkit-slider-thumb:hover,:active:not(:disabled):host[data-size=s]::-webkit-slider-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.5)}:focus-visible:host[data-size=s]::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}:host[data-size=m]::-moz-range-thumb{-moz-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.75rem;inline-size:.75rem;box-sizing:content-box;background-clip:content-box;border:.125rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1))}:not(:disabled):host[data-size=m]::-moz-range-thumb{cursor:ew-resize}:not(:disabled):host[data-size=m]::-moz-range-thumb:hover,:active:not(:disabled):host[data-size=m]::-moz-range-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.333)}:focus-visible:host[data-size=m]::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}:host[data-size=s]::-moz-range-thumb{-moz-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;block-size:.5rem;inline-size:.5rem;box-sizing:content-box;background-clip:content-box;border:.25rem solid transparent;border-inline-start:0;border-inline-end:0;transform:var(--tui-slider-thumb-transform, scale(1))}:not(:disabled):host[data-size=s]::-moz-range-thumb{cursor:ew-resize}:not(:disabled):host[data-size=s]::-moz-range-thumb:hover,:active:not(:disabled):host[data-size=s]::-moz-range-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.5)}:focus-visible:host[data-size=s]::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-border-focus)}:host::-moz-range-progress{border-radius:inherit}:host::-moz-range-progress{block-size:.125rem;background:currentColor;border-start-end-radius:0;border-end-end-radius:0}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    size: [{\n      type: Input\n    }],\n    segments: [{\n      type: Input\n    }],\n    hasKeySteps: []\n  });\n})();\nclass TuiSliderKeySteps extends TuiControl {\n  constructor() {\n    super(...arguments);\n    this.slider = inject(forwardRef(() => TuiSliderComponent));\n  }\n  writeValue(controlValue) {\n    if (controlValue === null) {\n      return;\n    }\n    const clampedControlValue = tuiClamp(controlValue, this.min, this.max);\n    ngDevMode && console.assert(controlValue === clampedControlValue, '\\n[SliderKeySteps]: You cannot programmatically set value which is less/more than min/max');\n    this.slider.value = this.transformToNativeValue(clampedControlValue);\n  }\n  get min() {\n    return this.keySteps[0][1];\n  }\n  get max() {\n    return this.keySteps[this.keySteps.length - 1]?.[1] ?? 0;\n  }\n  updateControlValue() {\n    this.onChange(tuiPercentageToKeyStepValue(this.slider.valueRatio * 100, this.keySteps));\n  }\n  transformToNativeValue(controlValue) {\n    const {\n      min,\n      max\n    } = this.slider;\n    const newValuePercentage = tuiKeyStepValueToPercentage(controlValue, this.keySteps);\n    return newValuePercentage * (max - min) / 100 + min;\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵTuiSliderKeySteps_BaseFactory;\n      return function TuiSliderKeySteps_Factory(__ngFactoryType__) {\n        return (ɵTuiSliderKeySteps_BaseFactory || (ɵTuiSliderKeySteps_BaseFactory = i0.ɵɵgetInheritedFactory(TuiSliderKeySteps)))(__ngFactoryType__ || TuiSliderKeySteps);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiSliderKeySteps,\n      selectors: [[\"input\", \"tuiSlider\", \"\", \"keySteps\", \"\"]],\n      hostVars: 4,\n      hostBindings: function TuiSliderKeySteps_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"blur\", function TuiSliderKeySteps_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          })(\"input\", function TuiSliderKeySteps_input_HostBindingHandler() {\n            return ctx.updateControlValue();\n          })(\"change\", function TuiSliderKeySteps_change_HostBindingHandler() {\n            return ctx.updateControlValue();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"disabled\", ctx.disabled());\n          i0.ɵɵattribute(\"aria-valuenow\", ctx.value())(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max);\n        }\n      },\n      inputs: {\n        keySteps: \"keySteps\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([tuiFallbackValueProvider(0)]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiSliderKeySteps, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: 'input[tuiSlider][keySteps]',\n      providers: [tuiFallbackValueProvider(0)],\n      host: {\n        '[attr.aria-valuenow]': 'value()',\n        '[attr.aria-valuemin]': 'min',\n        '[attr.aria-valuemax]': 'max',\n        '[disabled]': 'disabled()',\n        '(blur)': 'onTouched()',\n        '(input)': 'updateControlValue()',\n        '(change)': 'updateControlValue()'\n      }\n    }]\n  }], null, {\n    keySteps: [{\n      type: Input\n    }]\n  });\n})();\nconst SLIDER_INTERACTION_KEYS = new Set(['ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp']);\n/**\n * Native <input type='range' readonly> doesn't work.\n * This directive imitates this native behaviour.\n */\nclass TuiSliderReadonly {\n  constructor() {\n    this.el = tuiInjectElement();\n    this.doc = inject(DOCUMENT);\n    this.readonly = true;\n    const touchStart$ = tuiTypedFromEvent(this.el, 'touchstart', {\n      passive: false\n    });\n    const touchMove$ = tuiTypedFromEvent(this.doc, 'touchmove', {\n      passive: false\n    });\n    const touchEnd$ = tuiTypedFromEvent(this.doc, 'touchend', {\n      passive: true\n    });\n    const shouldPreventMove$ = merge(touchStart$.pipe(tap(e => this.preventEvent(e)), map(TUI_TRUE_HANDLER)), touchEnd$.pipe(map(TUI_FALSE_HANDLER)));\n    /**\n     * @bad TODO think about another solution.\n     * Keep in mind that preventing touch event (on slider) inside `@HostListener('touchstart')` doesn't work for mobile chrome.\n     */\n    combineLatest([touchMove$, shouldPreventMove$]).pipe(filter(([_, shouldPreventMove]) => shouldPreventMove), takeUntilDestroyed()).subscribe(([moveEvent]) => this.preventEvent(moveEvent));\n  }\n  preventEvent(event) {\n    if (event.cancelable && this.readonly) {\n      event.preventDefault();\n    }\n  }\n  preventKeyboardInteraction(event) {\n    if (SLIDER_INTERACTION_KEYS.has(event.key)) {\n      this.preventEvent(event);\n    }\n  }\n  static {\n    this.ɵfac = function TuiSliderReadonly_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiSliderReadonly)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiSliderReadonly,\n      selectors: [[\"input\", \"tuiSlider\", \"\", \"readonly\", \"\"]],\n      hostBindings: function TuiSliderReadonly_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function TuiSliderReadonly_keydown_HostBindingHandler($event) {\n            return ctx.preventKeyboardInteraction($event);\n          })(\"mousedown\", function TuiSliderReadonly_mousedown_HostBindingHandler($event) {\n            return ctx.preventEvent($event);\n          });\n        }\n      },\n      inputs: {\n        readonly: [2, \"readonly\", \"readonly\", coerceBooleanProperty]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiSliderReadonly, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: 'input[tuiSlider][readonly]',\n      host: {\n        '(keydown)': 'preventKeyboardInteraction($event)',\n        '(mousedown)': 'preventEvent($event)'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    readonly: [{\n      type: Input,\n      args: [{\n        transform: coerceBooleanProperty\n      }]\n    }]\n  });\n})();\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nclass TuiSliderThumbLabel {\n  ngAfterContentInit() {\n    ngDevMode && console.assert(Boolean(this.control?.valueChanges), '\\n[tuiSliderThumbLabel] expected <input tuiSlider type=\"range\" /> to use Angular Forms.\\n' + 'Use [(ngModel)] or [formControl] or formControlName for correct work.');\n  }\n  get size() {\n    return this.slider?.size || 'm';\n  }\n  get ratio() {\n    return this.slider?.valueRatio || 0;\n  }\n  get ghostLeft() {\n    return this.ratio * (this.slider?.el.offsetWidth || 0);\n  }\n  static {\n    this.ɵfac = function TuiSliderThumbLabel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiSliderThumbLabel)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiSliderThumbLabel,\n      selectors: [[\"\", \"tuiSliderThumbLabel\", \"\"]],\n      contentQueries: function TuiSliderThumbLabel_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, TuiSliderComponent, 5);\n          i0.ɵɵcontentQuery(dirIndex, NgControl, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slider = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.control = _t.first);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      attrs: _c1,\n      ngContentSelectors: _c3,\n      decls: 5,\n      vars: 8,\n      consts: [[4, \"ngIf\"], [1, \"t-ghost\"]],\n      template: function TuiSliderThumbLabel_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c2);\n          i0.ɵɵtemplate(0, TuiSliderThumbLabel_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n          i0.ɵɵpipe(1, \"async\");\n          i0.ɵɵelementStart(2, \"div\", 1);\n          i0.ɵɵprojection(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵprojection(4, 1);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 6, ctx.control == null ? null : ctx.control.valueChanges));\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleProp(\"--tui-slider-thumb-ratio\", ctx.ratio)(\"left\", ctx.ghostLeft, \"px\");\n          i0.ɵɵattribute(\"data-size\", ctx.size);\n        }\n      },\n      dependencies: [AsyncPipe, NgIf],\n      styles: [\"[_nghost-%COMP%]{position:relative}.t-ghost[_ngcontent-%COMP%]{position:absolute;top:0;bottom:0;margin:auto;border-radius:50%;pointer-events:none}.t-ghost[data-size=s][_ngcontent-%COMP%]{inline-size:.5rem;block-size:.5rem;transform:translate(calc(var(--tui-slider-thumb-ratio) * -.5rem))}.t-ghost[data-size=m][_ngcontent-%COMP%]{inline-size:.75rem;block-size:.75rem;transform:translate(calc(var(--tui-slider-thumb-ratio) * -.75rem))}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiSliderThumbLabel, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: '[tuiSliderThumbLabel]',\n      imports: [AsyncPipe, NgIf],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ng-container *ngIf=\\\"control?.valueChanges | async\\\" />\\n\\n<div\\n    class=\\\"t-ghost\\\"\\n    [attr.data-size]=\\\"size\\\"\\n    [style.--tui-slider-thumb-ratio]=\\\"ratio\\\"\\n    [style.left.px]=\\\"ghostLeft\\\"\\n>\\n    <ng-content />\\n</div>\\n\\n<ng-content select=\\\"input[type=range]\\\" />\\n\",\n      styles: [\":host{position:relative}.t-ghost{position:absolute;top:0;bottom:0;margin:auto;border-radius:50%;pointer-events:none}.t-ghost[data-size=s]{inline-size:.5rem;block-size:.5rem;transform:translate(calc(var(--tui-slider-thumb-ratio) * -.5rem))}.t-ghost[data-size=m]{inline-size:.75rem;block-size:.75rem;transform:translate(calc(var(--tui-slider-thumb-ratio) * -.75rem))}\\n\"]\n    }]\n  }], null, {\n    slider: [{\n      type: ContentChild,\n      args: [TuiSliderComponent]\n    }],\n    control: [{\n      type: ContentChild,\n      args: [NgControl]\n    }]\n  });\n})();\nconst TuiSlider = [TuiSliderComponent, TuiSliderThumbLabel, TuiSliderKeySteps, TuiSliderReadonly];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_FLOATING_PRECISION, TUI_SLIDER_DEFAULT_OPTIONS, TUI_SLIDER_OPTIONS, TuiSlider, TuiSliderComponent, TuiSliderKeySteps, TuiSliderReadonly, TuiSliderThumbLabel, tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue, tuiSliderOptionsProvider };\n", "import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { inject, EventEmitter, Directive, Output, signal, computed, ElementRef, Component, ChangeDetectionStrategy, Input, ViewChildren } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { TuiControl } from '@taiga-ui/cdk/classes';\nimport { EMPTY_QUERY } from '@taiga-ui/cdk/constants';\nimport { tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';\nimport { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';\nimport { tuiClamp, tuiRound, tuiQuantize } from '@taiga-ui/cdk/utils/math';\nimport { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';\nimport * as i3 from '@taiga-ui/kit/components/slider';\nimport { TUI_FLOATING_PRECISION, TUI_SLIDER_OPTIONS, tuiPercentageToKeyStepValue, tuiKeyStepValueToPercentage, TuiSliderComponent, TuiSlider } from '@taiga-ui/kit/components/slider';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { tuiTypedFromEvent } from '@taiga-ui/cdk/observables';\nimport { merge, filter, map, tap, switchMap, startWith, takeUntil, repeat } from 'rxjs';\nconst _c0 = () => ({\n  standalone: true\n});\nclass TuiRangeChange {\n  constructor() {\n    this.doc = inject(DOCUMENT);\n    this.el = tuiInjectElement();\n    this.range = inject(TuiRange);\n    /**\n     * TODO replace with pointer events (when all supported browsers can handle them).\n     * Don't forget to use setPointerCapture instead of listening all doc events\n     */\n    this.pointerDown$ = tuiTypedFromEvent(this.el, 'pointerdown', {\n      passive: true,\n      capture: true\n    });\n    this.pointerMove$ = merge(tuiTypedFromEvent(this.doc, 'touchmove').pipe(filter(({\n      touches\n    }) => touches.length === 1), map(({\n      touches\n    }) => touches[0]), filter(event => !!event)), tuiTypedFromEvent(this.doc, 'mousemove'));\n    this.pointerUp$ = merge(tuiTypedFromEvent(this.doc, 'touchend', {\n      passive: true\n    }), tuiTypedFromEvent(this.doc, 'mouseup', {\n      passive: true\n    }));\n    this.activeThumbChange = new EventEmitter();\n    let activeThumb;\n    this.pointerDown$.pipe(tap(({\n      clientX,\n      target\n    }) => {\n      activeThumb = this.detectActiveThumb(clientX, target);\n      this.activeThumbChange.emit(activeThumb);\n      if (this.range.focusable) {\n        this.el.focus();\n      }\n    }), switchMap(event => this.pointerMove$.pipe(startWith(event))), map(({\n      clientX\n    }) => this.getFractionFromEvents(clientX ?? 0)), takeUntil(this.pointerUp$), repeat(), takeUntilDestroyed()).subscribe(fraction => {\n      const value = this.range.toValue(fraction);\n      this.range.processValue(value, activeThumb === 'right');\n    });\n  }\n  getFractionFromEvents(clickClientX) {\n    const hostRect = this.el.getBoundingClientRect();\n    const value = clickClientX - hostRect.left;\n    const total = hostRect.width;\n    return tuiClamp(tuiRound(value / total, TUI_FLOATING_PRECISION), 0, 1);\n  }\n  detectActiveThumb(clientX, target) {\n    const [leftSliderRef, rightSliderRef] = this.range.slidersRefs;\n    switch (target) {\n      case leftSliderRef?.nativeElement:\n        return 'left';\n      case rightSliderRef?.nativeElement:\n        return 'right';\n      default:\n        return this.findNearestActiveThumb(clientX);\n    }\n  }\n  findNearestActiveThumb(clientX) {\n    const fraction = this.getFractionFromEvents(clientX);\n    const deltaLeft = fraction * 100 - this.range.left();\n    const deltaRight = fraction * 100 - 100 + this.range.right();\n    return Math.abs(deltaLeft) > Math.abs(deltaRight) || deltaRight > 0 || this.range.left() === 0 && this.range.right() === 100 ? 'right' : 'left';\n  }\n  static {\n    this.ɵfac = function TuiRangeChange_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiRangeChange)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiRangeChange,\n      outputs: {\n        activeThumbChange: \"activeThumbChange\"\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiRangeChange, [{\n    type: Directive,\n    args: [{\n      standalone: true\n    }]\n  }], function () {\n    return [];\n  }, {\n    activeThumbChange: [{\n      type: Output\n    }]\n  });\n})();\nclass TuiRange extends TuiControl {\n  constructor() {\n    super(...arguments);\n    // TODO: refactor to signal inputs after Angular update\n    this.changes = signal(1);\n    this.el = tuiInjectElement();\n    this.options = inject(TUI_SLIDER_OPTIONS);\n    this.lastActiveThumb = 'right';\n    this.min = 0;\n    this.max = 100;\n    this.step = 1;\n    this.size = this.options.size;\n    this.segments = 1;\n    this.keySteps = null;\n    this.focusable = true;\n    this.margin = 0;\n    this.limit = Infinity;\n    this.slidersRefs = EMPTY_QUERY;\n    this.left = computed(() => this.toPercent(this.value()[0]));\n    this.right = computed(() => 100 - this.toPercent(this.value()[1]));\n  }\n  ngOnChanges() {\n    this.changes.set(this.changes() + 1);\n  }\n  processValue(value, right) {\n    if (right) {\n      this.updateEnd(value);\n    } else {\n      this.updateStart(value);\n    }\n    this.lastActiveThumb = right ? 'right' : 'left';\n  }\n  toValue(fraction) {\n    return tuiPercentageToKeyStepValue(tuiClamp(tuiQuantize(fraction, this.fractionStep), 0, 1) * 100, this.computedKeySteps);\n  }\n  get fractionStep() {\n    return this.step / (this.max - this.min);\n  }\n  get computedKeySteps() {\n    return this.computePureKeySteps(this.keySteps, this.min, this.max);\n  }\n  get segmentWidthRatio() {\n    return 1 / this.segments;\n  }\n  changeByStep(coefficient, target) {\n    const [sliderLeftRef, sliderRightRef] = this.slidersRefs;\n    const leftThumbElement = sliderLeftRef?.nativeElement;\n    const rightThumbElement = sliderRightRef?.nativeElement;\n    const isRightThumb = target === this.el ? this.lastActiveThumb === 'right' : target === rightThumbElement;\n    const activeThumbElement = isRightThumb ? rightThumbElement : leftThumbElement;\n    const previousValue = isRightThumb ? this.value()[1] : this.value()[0];\n    /** @bad TODO think about a solution without twice conversion */\n    const previousFraction = this.toPercent(previousValue) / 100;\n    const newFractionValue = previousFraction + coefficient * this.fractionStep;\n    this.processValue(this.toValue(newFractionValue), isRightThumb);\n    activeThumbElement?.focus();\n  }\n  toPercent(value) {\n    return this.changes() && tuiKeyStepValueToPercentage(value, this.computedKeySteps);\n  }\n  computePureKeySteps(keySteps, min, max) {\n    return keySteps || [[0, min], [100, max]];\n  }\n  updateStart(value) {\n    const newValue = Math.min(value, this.value()[1]);\n    const distance = this.value()[1] - newValue;\n    if (!this.checkDistance(distance)) {\n      return;\n    }\n    this.onChange([newValue, this.value()[1]]);\n  }\n  updateEnd(value) {\n    const newValue = Math.max(value, this.value()[0]);\n    const distance = newValue - this.value()[0];\n    if (!this.checkDistance(distance)) {\n      return;\n    }\n    this.onChange([this.value()[0], newValue]);\n  }\n  checkDistance(distance) {\n    return tuiClamp(distance, this.margin, this.limit) === distance;\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵTuiRange_BaseFactory;\n      return function TuiRange_Factory(__ngFactoryType__) {\n        return (ɵTuiRange_BaseFactory || (ɵTuiRange_BaseFactory = i0.ɵɵgetInheritedFactory(TuiRange)))(__ngFactoryType__ || TuiRange);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TuiRange,\n      selectors: [[\"tui-range\"]],\n      viewQuery: function TuiRange_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TuiSliderComponent, 5, ElementRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slidersRefs = _t);\n        }\n      },\n      hostVars: 11,\n      hostBindings: function TuiRange_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focusout\", function TuiRange_focusout_HostBindingHandler() {\n            return ctx.onTouched();\n          })(\"keydown.arrowUp.prevent\", function TuiRange_keydown_arrowUp_prevent_HostBindingHandler($event) {\n            return ctx.changeByStep(1, $event.target);\n          })(\"keydown.arrowRight.prevent\", function TuiRange_keydown_arrowRight_prevent_HostBindingHandler($event) {\n            return ctx.changeByStep(1, $event.target);\n          })(\"keydown.arrowLeft.prevent\", function TuiRange_keydown_arrowLeft_prevent_HostBindingHandler($event) {\n            return ctx.changeByStep(-1, $event.target);\n          })(\"keydown.arrowDown.prevent\", function TuiRange_keydown_arrowDown_prevent_HostBindingHandler($event) {\n            return ctx.changeByStep(-1, $event.target);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"data-size\", ctx.size)(\"tabindex\", -1)(\"aria-disabled\", ctx.disabled());\n          i0.ɵɵstyleProp(\"--left\", ctx.left(), \"%\")(\"--right\", ctx.right(), \"%\")(\"background\", ctx.options.trackColor);\n          i0.ɵɵclassProp(\"_disabled\", ctx.disabled());\n        }\n      },\n      inputs: {\n        min: \"min\",\n        max: \"max\",\n        step: \"step\",\n        size: \"size\",\n        segments: \"segments\",\n        keySteps: \"keySteps\",\n        focusable: \"focusable\",\n        margin: \"margin\",\n        limit: \"limit\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([tuiFallbackValueProvider([0, 0])]), i0.ɵɵHostDirectivesFeature([{\n        directive: TuiRangeChange,\n        outputs: [\"activeThumbChange\", \"activeThumbChange\"]\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 22,\n      consts: [[1, \"t-track\"], [\"automation-id\", \"tui-range__left\", \"readonly\", \"\", \"step\", \"any\", \"tuiSlider\", \"\", \"type\", \"range\", 1, \"t-thumb\", 3, \"disabled\", \"keySteps\", \"max\", \"min\", \"ngModel\", \"ngModelOptions\", \"size\", \"tabIndex\"], [\"automation-id\", \"tui-range__right\", \"readonly\", \"\", \"step\", \"any\", \"tuiSlider\", \"\", \"type\", \"range\", 1, \"t-thumb\", 3, \"disabled\", \"keySteps\", \"max\", \"min\", \"ngModel\", \"ngModelOptions\", \"size\", \"tabIndex\"]],\n      template: function TuiRange_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"input\", 1)(2, \"input\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"--bg-size-ratio\", 1 - ctx.segmentWidthRatio)(\"--segment-width\", ctx.segmentWidthRatio * 100, \"%\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.disabled())(\"keySteps\", ctx.computedKeySteps)(\"max\", ctx.max)(\"min\", ctx.min)(\"ngModel\", ctx.value()[0])(\"ngModelOptions\", i0.ɵɵpureFunction0(20, _c0))(\"size\", ctx.size)(\"tabIndex\", ctx.focusable ? 0 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.disabled())(\"keySteps\", ctx.computedKeySteps)(\"max\", ctx.max)(\"min\", ctx.min)(\"ngModel\", ctx.value()[1])(\"ngModelOptions\", i0.ɵɵpureFunction0(21, _c0))(\"size\", ctx.size)(\"tabIndex\", ctx.focusable ? 0 : -1);\n        }\n      },\n      dependencies: [FormsModule, i2.DefaultValueAccessor, i2.RangeValueAccessor, i2.NgControlStatus, i2.NgModel, i3.TuiSliderComponent, i3.TuiSliderKeySteps, i3.TuiSliderReadonly],\n      styles: [\"[_nghost-%COMP%]{position:relative;display:block;block-size:.125rem;border-radius:var(--tui-radius-m);background:var(--tui-border-normal);cursor:pointer;outline:none;margin:.4375rem 0;touch-action:pan-x}[_nghost-%COMP%]:active{cursor:ew-resize}[_nghost-%COMP%]:after{content:\\\"\\\";position:absolute;top:-.4375rem;bottom:-.4375rem;inline-size:100%}._disabled[_nghost-%COMP%]{opacity:var(--tui-disabled-opacity);pointer-events:none}[data-size=s][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{position:relative;margin:0 .25rem;block-size:100%}[data-size=s][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;top:0;left:max(calc(var(--left) - 1px),1px);right:max(var(--right),1px);block-size:100%;background:var(--tui-background-accent-1);margin:0 -.25rem}[data-size=s][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\\\"\\\";left:.125rem;right:.375rem;background-image:repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}[data-size=m][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{position:relative;margin:0 .375rem;block-size:100%}[data-size=m][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;top:0;left:max(calc(var(--left) - 1px),1px);right:max(var(--right),1px);block-size:100%;background:var(--tui-background-accent-1);margin:0 -.375rem}[data-size=m][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\\\"\\\";left:.25rem;right:.5rem;background-image:repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}.t-thumb[_ngcontent-%COMP%]{pointer-events:none;position:absolute;top:.0625rem;left:0;right:0;z-index:1;transform:translateY(-50%)}.t-thumb[_ngcontent-%COMP%]::-webkit-slider-thumb{pointer-events:all}.t-thumb[_ngcontent-%COMP%]::-moz-range-thumb{pointer-events:all}input[type=range].t-thumb[_ngcontent-%COMP%]::-webkit-slider-runnable-track{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-moz-range-track{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-moz-range-progress{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-ms-track{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-ms-fill-lower{background:transparent}.t-thumb[_ngcontent-%COMP%]:last-of-type{--tui-slider-thumb-transform: translateX(50%) translateX(1px)}.t-thumb[_ngcontent-%COMP%]:first-of-type{--tui-slider-thumb-transform: translateX(-50%) translateX(-1px)}._disabled[_nghost-%COMP%]   .t-thumb[_ngcontent-%COMP%]{opacity:1}\"],\n      changeDetection: 0\n    });\n  }\n}\n__decorate([tuiPure], TuiRange.prototype, \"computePureKeySteps\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiRange, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      selector: 'tui-range',\n      imports: [FormsModule, TuiSlider],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [tuiFallbackValueProvider([0, 0])],\n      hostDirectives: [{\n        directive: TuiRangeChange,\n        outputs: ['activeThumbChange']\n      }],\n      host: {\n        '[attr.data-size]': 'size',\n        '[attr.tabindex]': '-1',\n        '[attr.aria-disabled]': 'disabled()',\n        '[style.--left.%]': 'left()',\n        '[style.--right.%]': 'right()',\n        '[style.background]': 'options.trackColor',\n        '[class._disabled]': 'disabled()',\n        '(focusout)': 'onTouched()',\n        '(keydown.arrowUp.prevent)': 'changeByStep(1, $event.target)',\n        '(keydown.arrowRight.prevent)': 'changeByStep(1, $event.target)',\n        '(keydown.arrowLeft.prevent)': 'changeByStep(-1, $event.target)',\n        '(keydown.arrowDown.prevent)': 'changeByStep(-1, $event.target)'\n      },\n      template: \"<div\\n    class=\\\"t-track\\\"\\n    [style.--bg-size-ratio]=\\\"1 - segmentWidthRatio\\\"\\n    [style.--segment-width.%]=\\\"segmentWidthRatio * 100\\\"\\n>\\n    <input\\n        automation-id=\\\"tui-range__left\\\"\\n        readonly\\n        step=\\\"any\\\"\\n        tuiSlider\\n        type=\\\"range\\\"\\n        class=\\\"t-thumb\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [keySteps]=\\\"computedKeySteps\\\"\\n        [max]=\\\"max\\\"\\n        [min]=\\\"min\\\"\\n        [ngModel]=\\\"value()[0]\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n        [size]=\\\"size\\\"\\n        [tabIndex]=\\\"focusable ? 0 : -1\\\"\\n    />\\n    <input\\n        automation-id=\\\"tui-range__right\\\"\\n        readonly\\n        step=\\\"any\\\"\\n        tuiSlider\\n        type=\\\"range\\\"\\n        class=\\\"t-thumb\\\"\\n        [disabled]=\\\"disabled()\\\"\\n        [keySteps]=\\\"computedKeySteps\\\"\\n        [max]=\\\"max\\\"\\n        [min]=\\\"min\\\"\\n        [ngModel]=\\\"value()[1]\\\"\\n        [ngModelOptions]=\\\"{standalone: true}\\\"\\n        [size]=\\\"size\\\"\\n        [tabIndex]=\\\"focusable ? 0 : -1\\\"\\n    />\\n</div>\\n\",\n      styles: [\":host{position:relative;display:block;block-size:.125rem;border-radius:var(--tui-radius-m);background:var(--tui-border-normal);cursor:pointer;outline:none;margin:.4375rem 0;touch-action:pan-x}:host:active{cursor:ew-resize}:host:after{content:\\\"\\\";position:absolute;top:-.4375rem;bottom:-.4375rem;inline-size:100%}:host._disabled{opacity:var(--tui-disabled-opacity);pointer-events:none}:host[data-size=s] .t-track{position:relative;margin:0 .25rem;block-size:100%}:host[data-size=s] .t-track:before{content:\\\"\\\";position:absolute;top:0;left:max(calc(var(--left) - 1px),1px);right:max(var(--right),1px);block-size:100%;background:var(--tui-background-accent-1);margin:0 -.25rem}:host[data-size=s] .t-track:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\\\"\\\";left:.125rem;right:.375rem;background-image:repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}:host[data-size=m] .t-track{position:relative;margin:0 .375rem;block-size:100%}:host[data-size=m] .t-track:before{content:\\\"\\\";position:absolute;top:0;left:max(calc(var(--left) - 1px),1px);right:max(var(--right),1px);block-size:100%;background:var(--tui-background-accent-1);margin:0 -.375rem}:host[data-size=m] .t-track:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\\\"\\\";left:.25rem;right:.5rem;background-image:repeating-linear-gradient(to right,var(--tui-text-tertiary) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}.t-thumb{pointer-events:none;position:absolute;top:.0625rem;left:0;right:0;z-index:1;transform:translateY(-50%)}.t-thumb::-webkit-slider-thumb{pointer-events:all}.t-thumb::-moz-range-thumb{pointer-events:all}input[type=range].t-thumb::-webkit-slider-runnable-track{background:transparent}input[type=range].t-thumb::-moz-range-track{background:transparent}input[type=range].t-thumb::-moz-range-progress{background:transparent}input[type=range].t-thumb::-ms-track{background:transparent}input[type=range].t-thumb::-ms-fill-lower{background:transparent}.t-thumb:last-of-type{--tui-slider-thumb-transform: translateX(50%) translateX(1px)}.t-thumb:first-of-type{--tui-slider-thumb-transform: translateX(-50%) translateX(-1px)}:host._disabled .t-thumb{opacity:1}\\n\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    segments: [{\n      type: Input\n    }],\n    keySteps: [{\n      type: Input\n    }],\n    focusable: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    limit: [{\n      type: Input\n    }],\n    slidersRefs: [{\n      type: ViewChildren,\n      args: [TuiSliderComponent, {\n        read: ElementRef\n      }]\n    }],\n    computePureKeySteps: []\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiRange, TuiRangeChange };\n", "import * as i0 from '@angular/core';\nimport { Pipe } from '@angular/core';\nclass TuiStringifyContentPipe {\n  transform(stringify) {\n    return ({\n      $implicit\n    }) => stringify($implicit);\n  }\n  static {\n    this.ɵfac = function TuiStringifyContentPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiStringifyContentPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"tuiStringifyContent\",\n      type: TuiStringifyContentPipe,\n      pure: true,\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiStringifyContentPipe, [{\n    type: Pipe,\n    args: [{\n      standalone: true,\n      name: 'tuiStringifyContent'\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiStringifyContentPipe };\n", "import { maskitoUpdateElement, MASKITO_DEFAULT_OPTIONS, maskitoTransform } from '@maskito/core';\n\n/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nfunction clamp(value, min, max) {\n  const clampedValue = Math.min(Number(max), Math.max(Number(min), Number(value)));\n  return value instanceof Date ? new Date(clampedValue) : clampedValue;\n}\nfunction countDigits(str) {\n  return str.replaceAll(/\\W/g, '').length;\n}\nfunction appendDate(initialDate, {\n  day,\n  month,\n  year\n} = {}) {\n  const date = new Date(initialDate);\n  if (day) {\n    date.setDate(date.getDate() + day);\n  }\n  if (month) {\n    date.setMonth(date.getMonth() + month);\n  }\n  if (year) {\n    date.setFullYear(date.getFullYear() + year);\n  }\n  return date;\n}\nconst getDateSegmentValueLength = dateString => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    day: (_b = (_a = dateString.match(/d/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0,\n    month: (_d = (_c = dateString.match(/m/g)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0,\n    year: (_f = (_e = dateString.match(/y/g)) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 0\n  };\n};\nfunction dateToSegments(date) {\n  return {\n    day: String(date.getDate()).padStart(2, '0'),\n    month: String(date.getMonth() + 1).padStart(2, '0'),\n    year: String(date.getFullYear()).padStart(4, '0'),\n    hours: String(date.getHours()).padStart(2, '0'),\n    minutes: String(date.getMinutes()).padStart(2, '0'),\n    seconds: String(date.getSeconds()).padStart(2, '0'),\n    milliseconds: String(date.getMilliseconds()).padStart(3, '0')\n  };\n}\nfunction getFirstCompleteDate(dateString, dateModeTemplate) {\n  const digitsInDate = countDigits(dateModeTemplate);\n  const [completeDate = ''] = new RegExp(`(\\\\D*\\\\d){${digitsInDate}}`).exec(dateString) || [];\n  return completeDate;\n}\nfunction isDateStringComplete(dateString, dateModeTemplate) {\n  if (dateString.length < dateModeTemplate.length) {\n    return false;\n  }\n  return dateString.split(/\\D/).every(segment => !/^0+$/.exec(segment));\n}\nfunction parseDateRangeString(dateRange, dateModeTemplate, rangeSeparator) {\n  const digitsInDate = countDigits(dateModeTemplate);\n  return dateRange.replace(rangeSeparator, '').match(new RegExp(`(\\\\D*\\\\d[^\\\\d\\\\s]*){1,${digitsInDate}}`, 'g')) || [];\n}\nfunction parseDateString(dateString, fullMode) {\n  const cleanMode = fullMode.replaceAll(/[^dmy]/g, '');\n  const onlyDigitsDate = dateString.replaceAll(/\\D+/g, '');\n  const dateSegments = {\n    day: onlyDigitsDate.slice(cleanMode.indexOf('d'), cleanMode.lastIndexOf('d') + 1),\n    month: onlyDigitsDate.slice(cleanMode.indexOf('m'), cleanMode.lastIndexOf('m') + 1),\n    year: onlyDigitsDate.slice(cleanMode.indexOf('y'), cleanMode.lastIndexOf('y') + 1)\n  };\n  return Object.fromEntries(Object.entries(dateSegments).filter(([_, value]) => Boolean(value)).sort(([a], [b]) => fullMode.toLowerCase().indexOf(a.slice(0, 1)) > fullMode.toLowerCase().indexOf(b.slice(0, 1)) ? 1 : -1));\n}\nfunction segmentsToDate(parsedDate, parsedTime) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  const year = ((_a = parsedDate.year) === null || _a === void 0 ? void 0 : _a.length) === 2 ? `20${parsedDate.year}` : parsedDate.year;\n  const date = new Date(Number(year !== null && year !== void 0 ? year : '0'), Number((_b = parsedDate.month) !== null && _b !== void 0 ? _b : '1') - 1, Number((_c = parsedDate.day) !== null && _c !== void 0 ? _c : '1'), Number((_d = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.hours) !== null && _d !== void 0 ? _d : '0'), Number((_e = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.minutes) !== null && _e !== void 0 ? _e : '0'), Number((_f = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.seconds) !== null && _f !== void 0 ? _f : '0'), Number((_g = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.milliseconds) !== null && _g !== void 0 ? _g : '0'));\n  // needed for years less than 1900\n  date.setFullYear(Number(year !== null && year !== void 0 ? year : '0'));\n  return date;\n}\nconst DATE_TIME_SEPARATOR = ', ';\nfunction toDateString({\n  day,\n  month,\n  year,\n  hours,\n  minutes,\n  seconds,\n  milliseconds\n}, {\n  dateMode,\n  dateTimeSeparator = DATE_TIME_SEPARATOR,\n  timeMode\n}) {\n  var _a;\n  const safeYear = ((_a = dateMode.match(/y/g)) === null || _a === void 0 ? void 0 : _a.length) === 2 ? year === null || year === void 0 ? void 0 : year.slice(-2) : year;\n  const fullMode = dateMode + (timeMode ? dateTimeSeparator + timeMode : '');\n  return fullMode.replaceAll(/d+/g, day !== null && day !== void 0 ? day : '').replaceAll(/m+/g, month !== null && month !== void 0 ? month : '').replaceAll(/y+/g, safeYear !== null && safeYear !== void 0 ? safeYear : '').replaceAll(/H+/g, hours !== null && hours !== void 0 ? hours : '').replaceAll('MSS', milliseconds !== null && milliseconds !== void 0 ? milliseconds : '').replaceAll(/M+/g, minutes !== null && minutes !== void 0 ? minutes : '').replaceAll(/S+/g, seconds !== null && seconds !== void 0 ? seconds : '').replaceAll(/^\\D+/g, '').replaceAll(/\\D+$/g, '');\n}\nconst DATE_SEGMENTS_MAX_VALUES = {\n  day: 31,\n  month: 12,\n  year: 9999\n};\nconst DEFAULT_DECIMAL_PSEUDO_SEPARATORS = ['.', ',', 'б', 'ю'];\nconst DEFAULT_MIN_DATE = new Date('0001-01-01');\nconst DEFAULT_MAX_DATE = new Date('9999-12-31');\nconst DEFAULT_TIME_SEGMENT_MAX_VALUES = {\n  hours: 23,\n  minutes: 59,\n  seconds: 59,\n  milliseconds: 999\n};\nconst DEFAULT_TIME_SEGMENT_MIN_VALUES = {\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  milliseconds: 0\n};\n\n/**\n * {@link https://unicode-table.com/en/00A0/ Non-breaking space}.\n */\nconst CHAR_NO_BREAK_SPACE = '\\u00A0';\n/**\n * {@link https://symbl.cc/en/200B/ Zero width space}.\n */\nconst CHAR_ZERO_WIDTH_SPACE = '\\u200B';\n/**\n * {@link https://unicode-table.com/en/2013/ EN dash}\n * is used to indicate a range of numbers or a span of time.\n * @example 2006–2022\n */\nconst CHAR_EN_DASH = '\\u2013';\n/**\n * {@link https://unicode-table.com/en/2014/ EM dash}\n * is used to mark a break in a sentence.\n * @example Taiga UI — powerful set of open source components for Angular\n * ___\n * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_HYPHEN}!\n */\nconst CHAR_EM_DASH = '\\u2014';\n/**\n * {@link https://unicode-table.com/en/002D/ Hyphen (minus sign)}\n * is used to combine words.\n * @example well-behaved\n * ___\n * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_EM_DASH}!\n */\nconst CHAR_HYPHEN = '\\u002D';\n/**\n * {@link https://unicode-table.com/en/2212/ Minus}\n * is used as math operator symbol or before negative digits.\n * ---\n * Can be used as `&minus;`. Don't confuse with {@link CHAR_HYPHEN}\n */\nconst CHAR_MINUS = '\\u2212';\n/**\n * {@link https://symbl.cc/en/30FC/ Katakana-Hiragana Prolonged Sound Mark}\n * is used as prolonged sounds in Japanese.\n */\nconst CHAR_JP_HYPHEN = '\\u30FC';\n/**\n * {@link https://symbl.cc/en/003A/ Colon}\n * is a punctuation mark that connects parts of a text logically.\n * ---\n * is also used as separator in time.\n */\nconst CHAR_COLON = '\\u003A';\n/**\n * {@link https://symbl.cc/en/FF1A/ Full-width colon}\n * is a full-width punctuation mark used to separate parts of a text commonly in Japanese.\n */\nconst CHAR_JP_COLON = '\\uFF1A';\nconst ANY_MERIDIEM_CHARACTER_RE = new RegExp(`[${CHAR_NO_BREAK_SPACE}APM]+$`, 'g');\nconst ALL_MERIDIEM_CHARACTERS_RE = new RegExp(`${CHAR_NO_BREAK_SPACE}[AP]M$`, 'g');\nconst TIME_FIXED_CHARACTERS = [':', '.'];\nconst TIME_SEGMENT_VALUE_LENGTHS = {\n  hours: 2,\n  minutes: 2,\n  seconds: 2,\n  milliseconds: 3\n};\nfunction validateDateString({\n  dateString,\n  dateModeTemplate,\n  dateSegmentsSeparator,\n  offset,\n  selection: [from, to]\n}) {\n  const parsedDate = parseDateString(dateString, dateModeTemplate);\n  const dateSegments = Object.entries(parsedDate);\n  const validatedDateSegments = {};\n  for (const [segmentName, segmentValue] of dateSegments) {\n    const validatedDate = toDateString(validatedDateSegments, {\n      dateMode: dateModeTemplate\n    });\n    const maxSegmentValue = DATE_SEGMENTS_MAX_VALUES[segmentName];\n    const fantomSeparator = validatedDate.length && dateSegmentsSeparator.length;\n    const lastSegmentDigitIndex = offset + validatedDate.length + fantomSeparator + getDateSegmentValueLength(dateModeTemplate)[segmentName];\n    const isLastSegmentDigitAdded = lastSegmentDigitIndex >= from && lastSegmentDigitIndex === to;\n    if (isLastSegmentDigitAdded && Number(segmentValue) > Number(maxSegmentValue)) {\n      // 3|1.10.2010 => Type 9 => 3|1.10.2010\n      return {\n        validatedDateString: '',\n        updatedSelection: [from, to]\n      }; // prevent changes\n    }\n    if (isLastSegmentDigitAdded && Number(segmentValue) < 1) {\n      // 31.0|1.2010 => Type 0 => 31.0|1.2010\n      return {\n        validatedDateString: '',\n        updatedSelection: [from, to]\n      }; // prevent changes\n    }\n    validatedDateSegments[segmentName] = segmentValue;\n  }\n  const validatedDateString = toDateString(validatedDateSegments, {\n    dateMode: dateModeTemplate\n  });\n  const addedDateSegmentSeparators = validatedDateString.length - dateString.length;\n  return {\n    validatedDateString,\n    updatedSelection: [from + addedDateSegmentSeparators, to + addedDateSegmentSeparators]\n  };\n}\n\n/**\n * Copy-pasted solution from lodash\n * @see https://lodash.com/docs/4.17.15#escapeRegExp\n */\nconst reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\nconst reHasRegExpChar = new RegExp(reRegExpChar.source);\nfunction escapeRegExp(str) {\n  return str && reHasRegExpChar.test(str) ? str.replaceAll(reRegExpChar, String.raw`\\$&`) : str;\n}\nfunction extractAffixes(value, {\n  prefix,\n  postfix\n}) {\n  var _a, _b;\n  const prefixRegExp = new RegExp(`^${escapeRegExp(prefix)}`);\n  const postfixRegExp = new RegExp(`${escapeRegExp(postfix)}$`);\n  const [extractedPrefix = ''] = (_a = value.match(prefixRegExp)) !== null && _a !== void 0 ? _a : [];\n  const [extractedPostfix = ''] = (_b = value.match(postfixRegExp)) !== null && _b !== void 0 ? _b : [];\n  const cleanValue = value.replace(prefixRegExp, '').replace(postfixRegExp, '');\n  return {\n    extractedPrefix,\n    extractedPostfix,\n    cleanValue\n  };\n}\nfunction findCommonBeginningSubstr(a, b) {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return res;\n    }\n    res += a[i];\n  }\n  return res;\n}\nfunction identity(x) {\n  return x;\n}\nfunction isEmpty(entity) {\n  return !entity || typeof entity === 'object' && Object.keys(entity).length === 0;\n}\nconst ALL_ZEROES_RE = /^0+$/;\nfunction padWithZeroesUntilValid(segmentValue, paddedMaxValue, prefixedZeroesCount = 0) {\n  const paddedSegmentValue = segmentValue.padEnd(paddedMaxValue.length, '0');\n  if (Number(paddedSegmentValue) <= Number(paddedMaxValue)) {\n    return {\n      validatedSegmentValue: segmentValue,\n      prefixedZeroesCount\n    };\n  }\n  if (paddedSegmentValue.endsWith('0')) {\n    // 00:|00 => Type 9 => 00:09|\n    return padWithZeroesUntilValid(`0${segmentValue.slice(0, paddedMaxValue.length - 1)}`, paddedMaxValue, prefixedZeroesCount + 1);\n  }\n  const valueWithoutLastChar = segmentValue.slice(0, paddedMaxValue.length - 1);\n  if (ALL_ZEROES_RE.exec(valueWithoutLastChar)) {\n    return {\n      validatedSegmentValue: '',\n      prefixedZeroesCount\n    };\n  }\n  // |19:00 => Type 2 => 2|0:00\n  return padWithZeroesUntilValid(`${valueWithoutLastChar}0`, paddedMaxValue, prefixedZeroesCount);\n}\n\n/**\n * Replace fullwidth colon with half width colon\n * @param fullWidthColon full width colon\n * @returns processed half width colon\n */\nfunction toHalfWidthColon(fullWidthColon) {\n  return fullWidthColon.replaceAll(new RegExp(CHAR_JP_COLON, 'g'), CHAR_COLON);\n}\n\n/**\n * Replace fullwidth numbers with half width number\n * @param fullWidthNumber full width number\n * @returns processed half width number\n */\nfunction toHalfWidthNumber(fullWidthNumber) {\n  return fullWidthNumber.replaceAll(/[０-９]/g, s => String.fromCharCode(s.charCodeAt(0) - 0xfee0));\n}\n\n/**\n * Convert full width colon (：) to half width one (:)\n */\nfunction createColonConvertPreprocessor() {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    return {\n      elementState: {\n        selection,\n        value: toHalfWidthColon(value)\n      },\n      data: toHalfWidthColon(data)\n    };\n  };\n}\nfunction createDateSegmentsZeroPaddingPostprocessor({\n  dateModeTemplate,\n  dateSegmentSeparator,\n  splitFn,\n  uniteFn\n}) {\n  return ({\n    value,\n    selection\n  }) => {\n    var _a;\n    const [from, to] = selection;\n    const {\n      dateStrings,\n      restPart = ''\n    } = splitFn(value);\n    const validatedDateStrings = [];\n    let caretShift = 0;\n    dateStrings.forEach(dateString => {\n      const parsedDate = parseDateString(dateString, dateModeTemplate);\n      const dateSegments = Object.entries(parsedDate);\n      const validatedDateSegments = dateSegments.reduce((acc, [segmentName, segmentValue]) => {\n        const {\n          validatedSegmentValue,\n          prefixedZeroesCount\n        } = padWithZeroesUntilValid(segmentValue, `${DATE_SEGMENTS_MAX_VALUES[segmentName]}`);\n        caretShift += prefixedZeroesCount;\n        return Object.assign(Object.assign({}, acc), {\n          [segmentName]: validatedSegmentValue\n        });\n      }, {});\n      validatedDateStrings.push(toDateString(validatedDateSegments, {\n        dateMode: dateModeTemplate\n      }));\n    });\n    const validatedValue = uniteFn(validatedDateStrings, value) + (((_a = dateStrings[dateStrings.length - 1]) === null || _a === void 0 ? void 0 : _a.endsWith(dateSegmentSeparator)) ? dateSegmentSeparator : '') + restPart;\n    if (caretShift && validatedValue.slice(to + caretShift, to + caretShift + dateSegmentSeparator.length) === dateSegmentSeparator) {\n      /**\n       * If `caretShift` > 0, it means that time segment was padded with zero.\n       * It is only possible if any character insertion happens.\n       * If caret is before `dateSegmentSeparator` => it should be moved after `dateSegmentSeparator`.\n       */\n      caretShift += dateSegmentSeparator.length;\n    }\n    return {\n      selection: [from + caretShift, to + caretShift],\n      value: validatedValue\n    };\n  };\n}\n\n/**\n * It replaces pseudo range separators with valid one.\n * @example '01.01.2000_11.11.2000' -> '01.01.2000 - 01.01.2000'\n * @example '01.01.2000_23:59' -> '01.01.2000, 23:59'\n */\nfunction createFirstDateEndSeparatorPreprocessor({\n  dateModeTemplate,\n  firstDateEndSeparator,\n  dateSegmentSeparator,\n  pseudoFirstDateEndSeparators\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const [from, to] = selection;\n    const firstCompleteDate = getFirstCompleteDate(value, dateModeTemplate);\n    const pseudoSeparators = pseudoFirstDateEndSeparators.filter(x => !firstDateEndSeparator.includes(x) && x !== dateSegmentSeparator);\n    const pseudoSeparatorsRE = new RegExp(`[${pseudoSeparators.join('')}]`, 'gi');\n    const newValue = firstCompleteDate && value.length > firstCompleteDate.length ? firstCompleteDate + value.slice(firstCompleteDate.length).replace(/^[\\D\\s]*/, firstDateEndSeparator) : value;\n    const caretShift = newValue.length - value.length;\n    return {\n      elementState: {\n        selection: [from + caretShift, to + caretShift],\n        value: newValue\n      },\n      data: data.replace(pseudoSeparatorsRE, firstDateEndSeparator)\n    };\n  };\n}\n\n/**\n * Convert full width numbers like １, ２ to half width numbers 1, 2\n */\nfunction createFullWidthToHalfWidthPreprocessor() {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    return {\n      elementState: {\n        selection,\n        value: toHalfWidthNumber(value)\n      },\n      data: toHalfWidthNumber(data)\n    };\n  };\n}\nfunction createTimeMaskExpression(mode) {\n  return Array.from(mode.replace(' AA', '')).map(char => TIME_FIXED_CHARACTERS.includes(char) ? char : /\\d/).concat(mode.includes('AA') ? [CHAR_NO_BREAK_SPACE, /[AP]/i, /M/i] : []);\n}\nfunction padTimeSegments(timeSegments, pad) {\n  return Object.fromEntries(Object.entries(timeSegments).map(([segmentName, segmentValue]) => [segmentName, pad(String(segmentValue), TIME_SEGMENT_VALUE_LENGTHS[segmentName])]));\n}\nfunction padStartTimeSegments(timeSegments) {\n  return padTimeSegments(timeSegments, (value, length) => value.padStart(length, '0'));\n}\nconst SEGMENT_FULL_NAME = {\n  HH: 'hours',\n  MM: 'minutes',\n  SS: 'seconds',\n  MSS: 'milliseconds'\n};\n/**\n * @param timeString can be with/without fixed characters\n */\nfunction parseTimeString(timeString, timeMode) {\n  const onlyDigits = timeString.replaceAll(/\\D+/g, '');\n  let offset = 0;\n  return Object.fromEntries(timeMode.split(/\\W/).filter(segmentAbbr => SEGMENT_FULL_NAME[segmentAbbr]).map(segmentAbbr => {\n    const segmentValue = onlyDigits.slice(offset, offset + segmentAbbr.length);\n    offset += segmentAbbr.length;\n    return [SEGMENT_FULL_NAME[segmentAbbr], segmentValue];\n  }));\n}\nconst LEADING_NON_DIGITS = /^\\D*/;\nconst TRAILING_NON_DIGITS = /\\D*$/;\nfunction toTimeString({\n  hours = '',\n  minutes = '',\n  seconds = '',\n  milliseconds = ''\n}) {\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`.replace(LEADING_NON_DIGITS, '').replace(TRAILING_NON_DIGITS, '');\n}\nconst TRAILING_TIME_SEGMENT_SEPARATOR_REG = new RegExp(`[${TIME_FIXED_CHARACTERS.map(escapeRegExp).join('')}]$`);\n/**\n * Pads invalid time segment with zero to make it valid.\n * @example 00:|00 => Type 9 (too much for the first digit of minutes) => 00:09|\n * @example |19:00 => Type 2 (29 - invalid value for hours) => 2|0:00\n */\nfunction enrichTimeSegmentsWithZeroes({\n  value,\n  selection\n}, {\n  mode,\n  timeSegmentMaxValues = DEFAULT_TIME_SEGMENT_MAX_VALUES\n}) {\n  const [from, to] = selection;\n  const parsedTime = parseTimeString(value, mode);\n  const possibleTimeSegments = Object.entries(parsedTime);\n  const paddedMaxValues = padStartTimeSegments(timeSegmentMaxValues);\n  const validatedTimeSegments = {};\n  let paddedZeroes = 0;\n  for (const [segmentName, segmentValue] of possibleTimeSegments) {\n    const maxSegmentValue = paddedMaxValues[segmentName];\n    const {\n      validatedSegmentValue,\n      prefixedZeroesCount\n    } = padWithZeroesUntilValid(segmentValue, String(maxSegmentValue));\n    paddedZeroes += prefixedZeroesCount;\n    validatedTimeSegments[segmentName] = validatedSegmentValue;\n  }\n  // trailing segment separators or meridiem characters\n  const [trailingNonDigitCharacters = ''] = value.match(/\\D+$/g) || [];\n  const validatedTimeString = toTimeString(validatedTimeSegments) + trailingNonDigitCharacters;\n  const addedDateSegmentSeparators = Math.max(validatedTimeString.length - value.length, 0);\n  let newFrom = from + paddedZeroes + addedDateSegmentSeparators;\n  let newTo = to + paddedZeroes + addedDateSegmentSeparators;\n  if (newFrom === newTo && paddedZeroes &&\n  // if next character after cursor is time segment separator\n  validatedTimeString.slice(0, newTo + 1).match(TRAILING_TIME_SEGMENT_SEPARATOR_REG)) {\n    newFrom++;\n    newTo++;\n  }\n  return {\n    value: validatedTimeString,\n    selection: [newFrom, newTo]\n  };\n}\nfunction padEndTimeSegments(timeSegments) {\n  return padTimeSegments(timeSegments, (value, length) => value.padEnd(length, '0'));\n}\n\n/**\n * Prevent insertion if any time segment will become invalid\n * (and even zero padding won't help with it).\n * @example 2|0:00 => Type 9 => 2|0:00\n */\nfunction createInvalidTimeSegmentInsertionPreprocessor({\n  timeMode,\n  timeSegmentMinValues = DEFAULT_TIME_SEGMENT_MIN_VALUES,\n  timeSegmentMaxValues = DEFAULT_TIME_SEGMENT_MAX_VALUES,\n  parseValue = x => ({\n    timeString: x\n  })\n}) {\n  const invalidCharsRegExp = new RegExp(`[^\\\\d${TIME_FIXED_CHARACTERS.map(escapeRegExp).join('')}]+`);\n  return ({\n    elementState,\n    data\n  }, actionType) => {\n    if (actionType !== 'insert') {\n      return {\n        elementState,\n        data\n      };\n    }\n    const {\n      value,\n      selection\n    } = elementState;\n    const [from, rawTo] = selection;\n    const newCharacters = data.replace(invalidCharsRegExp, '');\n    const to = rawTo + newCharacters.length; // to be conformed with `overwriteMode: replace`\n    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);\n    const {\n      timeString,\n      restValue = ''\n    } = parseValue(newPossibleValue);\n    const timeSegments = Object.entries(parseTimeString(timeString, timeMode));\n    let offset = restValue.length;\n    for (const [segmentName, stringifiedSegmentValue] of timeSegments) {\n      const minSegmentValue = timeSegmentMinValues[segmentName];\n      const maxSegmentValue = timeSegmentMaxValues[segmentName];\n      const segmentValue = Number(stringifiedSegmentValue);\n      const lastSegmentDigitIndex = offset + TIME_SEGMENT_VALUE_LENGTHS[segmentName];\n      if (lastSegmentDigitIndex >= from && lastSegmentDigitIndex <= to && segmentValue !== clamp(segmentValue, minSegmentValue, maxSegmentValue)) {\n        return {\n          elementState,\n          data: ''\n        }; // prevent insertion\n      }\n      offset += stringifiedSegmentValue.length +\n      // any time segment separator\n      1;\n    }\n    return {\n      elementState,\n      data\n    };\n  };\n}\nfunction createMeridiemPreprocessor(timeMode) {\n  if (!timeMode.includes('AA')) {\n    return identity;\n  }\n  const mainMeridiemCharRE = /^[AP]$/gi;\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const newValue = value.toUpperCase();\n    const newData = data.toUpperCase();\n    if (newValue.match(ALL_MERIDIEM_CHARACTERS_RE) && newData.match(mainMeridiemCharRE)) {\n      return {\n        elementState: {\n          value: newValue.replaceAll(ALL_MERIDIEM_CHARACTERS_RE, ''),\n          selection\n        },\n        data: `${newData}M`\n      };\n    }\n    return {\n      elementState: {\n        selection,\n        value: newValue\n      },\n      data: newData\n    };\n  };\n}\nfunction createMeridiemPostprocessor(timeMode) {\n  if (!timeMode.includes('AA')) {\n    return identity;\n  }\n  return ({\n    value,\n    selection\n  }, initialElementState) => {\n    if (!value.match(ANY_MERIDIEM_CHARACTER_RE) || value.match(ALL_MERIDIEM_CHARACTERS_RE)) {\n      return {\n        value,\n        selection\n      };\n    }\n    const [from, to] = selection;\n    // any meridiem character was deleted\n    if (initialElementState.value.match(ALL_MERIDIEM_CHARACTERS_RE)) {\n      const newValue = value.replace(ANY_MERIDIEM_CHARACTER_RE, '');\n      return {\n        value: newValue,\n        selection: [Math.min(from, newValue.length), Math.min(to, newValue.length)]\n      };\n    }\n    const fullMeridiem = `${CHAR_NO_BREAK_SPACE}${value.includes('P') ? 'P' : 'A'}M`;\n    const newValue = value.replace(ANY_MERIDIEM_CHARACTER_RE, x => x !== CHAR_NO_BREAK_SPACE ? fullMeridiem : x);\n    return {\n      value: newValue,\n      selection: to >= newValue.indexOf(fullMeridiem) ? [newValue.length, newValue.length] : selection\n    };\n  };\n}\nfunction raiseSegmentValueToMin(segments, fullMode) {\n  const segmentsLength = getDateSegmentValueLength(fullMode);\n  return Object.fromEntries(Object.entries(segments).map(([key, value]) => {\n    const segmentLength = segmentsLength[key];\n    return [key, value.length === segmentLength && /^0+$/.exec(value) ? '1'.padStart(segmentLength, '0') : value];\n  }));\n}\nfunction createMinMaxDatePostprocessor({\n  dateModeTemplate,\n  min = DEFAULT_MIN_DATE,\n  max = DEFAULT_MAX_DATE,\n  rangeSeparator = '',\n  dateSegmentSeparator = '.'\n}) {\n  return ({\n    value,\n    selection\n  }) => {\n    const endsWithRangeSeparator = rangeSeparator && value.endsWith(rangeSeparator);\n    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);\n    let validatedValue = '';\n    for (const dateString of dateStrings) {\n      validatedValue += validatedValue ? rangeSeparator : '';\n      const parsedDate = parseDateString(dateString, dateModeTemplate);\n      if (!isDateStringComplete(dateString, dateModeTemplate)) {\n        const fixedDate = raiseSegmentValueToMin(parsedDate, dateModeTemplate);\n        const fixedValue = toDateString(fixedDate, {\n          dateMode: dateModeTemplate\n        });\n        const tail = dateString.endsWith(dateSegmentSeparator) ? dateSegmentSeparator : '';\n        validatedValue += fixedValue + tail;\n        continue;\n      }\n      const date = segmentsToDate(parsedDate);\n      const clampedDate = clamp(date, min, max);\n      validatedValue += toDateString(dateToSegments(clampedDate), {\n        dateMode: dateModeTemplate\n      });\n    }\n    return {\n      selection,\n      value: validatedValue + (endsWithRangeSeparator ? rangeSeparator : '')\n    };\n  };\n}\nfunction normalizeDatePreprocessor({\n  dateModeTemplate,\n  dateSegmentsSeparator,\n  rangeSeparator = '',\n  dateTimeSeparator = DATE_TIME_SEPARATOR\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    var _a;\n    const separator = rangeSeparator ? new RegExp(`${rangeSeparator}|-`) : dateTimeSeparator;\n    const possibleDates = data.split(separator);\n    const dates = data.includes(dateTimeSeparator) ? [(_a = possibleDates[0]) !== null && _a !== void 0 ? _a : ''] : possibleDates;\n    if (dates.every(date => date.trim().split(/\\D/).filter(Boolean).length === dateModeTemplate.split(dateSegmentsSeparator).length)) {\n      const newData = dates.map(date => normalizeDateString(date, dateModeTemplate, dateSegmentsSeparator)).join(rangeSeparator);\n      return {\n        elementState,\n        data: `${newData}${data.includes(dateTimeSeparator) ? dateTimeSeparator + possibleDates[1] || '' : ''}`\n      };\n    }\n    return {\n      elementState,\n      data\n    };\n  };\n}\nfunction normalizeDateString(dateString, template, separator) {\n  const dateSegments = dateString.split(/\\D/).filter(Boolean);\n  const templateSegments = template.split(separator);\n  const normalizedSegments = dateSegments.map((segment, index) => {\n    var _a, _b;\n    return index === templateSegments.length - 1 ? segment : segment.padStart((_b = (_a = templateSegments[index]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0, '0');\n  });\n  return normalizedSegments.join(separator);\n}\nfunction maskitoPostfixPostprocessorGenerator(postfix) {\n  const postfixRE = new RegExp(`${escapeRegExp(postfix)}$`);\n  return postfix ? ({\n    value,\n    selection\n  }, initialElementState) => {\n    if (!value && !initialElementState.value.endsWith(postfix)) {\n      // cases when developer wants input to be empty (programmatically)\n      return {\n        value,\n        selection\n      };\n    }\n    if (!value.endsWith(postfix) && !initialElementState.value.endsWith(postfix)) {\n      return {\n        selection,\n        value: value + postfix\n      };\n    }\n    const initialValueBeforePostfix = initialElementState.value.replace(postfixRE, '');\n    const postfixWasModified = initialElementState.selection[1] >= initialValueBeforePostfix.length;\n    const alreadyExistedValueBeforePostfix = findCommonBeginningSubstr(initialValueBeforePostfix, value);\n    return {\n      selection,\n      value: Array.from(postfix).reverse().reduce((newValue, char, index) => {\n        const i = newValue.length - 1 - index;\n        const isInitiallyMirroredChar = alreadyExistedValueBeforePostfix[i] === char && postfixWasModified;\n        return newValue[i] !== char || isInitiallyMirroredChar ? newValue.slice(0, i + 1) + char + newValue.slice(i + 1) : newValue;\n      }, value)\n    };\n  } : identity;\n}\nfunction maskitoPrefixPostprocessorGenerator(prefix) {\n  return prefix ? ({\n    value,\n    selection\n  }, initialElementState) => {\n    if (value.startsWith(prefix) ||\n    // already valid\n    !value && !initialElementState.value.startsWith(prefix) // cases when developer wants input to be empty\n    ) {\n      return {\n        value,\n        selection\n      };\n    }\n    const [from, to] = selection;\n    const prefixedValue = Array.from(prefix).reduce((modifiedValue, char, i) => modifiedValue[i] === char ? modifiedValue : modifiedValue.slice(0, i) + char + modifiedValue.slice(i), value);\n    const addedCharsCount = prefixedValue.length - value.length;\n    return {\n      selection: [from + addedCharsCount, to + addedCharsCount],\n      value: prefixedValue\n    };\n  } : identity;\n}\nfunction createValidDatePreprocessor({\n  dateModeTemplate,\n  dateSegmentsSeparator,\n  rangeSeparator = ''\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    if (data === dateSegmentsSeparator) {\n      return {\n        elementState,\n        data: selection[0] === value.length ? data : ''\n      };\n    }\n    const newCharacters = data.replaceAll(new RegExp(`[^\\\\d${escapeRegExp(dateSegmentsSeparator)}${rangeSeparator}]`, 'g'), '');\n    if (!newCharacters) {\n      return {\n        elementState,\n        data: ''\n      };\n    }\n    const [from, rawTo] = selection;\n    let to = rawTo + data.length;\n    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);\n    const dateStrings = parseDateRangeString(newPossibleValue, dateModeTemplate, rangeSeparator);\n    let validatedValue = '';\n    const hasRangeSeparator = Boolean(rangeSeparator) && newPossibleValue.includes(rangeSeparator);\n    for (const dateString of dateStrings) {\n      const {\n        validatedDateString,\n        updatedSelection\n      } = validateDateString({\n        dateString,\n        dateModeTemplate,\n        dateSegmentsSeparator,\n        offset: validatedValue.length,\n        selection: [from, to]\n      });\n      if (dateString && !validatedDateString) {\n        return {\n          elementState,\n          data: ''\n        }; // prevent changes\n      }\n      to = updatedSelection[1];\n      validatedValue += hasRangeSeparator && !validatedValue ? validatedDateString + rangeSeparator : validatedDateString;\n    }\n    const newData = validatedValue.slice(from, to);\n    return {\n      elementState: {\n        selection,\n        value: validatedValue.slice(0, from) + newData.split(dateSegmentsSeparator).map(segment => '0'.repeat(segment.length)).join(dateSegmentsSeparator) + validatedValue.slice(to)\n      },\n      data: newData\n    };\n  };\n}\nfunction maskitoEventHandler(name, handler, eventListenerOptions) {\n  return (element, maskitoOptions) => {\n    const listener = () => handler(element, maskitoOptions);\n    element.addEventListener(name, listener, eventListenerOptions);\n    return () => element.removeEventListener(name, listener, eventListenerOptions);\n  };\n}\nfunction maskitoAddOnFocusPlugin(value) {\n  return maskitoEventHandler('focus', element => {\n    if (!element.value) {\n      maskitoUpdateElement(element, value);\n    }\n  });\n}\nfunction maskitoCaretGuard(guard) {\n  return element => {\n    const document = element.ownerDocument;\n    let isPointerDown = 0;\n    const onPointerDown = () => isPointerDown++;\n    const onPointerUp = () => {\n      isPointerDown = Math.max(--isPointerDown, 0);\n    };\n    const listener = () => {\n      var _a, _b;\n      if (!element.matches(':focus')) {\n        return;\n      }\n      if (isPointerDown) {\n        return document.addEventListener('mouseup', listener, {\n          once: true,\n          passive: true\n        });\n      }\n      const start = (_a = element.selectionStart) !== null && _a !== void 0 ? _a : 0;\n      const end = (_b = element.selectionEnd) !== null && _b !== void 0 ? _b : 0;\n      const [fromLimit, toLimit] = guard(element.value, [start, end]);\n      if (fromLimit > start || toLimit < end) {\n        element.setSelectionRange(clamp(start, fromLimit, toLimit), clamp(end, fromLimit, toLimit));\n      }\n    };\n    document.addEventListener('selectionchange', listener, {\n      passive: true\n    });\n    element.addEventListener('mousedown', onPointerDown, {\n      passive: true\n    });\n    document.addEventListener('mouseup', onPointerUp, {\n      passive: true\n    });\n    return () => {\n      document.removeEventListener('selectionchange', listener);\n      document.removeEventListener('mousedown', onPointerDown);\n      document.removeEventListener('mouseup', onPointerUp);\n    };\n  };\n}\nconst maskitoRejectEvent = element => {\n  const listener = () => {\n    const value = element.value;\n    element.addEventListener('beforeinput', event => {\n      if (event.defaultPrevented && value === element.value) {\n        element.dispatchEvent(new CustomEvent('maskitoReject', {\n          bubbles: true\n        }));\n      }\n    }, {\n      once: true\n    });\n  };\n  element.addEventListener('beforeinput', listener, true);\n  return () => element.removeEventListener('beforeinput', listener, true);\n};\nfunction maskitoRemoveOnBlurPlugin(value) {\n  return maskitoEventHandler('blur', element => {\n    if (element.value === value) {\n      maskitoUpdateElement(element, '');\n    }\n  });\n}\nfunction createMeridiemSteppingPlugin(meridiemStartIndex) {\n  if (meridiemStartIndex < 0) {\n    return () => {};\n  }\n  return element => {\n    const listener = event => {\n      const caretIndex = Number(element.selectionStart);\n      const value = element.value.toUpperCase();\n      if (event.key !== 'ArrowUp' && event.key !== 'ArrowDown' || caretIndex < meridiemStartIndex) {\n        return;\n      }\n      event.preventDefault();\n      // eslint-disable-next-line no-nested-ternary\n      const meridiemMainCharacter = value.includes('A') ? 'P' : value.includes('P') || event.key === 'ArrowUp' ? 'A' : 'P';\n      const newMeridiem = `${CHAR_NO_BREAK_SPACE}${meridiemMainCharacter}M`;\n      maskitoUpdateElement(element, {\n        value: value.length === meridiemStartIndex ? value + newMeridiem : value.replace(ANY_MERIDIEM_CHARACTER_RE, newMeridiem),\n        selection: [caretIndex, caretIndex]\n      });\n    };\n    element.addEventListener('keydown', listener);\n    return () => element.removeEventListener('keydown', listener);\n  };\n}\nconst noop = () => {};\nfunction createTimeSegmentsSteppingPlugin({\n  step,\n  fullMode,\n  timeSegmentMaxValues\n}) {\n  const segmentsIndexes = createTimeSegmentsIndexes(fullMode);\n  return step <= 0 ? noop : element => {\n    const listener = event => {\n      var _a;\n      if (event.key !== 'ArrowUp' && event.key !== 'ArrowDown') {\n        return;\n      }\n      event.preventDefault();\n      const selectionStart = (_a = element.selectionStart) !== null && _a !== void 0 ? _a : 0;\n      const activeSegment = getActiveSegment({\n        segmentsIndexes,\n        selectionStart\n      });\n      if (!activeSegment) {\n        return;\n      }\n      const updatedValue = updateSegmentValue({\n        selection: segmentsIndexes.get(activeSegment),\n        value: element.value,\n        toAdd: event.key === 'ArrowUp' ? step : -step,\n        max: timeSegmentMaxValues[activeSegment]\n      });\n      maskitoUpdateElement(element, {\n        value: updatedValue,\n        selection: [selectionStart, selectionStart]\n      });\n    };\n    element.addEventListener('keydown', listener);\n    return () => element.removeEventListener('keydown', listener);\n  };\n}\nfunction createTimeSegmentsIndexes(fullMode) {\n  return new Map([['hours', getSegmentRange(fullMode, 'HH')], ['milliseconds', getSegmentRange(fullMode, 'MSS')], ['minutes', getSegmentRange(fullMode, 'MM')], ['seconds', getSegmentRange(fullMode, 'SS')]]);\n}\nfunction getSegmentRange(mode, segment) {\n  const index = mode.indexOf(segment);\n  return index === -1 ? [-1, -1] : [index, index + segment.length];\n}\nfunction getActiveSegment({\n  segmentsIndexes,\n  selectionStart\n}) {\n  for (const [segmentName, segmentRange] of segmentsIndexes.entries()) {\n    const [from, to] = segmentRange;\n    if (from <= selectionStart && selectionStart <= to) {\n      return segmentName;\n    }\n  }\n  return null;\n}\nfunction updateSegmentValue({\n  selection,\n  value,\n  toAdd,\n  max\n}) {\n  const [from, to] = selection;\n  const segmentValue = Number(value.slice(from, to).padEnd(to - from, '0'));\n  const newSegmentValue = mod(segmentValue + toAdd, max + 1);\n  return value.slice(0, from) + String(newSegmentValue).padStart(to - from, '0') + value.slice(to, value.length);\n}\nfunction mod(value, max) {\n  if (value < 0) {\n    value += Math.floor(Math.abs(value) / max + 1) * max;\n  }\n  return value % max;\n}\nfunction maskitoWithPlaceholder(placeholder, focusedOnly = false) {\n  let lastClearValue = '';\n  let action = 'validation';\n  const removePlaceholder = value => {\n    for (let i = value.length - 1; i >= lastClearValue.length; i--) {\n      if (value[i] !== placeholder[i]) {\n        return value.slice(0, i + 1);\n      }\n    }\n    return value.slice(0, lastClearValue.length);\n  };\n  const plugins = [maskitoCaretGuard(value => [0, removePlaceholder(value).length])];\n  let focused = false;\n  if (focusedOnly) {\n    const focus = maskitoEventHandler('focus', element => {\n      focused = true;\n      maskitoUpdateElement(element, element.value + placeholder.slice(element.value.length));\n    }, {\n      capture: true\n    });\n    const blur = maskitoEventHandler('blur', element => {\n      focused = false;\n      maskitoUpdateElement(element, removePlaceholder(element.value));\n    }, {\n      capture: true\n    });\n    plugins.push(focus, blur);\n  }\n  return {\n    plugins,\n    removePlaceholder,\n    preprocessors: [({\n      elementState,\n      data\n    }, actionType) => {\n      action = actionType;\n      const {\n        value,\n        selection\n      } = elementState;\n      return {\n        elementState: {\n          selection,\n          value: removePlaceholder(value)\n        },\n        data\n      };\n    }],\n    postprocessors: [({\n      value,\n      selection\n    }, initialElementState) => {\n      lastClearValue = value;\n      const justPlaceholderRemoval = value + placeholder.slice(value.length, initialElementState.value.length) === initialElementState.value;\n      if (action === 'validation' && justPlaceholderRemoval) {\n        /**\n         * If `value` still equals to `initialElementState.value`,\n         * then it means that value is patched programmatically (from Maskito's plugin or externally).\n         * In this case, we don't want to mutate value and automatically add/remove placeholder.\n         * ___\n         * For example, developer wants to remove manually placeholder (+ do something else with value) on blur.\n         * Without this condition, placeholder will be unexpectedly added again.\n         */\n        return {\n          selection,\n          value: initialElementState.value\n        };\n      }\n      const newValue = focused || !focusedOnly ? value + placeholder.slice(value.length) : value;\n      if (newValue === initialElementState.value && action === 'deleteBackward') {\n        const [caretIndex] = initialElementState.selection;\n        return {\n          value: newValue,\n          selection: [caretIndex, caretIndex]\n        };\n      }\n      return {\n        value: newValue,\n        selection\n      };\n    }]\n  };\n}\nfunction createZeroPlaceholdersPreprocessor() {\n  return ({\n    elementState\n  }, actionType) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    if (!value || isLastChar(value, selection)) {\n      return {\n        elementState\n      };\n    }\n    const [from, to] = selection;\n    const zeroes = value.slice(from, to).replaceAll(/\\d/g, '0');\n    const newValue = value.slice(0, from) + zeroes + value.slice(to);\n    if (!zeroes.replaceAll(/\\D/g, '')) {\n      return {\n        elementState\n      };\n    }\n    if (actionType === 'validation' || actionType === 'insert' && from === to) {\n      return {\n        elementState: {\n          selection,\n          value: newValue\n        }\n      };\n    }\n    return {\n      elementState: {\n        selection: actionType === 'deleteBackward' || actionType === 'insert' ? [from, from] : [to, to],\n        value: newValue\n      }\n    };\n  };\n}\nfunction isLastChar(value, [_, to]) {\n  return to === value.length;\n}\nfunction maskitoDateOptionsGenerator({\n  mode,\n  separator = '.',\n  max,\n  min\n}) {\n  const dateModeTemplate = mode.split('/').join(separator);\n  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {\n    mask: Array.from(dateModeTemplate).map(char => separator.includes(char) ? char : /\\d/),\n    overwriteMode: 'replace',\n    preprocessors: [createFullWidthToHalfWidthPreprocessor(), createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({\n      dateModeTemplate,\n      dateSegmentsSeparator: separator\n    }), createValidDatePreprocessor({\n      dateModeTemplate,\n      dateSegmentsSeparator: separator\n    })],\n    postprocessors: [createDateSegmentsZeroPaddingPostprocessor({\n      dateModeTemplate,\n      dateSegmentSeparator: separator,\n      splitFn: value => ({\n        dateStrings: [value]\n      }),\n      uniteFn: ([dateString = '']) => dateString\n    }), createMinMaxDatePostprocessor({\n      min,\n      max,\n      dateModeTemplate,\n      dateSegmentSeparator: separator\n    })]\n  });\n}\nconst POSSIBLE_DATE_RANGE_SEPARATOR = [CHAR_HYPHEN, CHAR_EN_DASH, CHAR_EM_DASH, CHAR_MINUS, CHAR_JP_HYPHEN];\nfunction createMinMaxRangeLengthPostprocessor({\n  dateModeTemplate,\n  rangeSeparator,\n  minLength,\n  maxLength,\n  max = DEFAULT_MAX_DATE\n}) {\n  if (isEmpty(minLength) && isEmpty(maxLength)) {\n    return identity;\n  }\n  return ({\n    value,\n    selection\n  }) => {\n    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);\n    if (dateStrings.length !== 2 || dateStrings.some(date => !isDateStringComplete(date, dateModeTemplate))) {\n      return {\n        value,\n        selection\n      };\n    }\n    const [fromDate, toDate] = dateStrings.map(dateString => segmentsToDate(parseDateString(dateString, dateModeTemplate)));\n    if (!fromDate || !toDate) {\n      return {\n        value,\n        selection\n      };\n    }\n    const minDistantToDate = appendDate(fromDate, Object.assign(Object.assign({}, minLength), {\n      // 06.02.2023 - 07.02.2023 => {minLength: {day: 3}} => 06.02.2023 - 08.02.2023\n      // \"from\"-day is included in the range\n      day: (minLength === null || minLength === void 0 ? void 0 : minLength.day) && minLength.day - 1\n    }));\n    const maxDistantToDate = !isEmpty(maxLength) ? appendDate(fromDate, Object.assign(Object.assign({}, maxLength), {\n      day: (maxLength === null || maxLength === void 0 ? void 0 : maxLength.day) && maxLength.day - 1\n    })) : max;\n    const minLengthClampedToDate = clamp(toDate, minDistantToDate, max);\n    const minMaxLengthClampedToDate = minLengthClampedToDate > maxDistantToDate ? maxDistantToDate : minLengthClampedToDate;\n    return {\n      selection,\n      value: dateStrings[0] + rangeSeparator + toDateString(dateToSegments(minMaxLengthClampedToDate), {\n        dateMode: dateModeTemplate\n      })\n    };\n  };\n}\nfunction createSwapDatesPostprocessor({\n  dateModeTemplate,\n  rangeSeparator\n}) {\n  return ({\n    value,\n    selection\n  }) => {\n    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);\n    const isDateRangeComplete = dateStrings.length === 2 && dateStrings.every(date => isDateStringComplete(date, dateModeTemplate));\n    const [from, to] = selection;\n    const caretAtTheEnd = from >= value.length;\n    const allValueSelected = from === 0 && to >= value.length; // dropping text inside with a pointer\n    if (!(caretAtTheEnd || allValueSelected) || !isDateRangeComplete) {\n      return {\n        value,\n        selection\n      };\n    }\n    const [fromDate, toDate] = dateStrings.map(dateString => segmentsToDate(parseDateString(dateString, dateModeTemplate)));\n    return {\n      selection,\n      value: fromDate && toDate && fromDate > toDate ? dateStrings.reverse().join(rangeSeparator) : value\n    };\n  };\n}\nfunction maskitoDateRangeOptionsGenerator({\n  mode,\n  min,\n  max,\n  minLength,\n  maxLength,\n  dateSeparator = '.',\n  rangeSeparator = `${CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${CHAR_NO_BREAK_SPACE}`\n}) {\n  const dateModeTemplate = mode.split('/').join(dateSeparator);\n  const dateMask = Array.from(dateModeTemplate).map(char => dateSeparator.includes(char) ? char : /\\d/);\n  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {\n    mask: [...dateMask, ...Array.from(rangeSeparator), ...dateMask],\n    overwriteMode: 'replace',\n    preprocessors: [createFullWidthToHalfWidthPreprocessor(), createFirstDateEndSeparatorPreprocessor({\n      dateModeTemplate,\n      dateSegmentSeparator: dateSeparator,\n      firstDateEndSeparator: rangeSeparator,\n      pseudoFirstDateEndSeparators: POSSIBLE_DATE_RANGE_SEPARATOR\n    }), createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({\n      dateModeTemplate,\n      rangeSeparator,\n      dateSegmentsSeparator: dateSeparator\n    }), createValidDatePreprocessor({\n      dateModeTemplate,\n      rangeSeparator,\n      dateSegmentsSeparator: dateSeparator\n    })],\n    postprocessors: [createDateSegmentsZeroPaddingPostprocessor({\n      dateModeTemplate,\n      dateSegmentSeparator: dateSeparator,\n      splitFn: value => ({\n        dateStrings: parseDateRangeString(value, dateModeTemplate, rangeSeparator)\n      }),\n      uniteFn: (validatedDateStrings, initialValue) => validatedDateStrings.reduce((acc, dateString, dateIndex) => acc + dateString + (!dateIndex && initialValue.includes(rangeSeparator) ? rangeSeparator : ''), '')\n    }), createMinMaxDatePostprocessor({\n      min,\n      max,\n      dateModeTemplate,\n      rangeSeparator,\n      dateSegmentSeparator: dateSeparator\n    }), createMinMaxRangeLengthPostprocessor({\n      dateModeTemplate,\n      minLength,\n      maxLength,\n      max,\n      rangeSeparator\n    }), createSwapDatesPostprocessor({\n      dateModeTemplate,\n      rangeSeparator\n    })]\n  });\n}\nfunction isDateTimeStringComplete(dateTimeString, {\n  dateMode,\n  timeMode,\n  dateTimeSeparator = DATE_TIME_SEPARATOR\n}) {\n  var _a;\n  return dateTimeString.length >= dateMode.length + timeMode.length + dateTimeSeparator.length && ((_a = dateTimeString.split(dateTimeSeparator)[0]) !== null && _a !== void 0 ? _a : '').split(/\\D/).every(segment => !/^0+$/.exec(segment));\n}\nconst NON_DIGIT_PLACEHOLDER_RE = /[^dmy]/g;\nconst LEADING_NON_DIGIT_RE = /^\\D*/;\nfunction parseDateTimeString(dateTime, dateModeTemplate) {\n  const dateDigitsCount = dateModeTemplate.replaceAll(NON_DIGIT_PLACEHOLDER_RE, '').length;\n  const [date = ''] = new RegExp(`(\\\\d[^\\\\d]*){0,${dateDigitsCount - 1}}\\\\d?`).exec(dateTime) || [];\n  const [dateTimeSeparator = ''] = LEADING_NON_DIGIT_RE.exec(dateTime.slice(date.length)) || [];\n  return [date, dateTime.slice(date.length + dateTimeSeparator.length)];\n}\nfunction createMinMaxDateTimePostprocessor({\n  dateModeTemplate,\n  timeMode,\n  min = DEFAULT_MIN_DATE,\n  max = DEFAULT_MAX_DATE,\n  dateTimeSeparator\n}) {\n  return ({\n    value,\n    selection\n  }) => {\n    const [dateString, timeString] = parseDateTimeString(value, dateModeTemplate);\n    const parsedDate = parseDateString(dateString, dateModeTemplate);\n    const parsedTime = parseTimeString(timeString, timeMode);\n    if (!isDateTimeStringComplete(value, {\n      dateMode: dateModeTemplate,\n      timeMode,\n      dateTimeSeparator\n    })) {\n      const fixedDate = raiseSegmentValueToMin(parsedDate, dateModeTemplate);\n      const {\n        year,\n        month,\n        day\n      } = isDateStringComplete(dateString, dateModeTemplate) ? dateToSegments(clamp(segmentsToDate(fixedDate), min, max)) : fixedDate;\n      const fixedValue = toDateString(Object.assign({\n        year,\n        month,\n        day\n      }, parsedTime), {\n        dateMode: dateModeTemplate,\n        dateTimeSeparator,\n        timeMode\n      });\n      const tail = value.slice(fixedValue.length);\n      return {\n        selection,\n        value: fixedValue + tail\n      };\n    }\n    const date = segmentsToDate(parsedDate, parsedTime);\n    const clampedDate = clamp(date, min, max);\n    // trailing segment separators or meridiem characters\n    const [trailingNonDigitCharacters = ''] = value.match(/\\D+$/g) || [];\n    const validatedValue = toDateString(dateToSegments(clampedDate), {\n      dateMode: dateModeTemplate,\n      dateTimeSeparator,\n      timeMode\n    }) + trailingNonDigitCharacters;\n    return {\n      selection,\n      value: validatedValue\n    };\n  };\n}\nfunction createValidDateTimePreprocessor({\n  dateModeTemplate,\n  dateSegmentsSeparator,\n  dateTimeSeparator,\n  timeMode,\n  timeSegmentMaxValues\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    if (data === dateSegmentsSeparator) {\n      return {\n        elementState,\n        data: selection[0] === value.length ? data : ''\n      };\n    }\n    const newCharacters = data.replaceAll(/\\D/g, '');\n    if (!newCharacters) {\n      return {\n        elementState,\n        data\n      };\n    }\n    const [from, rawTo] = selection;\n    let to = rawTo + data.length;\n    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);\n    const [dateString, timeString] = parseDateTimeString(newPossibleValue, dateModeTemplate);\n    let validatedValue = '';\n    const hasDateTimeSeparator = newPossibleValue.includes(dateTimeSeparator);\n    const {\n      validatedDateString,\n      updatedSelection\n    } = validateDateString({\n      dateString,\n      dateSegmentsSeparator,\n      dateModeTemplate,\n      offset: 0,\n      selection: [from, to]\n    });\n    if (dateString && !validatedDateString) {\n      return {\n        elementState,\n        data: ''\n      }; // prevent changes\n    }\n    to = updatedSelection[1];\n    validatedValue += validatedDateString;\n    const updatedTimeState = enrichTimeSegmentsWithZeroes({\n      value: timeString,\n      selection: [from, to]\n    }, {\n      mode: timeMode,\n      timeSegmentMaxValues\n    });\n    to = updatedTimeState.selection[1];\n    validatedValue += hasDateTimeSeparator ? dateTimeSeparator + updatedTimeState.value : updatedTimeState.value;\n    const newData = validatedValue.slice(from, to);\n    return {\n      elementState: {\n        selection,\n        value: validatedValue.slice(0, from) + newData.split(dateSegmentsSeparator).map(segment => '0'.repeat(segment.length)).join(dateSegmentsSeparator) + validatedValue.slice(to)\n      },\n      data: newData\n    };\n  };\n}\nfunction maskitoDateTimeOptionsGenerator({\n  dateMode,\n  timeMode,\n  dateSeparator = '.',\n  min,\n  max,\n  dateTimeSeparator = DATE_TIME_SEPARATOR,\n  timeStep = 0\n}) {\n  const hasMeridiem = timeMode.includes('AA');\n  const dateModeTemplate = dateMode.split('/').join(dateSeparator);\n  const timeSegmentMaxValues = Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MAX_VALUES), hasMeridiem ? {\n    hours: 12\n  } : {});\n  const timeSegmentMinValues = Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MIN_VALUES), hasMeridiem ? {\n    hours: 1\n  } : {});\n  const fullMode = `${dateModeTemplate}${dateTimeSeparator}${timeMode}`;\n  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {\n    mask: [...Array.from(dateModeTemplate).map(char => dateSeparator.includes(char) ? char : /\\d/), ...dateTimeSeparator.split(''), ...createTimeMaskExpression(timeMode)],\n    overwriteMode: 'replace',\n    preprocessors: [createFullWidthToHalfWidthPreprocessor(), createColonConvertPreprocessor(), createFirstDateEndSeparatorPreprocessor({\n      dateModeTemplate,\n      dateSegmentSeparator: dateSeparator,\n      firstDateEndSeparator: dateTimeSeparator,\n      pseudoFirstDateEndSeparators: dateTimeSeparator.split('')\n    }), createZeroPlaceholdersPreprocessor(), createMeridiemPreprocessor(timeMode), normalizeDatePreprocessor({\n      dateModeTemplate,\n      dateSegmentsSeparator: dateSeparator,\n      dateTimeSeparator\n    }), createInvalidTimeSegmentInsertionPreprocessor({\n      timeMode,\n      timeSegmentMinValues,\n      timeSegmentMaxValues,\n      parseValue: x => {\n        const [dateString, timeString] = parseDateTimeString(x, dateModeTemplate);\n        return {\n          timeString,\n          restValue: dateString + dateTimeSeparator\n        };\n      }\n    }), createValidDateTimePreprocessor({\n      dateModeTemplate,\n      dateSegmentsSeparator: dateSeparator,\n      dateTimeSeparator,\n      timeMode,\n      timeSegmentMaxValues\n    })],\n    postprocessors: [createMeridiemPostprocessor(timeMode), createDateSegmentsZeroPaddingPostprocessor({\n      dateModeTemplate,\n      dateSegmentSeparator: dateSeparator,\n      splitFn: value => {\n        const [dateString, timeString] = parseDateTimeString(value, dateModeTemplate);\n        return {\n          dateStrings: [dateString],\n          restPart: timeString\n        };\n      },\n      uniteFn: ([validatedDateString], initialValue) => validatedDateString + (initialValue.includes(dateTimeSeparator) ? dateTimeSeparator : '')\n    }), createMinMaxDateTimePostprocessor({\n      min,\n      max,\n      dateModeTemplate,\n      timeMode,\n      dateTimeSeparator\n    })],\n    plugins: [createTimeSegmentsSteppingPlugin({\n      step: timeStep,\n      fullMode,\n      timeSegmentMaxValues: DEFAULT_TIME_SEGMENT_MAX_VALUES\n    }), createMeridiemSteppingPlugin(fullMode.indexOf('AA'))]\n  });\n}\n\n/**\n * It drops prefix and postfix from data\n * Needed for case, when prefix or postfix contain decimalSeparator, to ignore it in resulting number\n * @example User pastes '{prefix}123.45{postfix}' => 123.45\n */\nfunction createAffixesFilterPreprocessor({\n  prefix,\n  postfix\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      cleanValue: cleanData\n    } = extractAffixes(data, {\n      prefix,\n      postfix\n    });\n    return {\n      elementState,\n      data: cleanData\n    };\n  };\n}\nfunction generateMaskExpression({\n  decimalSeparator,\n  isNegativeAllowed,\n  precision,\n  thousandSeparator,\n  prefix,\n  postfix,\n  decimalPseudoSeparators = [],\n  pseudoMinuses = [],\n  minusSign\n}) {\n  const computedPrefix = computeAllOptionalCharsRegExp(prefix);\n  const digit = String.raw`\\d`;\n  const optionalMinus = isNegativeAllowed ? `[${minusSign}${pseudoMinuses.map(x => `\\\\${x}`).join('')}]?` : '';\n  const integerPart = thousandSeparator ? `[${digit}${escapeRegExp(thousandSeparator).replaceAll(/\\s/g, String.raw`\\s`)}]*` : `[${digit}]*`;\n  const precisionPart = Number.isFinite(precision) ? precision : '';\n  const decimalPart = precision > 0 ? `([${escapeRegExp(decimalSeparator)}${decimalPseudoSeparators.map(escapeRegExp).join('')}]${digit}{0,${precisionPart}})?` : '';\n  const computedPostfix = computeAllOptionalCharsRegExp(postfix);\n  return new RegExp(`^${computedPrefix}${optionalMinus}${integerPart}${decimalPart}${computedPostfix}$`);\n}\nfunction computeAllOptionalCharsRegExp(str) {\n  return str ? `${str.split('').map(char => `${escapeRegExp(char)}?`).join('')}` : '';\n}\nfunction maskitoParseNumber(maskedNumber, decimalSeparator = '.') {\n  const hasNegativeSign = !!new RegExp(`^\\\\D*[${CHAR_MINUS}\\\\${CHAR_HYPHEN}${CHAR_EN_DASH}${CHAR_EM_DASH}${CHAR_JP_HYPHEN}]`).exec(maskedNumber);\n  const escapedDecimalSeparator = escapeRegExp(decimalSeparator);\n  const unmaskedNumber = maskedNumber\n  // drop all decimal separators not followed by a digit\n  .replaceAll(new RegExp(`${escapedDecimalSeparator}(?!\\\\d)`, 'g'), '')\n  // drop all non-digit characters except decimal separator\n  .replaceAll(new RegExp(`[^\\\\d${escapedDecimalSeparator}]`, 'g'), '').replace(decimalSeparator, '.');\n  if (unmaskedNumber) {\n    const sign = hasNegativeSign ? CHAR_HYPHEN : '';\n    return Number(`${sign}${unmaskedNumber}`);\n  }\n  return NaN;\n}\n\n/**\n * Convert number to string with replacing exponent part on decimals\n *\n * @param value the number\n * @return string representation of a number\n */\nfunction stringifyNumberWithoutExp(value) {\n  var _a;\n  const valueAsString = String(value);\n  const [numberPart = '', expPart] = valueAsString.split('e-');\n  let valueWithoutExp = valueAsString;\n  if (expPart) {\n    const [, fractionalPart] = numberPart.split('.');\n    const decimalDigits = Number(expPart) + ((_a = fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) !== null && _a !== void 0 ? _a : 0);\n    valueWithoutExp = value.toFixed(decimalDigits);\n  }\n  return valueWithoutExp;\n}\nfunction toNumberParts(value, {\n  decimalSeparator,\n  minusSign\n}) {\n  const [integerWithMinus = '', decimalPart = ''] = value.split(decimalSeparator);\n  const escapedMinus = escapeRegExp(minusSign);\n  const [, minus = '', integerPart = ''] = new RegExp(`^(?:[^\\\\d${escapedMinus}])?(${escapedMinus})?(.*)`).exec(integerWithMinus) || [];\n  return {\n    minus,\n    integerPart,\n    decimalPart\n  };\n}\nfunction validateDecimalPseudoSeparators({\n  decimalSeparator,\n  thousandSeparator,\n  decimalPseudoSeparators = DEFAULT_DECIMAL_PSEUDO_SEPARATORS\n}) {\n  return decimalPseudoSeparators.filter(char => char !== thousandSeparator && char !== decimalSeparator);\n}\n\n/**\n * If `decimalZeroPadding` is `true`, it pads decimal part with zeroes\n * (until number of digits after decimalSeparator is equal to the `precision`).\n * @example 1,42 => (`precision` is equal to 4) => 1,4200.\n */\nfunction createDecimalZeroPaddingPostprocessor({\n  decimalSeparator,\n  precision,\n  decimalZeroPadding,\n  prefix,\n  postfix\n}) {\n  if (precision <= 0 || !decimalZeroPadding) {\n    return identity;\n  }\n  return ({\n    value,\n    selection\n  }) => {\n    const {\n      cleanValue,\n      extractedPrefix,\n      extractedPostfix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    if (Number.isNaN(maskitoParseNumber(cleanValue, decimalSeparator))) {\n      return {\n        value,\n        selection\n      };\n    }\n    const [integerPart, decimalPart = ''] = cleanValue.split(decimalSeparator);\n    return {\n      value: extractedPrefix + integerPart + decimalSeparator + decimalPart.padEnd(precision, '0') + extractedPostfix,\n      selection\n    };\n  };\n}\n\n/**\n * Make textfield empty if there is no integer part and all decimal digits are zeroes.\n * @example 0|,00 => Backspace => Empty.\n * @example -0|,00 => Backspace => -.\n * @example ,42| => Backspace x2 => ,|00 => Backspace => Empty\n */\nfunction emptyPostprocessor({\n  prefix,\n  postfix,\n  decimalSeparator,\n  minusSign\n}) {\n  return ({\n    value,\n    selection\n  }) => {\n    const [caretIndex] = selection;\n    const {\n      cleanValue,\n      extractedPrefix,\n      extractedPostfix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    const {\n      minus,\n      integerPart,\n      decimalPart\n    } = toNumberParts(cleanValue, {\n      decimalSeparator,\n      minusSign\n    });\n    const aloneDecimalSeparator = !integerPart && !decimalPart && cleanValue.includes(decimalSeparator);\n    if (!integerPart && !Number(decimalPart) && caretIndex === (minus + extractedPrefix).length || aloneDecimalSeparator) {\n      return {\n        selection,\n        value: extractedPrefix + minus + extractedPostfix\n      };\n    }\n    return {\n      value,\n      selection\n    };\n  };\n}\n\n/**\n * This preprocessor works only once at initialization phase (when `new Maskito(...)` is executed).\n * This preprocessor helps to avoid conflicts during transition from one mask to another (for the same input).\n * For example, the developer changes postfix (or other mask's props) during run-time.\n * ```\n * let maskitoOptions = maskitoNumberOptionsGenerator({postfix: ' year'});\n * // [3 seconds later]\n * maskitoOptions = maskitoNumberOptionsGenerator({postfix: ' years'});\n * ```\n */\nfunction createInitializationOnlyPreprocessor({\n  decimalSeparator,\n  decimalPseudoSeparators,\n  pseudoMinuses,\n  prefix,\n  postfix,\n  minusSign\n}) {\n  let isInitializationPhase = true;\n  const cleanNumberMask = generateMaskExpression({\n    decimalSeparator,\n    decimalPseudoSeparators,\n    pseudoMinuses,\n    prefix: '',\n    postfix: '',\n    thousandSeparator: '',\n    precision: Infinity,\n    isNegativeAllowed: true,\n    minusSign\n  });\n  return ({\n    elementState,\n    data\n  }) => {\n    if (!isInitializationPhase) {\n      return {\n        elementState,\n        data\n      };\n    }\n    isInitializationPhase = false;\n    const {\n      value,\n      selection\n    } = elementState;\n    const [from, to] = selection;\n    const {\n      extractedPrefix,\n      cleanValue,\n      extractedPostfix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    const cleanState = maskitoTransform({\n      selection: [Math.max(from - extractedPrefix.length, 0), clamp(to - extractedPrefix.length, 0, cleanValue.length)],\n      value: cleanValue\n    }, {\n      mask: cleanNumberMask\n    });\n    const [cleanFrom, cleanTo] = cleanState.selection;\n    return {\n      elementState: {\n        selection: [cleanFrom + extractedPrefix.length, cleanTo + extractedPrefix.length],\n        value: extractedPrefix + cleanState.value + extractedPostfix\n      },\n      data\n    };\n  };\n}\n\n/**\n * It removes repeated leading zeroes for integer part.\n * @example 0,|00005 => Backspace => |5\n * @example -0,|00005 => Backspace => -|5\n * @example User types \"000000\" => 0|\n * @example 0| => User types \"5\" => 5|\n */\nfunction createLeadingZeroesValidationPostprocessor({\n  decimalSeparator,\n  thousandSeparator,\n  prefix,\n  postfix\n}) {\n  const trimLeadingZeroes = value => {\n    const escapedThousandSeparator = escapeRegExp(thousandSeparator);\n    return value.replace(\n    // all leading zeroes followed by another zero\n    new RegExp(`^(\\\\D+)?[0${escapedThousandSeparator}]+(?=0)`), '$1').replace(\n    // zero followed by not-zero digit\n    new RegExp(`^(\\\\D+)?[0${escapedThousandSeparator}]+(?=[1-9])`), '$1');\n  };\n  const countTrimmedZeroesBefore = (value, index) => {\n    const valueBefore = value.slice(0, index);\n    const followedByZero = value.slice(index).startsWith('0');\n    return valueBefore.length - trimLeadingZeroes(valueBefore).length + (followedByZero ? 1 : 0);\n  };\n  return ({\n    value,\n    selection\n  }) => {\n    const [from, to] = selection;\n    const {\n      cleanValue,\n      extractedPrefix,\n      extractedPostfix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    const hasDecimalSeparator = cleanValue.includes(decimalSeparator);\n    const [integerPart = '', decimalPart = ''] = cleanValue.split(decimalSeparator);\n    const zeroTrimmedIntegerPart = trimLeadingZeroes(integerPart);\n    if (integerPart === zeroTrimmedIntegerPart) {\n      return {\n        value,\n        selection\n      };\n    }\n    const newFrom = from - countTrimmedZeroesBefore(value, from);\n    const newTo = to - countTrimmedZeroesBefore(value, to);\n    return {\n      value: extractedPrefix + zeroTrimmedIntegerPart + (hasDecimalSeparator ? decimalSeparator : '') + decimalPart + extractedPostfix,\n      selection: [Math.max(newFrom, 0), Math.max(newTo, 0)]\n    };\n  };\n}\n\n/**\n * This postprocessor is connected with {@link createMinMaxPlugin}:\n * both validate `min`/`max` bounds of entered value (but at the different point of time).\n */\nfunction createMinMaxPostprocessor({\n  min,\n  max,\n  decimalSeparator,\n  minusSign\n}) {\n  return ({\n    value,\n    selection\n  }) => {\n    const parsedNumber = maskitoParseNumber(value, decimalSeparator);\n    const limitedValue =\n    /**\n     * We cannot limit lower bound if user enters positive number.\n     * The same for upper bound and negative number.\n     * ___\n     * @example (min = 5)\n     * Empty input => Without this condition user cannot type 42 (the first digit will be rejected)\n     * ___\n     * @example (max = -10)\n     * Value is -10 => Without this condition user cannot delete 0 to enter another digit\n     */\n    parsedNumber > 0 ? Math.min(parsedNumber, max) : Math.max(parsedNumber, min);\n    if (parsedNumber && limitedValue !== parsedNumber) {\n      const newValue = `${limitedValue}`.replace('.', decimalSeparator).replace(CHAR_HYPHEN, minusSign);\n      return {\n        value: newValue,\n        selection: [newValue.length, newValue.length]\n      };\n    }\n    return {\n      value,\n      selection\n    };\n  };\n}\n\n/**\n * Manage caret-navigation when user \"deletes\" non-removable digits or separators\n * @example 1,|42 => Backspace => 1|,42 (only if `decimalZeroPadding` is `true`)\n * @example 1|,42 => Delete => 1,|42 (only if `decimalZeroPadding` is `true`)\n * @example 0,|00 => Delete => 0,0|0 (only if `decimalZeroPadding` is `true`)\n * @example 1 |000 => Backspace => 1| 000 (always)\n */\nfunction createNonRemovableCharsDeletionPreprocessor({\n  decimalSeparator,\n  thousandSeparator,\n  decimalZeroPadding\n}) {\n  return ({\n    elementState,\n    data\n  }, actionType) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const [from, to] = selection;\n    const selectedCharacters = value.slice(from, to);\n    const nonRemovableSeparators = decimalZeroPadding ? [decimalSeparator, thousandSeparator] : [thousandSeparator];\n    const areNonRemovableZeroesSelected = decimalZeroPadding && from > value.indexOf(decimalSeparator) && Boolean(selectedCharacters.match(/^0+$/gi));\n    if (actionType !== 'deleteBackward' && actionType !== 'deleteForward' || !nonRemovableSeparators.includes(selectedCharacters) && !areNonRemovableZeroesSelected) {\n      return {\n        elementState,\n        data\n      };\n    }\n    return {\n      elementState: {\n        value,\n        selection: actionType === 'deleteForward' ? [to, to] : [from, from]\n      },\n      data\n    };\n  };\n}\n\n/**\n * It pads integer part with zero if user types decimal separator (for empty input).\n * @example Empty input => User types \",\" (decimal separator) => 0,|\n */\nfunction createNotEmptyIntegerPartPreprocessor({\n  decimalSeparator,\n  precision,\n  prefix,\n  postfix\n}) {\n  const startWithDecimalSepRegExp = new RegExp(`^\\\\D*${escapeRegExp(decimalSeparator)}`);\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const {\n      cleanValue,\n      extractedPrefix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    const [from, to] = selection;\n    const cleanFrom = clamp(from - extractedPrefix.length, 0, cleanValue.length);\n    const cleanTo = clamp(to - extractedPrefix.length, 0, cleanValue.length);\n    if (precision <= 0 || cleanValue.slice(0, cleanFrom).includes(decimalSeparator) || cleanValue.slice(cleanTo).includes(decimalSeparator) || !data.match(startWithDecimalSepRegExp)) {\n      return {\n        elementState,\n        data\n      };\n    }\n    const digitsBeforeCursor = /\\d+/.exec(cleanValue.slice(0, cleanFrom));\n    return {\n      elementState,\n      data: digitsBeforeCursor ? data : `0${data}`\n    };\n  };\n}\n\n/**\n * It replaces pseudo characters with valid one.\n * @example User types '.' (but separator is equal to comma) => dot is replaced with comma.\n * @example User types hyphen / en-dash / em-dash => it is replaced with minus.\n */\nfunction createPseudoCharactersPreprocessor({\n  validCharacter,\n  pseudoCharacters,\n  prefix,\n  postfix\n}) {\n  const pseudoCharactersRegExp = new RegExp(`[${pseudoCharacters.join('')}]`, 'gi');\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const {\n      cleanValue,\n      extractedPostfix,\n      extractedPrefix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    return {\n      elementState: {\n        selection,\n        value: extractedPrefix + cleanValue.replace(pseudoCharactersRegExp, validCharacter) + extractedPostfix\n      },\n      data: data.replace(pseudoCharactersRegExp, validCharacter)\n    };\n  };\n}\n\n/**\n * It rejects new typed decimal separator if it already exists in text field.\n * Behaviour is similar to native <input type=\"number\"> (Chrome).\n * @example 1|23,45 => Press comma (decimal separator) => 1|23,45 (do nothing).\n */\nfunction createRepeatedDecimalSeparatorPreprocessor({\n  decimalSeparator,\n  prefix,\n  postfix\n}) {\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const [from, to] = selection;\n    const {\n      cleanValue\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    return {\n      elementState,\n      data: !cleanValue.includes(decimalSeparator) || value.slice(from, to + 1).includes(decimalSeparator) ? data : data.replaceAll(new RegExp(escapeRegExp(decimalSeparator), 'gi'), '')\n    };\n  };\n}\n\n/**\n * It adds symbol for separating thousands.\n * @example 1000000 => (thousandSeparator is equal to space) => 1 000 000.\n */\nfunction createThousandSeparatorPostprocessor({\n  thousandSeparator,\n  decimalSeparator,\n  prefix,\n  postfix,\n  minusSign\n}) {\n  if (!thousandSeparator) {\n    return identity;\n  }\n  const isAllSpaces = (...chars) => chars.every(x => /\\s/.test(x));\n  return ({\n    value,\n    selection\n  }) => {\n    const [initialFrom, initialTo] = selection;\n    let [from, to] = selection;\n    const {\n      cleanValue,\n      extractedPostfix,\n      extractedPrefix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    const {\n      minus,\n      integerPart,\n      decimalPart\n    } = toNumberParts(cleanValue, {\n      decimalSeparator,\n      minusSign\n    });\n    const deletedChars = cleanValue.length - (minus + integerPart + (cleanValue.includes(decimalSeparator) ? decimalSeparator + decimalPart : '')).length;\n    if (deletedChars > 0 && initialFrom && initialFrom <= deletedChars) {\n      from -= deletedChars;\n    }\n    if (deletedChars > 0 && initialTo && initialTo <= deletedChars) {\n      to -= deletedChars;\n    }\n    const processedIntegerPart = Array.from(integerPart).reduceRight((formattedValuePart, char, i) => {\n      const isLeadingThousandSeparator = !i && char === thousandSeparator;\n      const isPositionForSeparator = !isLeadingThousandSeparator && Boolean(formattedValuePart.length) && (formattedValuePart.length + 1) % 4 === 0;\n      const isSeparator = char === thousandSeparator || isAllSpaces(char, thousandSeparator);\n      if (isPositionForSeparator && isSeparator) {\n        return thousandSeparator + formattedValuePart;\n      }\n      if (!isPositionForSeparator && isSeparator) {\n        if (i && i <= initialFrom) {\n          from--;\n        }\n        if (i && i <= initialTo) {\n          to--;\n        }\n        return formattedValuePart;\n      }\n      if (!isPositionForSeparator) {\n        return char + formattedValuePart;\n      }\n      if (i < initialFrom) {\n        from++;\n      }\n      if (i < initialTo) {\n        to++;\n      }\n      return char + thousandSeparator + formattedValuePart;\n    }, '');\n    return {\n      value: extractedPrefix + minus + processedIntegerPart + (cleanValue.includes(decimalSeparator) ? decimalSeparator : '') + decimalPart + extractedPostfix,\n      selection: [from, to]\n    };\n  };\n}\n\n/**\n * It drops decimal part if precision is zero.\n * @example User pastes '123.45' (but precision is zero) => 123\n */\nfunction createZeroPrecisionPreprocessor({\n  precision,\n  decimalSeparator,\n  prefix,\n  postfix\n}) {\n  if (precision > 0) {\n    return identity;\n  }\n  const decimalPartRegExp = new RegExp(`${escapeRegExp(decimalSeparator)}.*$`, 'g');\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    const {\n      cleanValue,\n      extractedPrefix,\n      extractedPostfix\n    } = extractAffixes(value, {\n      prefix,\n      postfix\n    });\n    const [from, to] = selection;\n    const newValue = extractedPrefix + cleanValue.replace(decimalPartRegExp, '') + extractedPostfix;\n    return {\n      elementState: {\n        selection: [Math.min(from, newValue.length), Math.min(to, newValue.length)],\n        value: newValue\n      },\n      data: data.replace(decimalPartRegExp, '')\n    };\n  };\n}\nconst DUMMY_SELECTION = [0, 0];\n/**\n * It removes repeated leading zeroes for integer part on blur-event.\n * @example 000000 => blur => 0\n * @example 00005 => blur => 5\n */\nfunction createLeadingZeroesValidationPlugin({\n  decimalSeparator,\n  thousandSeparator,\n  prefix,\n  postfix\n}) {\n  const dropRepeatedLeadingZeroes = createLeadingZeroesValidationPostprocessor({\n    decimalSeparator,\n    thousandSeparator,\n    prefix,\n    postfix\n  });\n  return maskitoEventHandler('blur', element => {\n    const newValue = dropRepeatedLeadingZeroes({\n      value: element.value,\n      selection: DUMMY_SELECTION\n    }, {\n      value: '',\n      selection: DUMMY_SELECTION\n    }).value;\n    maskitoUpdateElement(element, newValue);\n  }, {\n    capture: true\n  });\n}\n\n/**\n * This plugin is connected with {@link createMinMaxPostprocessor}:\n * both validate `min`/`max` bounds of entered value (but at the different point of time).\n */\nfunction createMinMaxPlugin({\n  min,\n  max,\n  decimalSeparator\n}) {\n  return maskitoEventHandler('blur', (element, options) => {\n    const parsedNumber = maskitoParseNumber(element.value, decimalSeparator);\n    const clampedNumber = clamp(parsedNumber, min, max);\n    if (!Number.isNaN(parsedNumber) && parsedNumber !== clampedNumber) {\n      maskitoUpdateElement(element, maskitoTransform(stringifyNumberWithoutExp(clampedNumber), options));\n    }\n  }, {\n    capture: true\n  });\n}\n\n/**\n * It pads EMPTY integer part with zero if decimal parts exists.\n * It works on blur event only!\n * @example 1|,23 => Backspace => Blur => 0,23\n */\nfunction createNotEmptyIntegerPlugin({\n  decimalSeparator,\n  prefix,\n  postfix\n}) {\n  return maskitoEventHandler('blur', element => {\n    const {\n      cleanValue,\n      extractedPostfix,\n      extractedPrefix\n    } = extractAffixes(element.value, {\n      prefix,\n      postfix\n    });\n    const newValue = extractedPrefix + cleanValue.replace(new RegExp(`^(\\\\D+)?${escapeRegExp(decimalSeparator)}`), `$10${decimalSeparator}`) + extractedPostfix;\n    maskitoUpdateElement(element, newValue);\n  }, {\n    capture: true\n  });\n}\nfunction maskitoNumberOptionsGenerator({\n  max = Number.MAX_SAFE_INTEGER,\n  min = Number.MIN_SAFE_INTEGER,\n  precision = 0,\n  thousandSeparator = CHAR_NO_BREAK_SPACE,\n  decimalSeparator = '.',\n  decimalPseudoSeparators,\n  decimalZeroPadding = false,\n  prefix: unsafePrefix = '',\n  postfix = '',\n  minusSign = CHAR_MINUS\n} = {}) {\n  const pseudoMinuses = [CHAR_HYPHEN, CHAR_EN_DASH, CHAR_EM_DASH, CHAR_JP_HYPHEN, CHAR_MINUS].filter(char => char !== thousandSeparator && char !== decimalSeparator && char !== minusSign);\n  const validatedDecimalPseudoSeparators = validateDecimalPseudoSeparators({\n    decimalSeparator,\n    thousandSeparator,\n    decimalPseudoSeparators\n  });\n  const prefix = unsafePrefix.endsWith(decimalSeparator) && precision > 0 ? `${unsafePrefix}${CHAR_ZERO_WIDTH_SPACE}` : unsafePrefix;\n  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {\n    mask: generateMaskExpression({\n      decimalSeparator,\n      precision,\n      thousandSeparator,\n      prefix,\n      postfix,\n      isNegativeAllowed: min < 0,\n      minusSign\n    }),\n    preprocessors: [createFullWidthToHalfWidthPreprocessor(), createInitializationOnlyPreprocessor({\n      decimalSeparator,\n      decimalPseudoSeparators: validatedDecimalPseudoSeparators,\n      pseudoMinuses,\n      prefix,\n      postfix,\n      minusSign\n    }), createAffixesFilterPreprocessor({\n      prefix,\n      postfix\n    }), createPseudoCharactersPreprocessor({\n      validCharacter: minusSign,\n      pseudoCharacters: pseudoMinuses,\n      prefix,\n      postfix\n    }), createPseudoCharactersPreprocessor({\n      validCharacter: decimalSeparator,\n      pseudoCharacters: validatedDecimalPseudoSeparators,\n      prefix,\n      postfix\n    }), createNotEmptyIntegerPartPreprocessor({\n      decimalSeparator,\n      precision,\n      prefix,\n      postfix\n    }), createNonRemovableCharsDeletionPreprocessor({\n      decimalSeparator,\n      decimalZeroPadding,\n      thousandSeparator\n    }), createZeroPrecisionPreprocessor({\n      precision,\n      decimalSeparator,\n      prefix,\n      postfix\n    }), createRepeatedDecimalSeparatorPreprocessor({\n      decimalSeparator,\n      prefix,\n      postfix\n    })],\n    postprocessors: [createMinMaxPostprocessor({\n      decimalSeparator,\n      min,\n      max,\n      minusSign\n    }), maskitoPrefixPostprocessorGenerator(prefix), maskitoPostfixPostprocessorGenerator(postfix), createThousandSeparatorPostprocessor({\n      decimalSeparator,\n      thousandSeparator,\n      prefix,\n      postfix,\n      minusSign\n    }), createDecimalZeroPaddingPostprocessor({\n      decimalSeparator,\n      decimalZeroPadding,\n      precision,\n      prefix,\n      postfix\n    }), emptyPostprocessor({\n      prefix,\n      postfix,\n      decimalSeparator,\n      minusSign\n    })],\n    plugins: [createLeadingZeroesValidationPlugin({\n      decimalSeparator,\n      thousandSeparator,\n      prefix,\n      postfix\n    }), createNotEmptyIntegerPlugin({\n      decimalSeparator,\n      prefix,\n      postfix\n    }), createMinMaxPlugin({\n      min,\n      max,\n      decimalSeparator\n    })],\n    overwriteMode: decimalZeroPadding ? ({\n      value,\n      selection: [from]\n    }) => from <= value.indexOf(decimalSeparator) ? 'shift' : 'replace' : 'shift'\n  });\n}\nfunction maskitoTimeOptionsGenerator({\n  mode,\n  timeSegmentMaxValues = {},\n  timeSegmentMinValues = {},\n  step = 0\n}) {\n  const hasMeridiem = mode.includes('AA');\n  const enrichedTimeSegmentMaxValues = Object.assign(Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MAX_VALUES), hasMeridiem ? {\n    hours: 12\n  } : {}), timeSegmentMaxValues);\n  const enrichedTimeSegmentMinValues = Object.assign(Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MIN_VALUES), hasMeridiem ? {\n    hours: 1\n  } : {}), timeSegmentMinValues);\n  return {\n    mask: createTimeMaskExpression(mode),\n    preprocessors: [createFullWidthToHalfWidthPreprocessor(), createColonConvertPreprocessor(), createZeroPlaceholdersPreprocessor(), createMeridiemPreprocessor(mode), createInvalidTimeSegmentInsertionPreprocessor({\n      timeMode: mode,\n      timeSegmentMinValues: enrichedTimeSegmentMinValues,\n      timeSegmentMaxValues: enrichedTimeSegmentMaxValues\n    })],\n    postprocessors: [createMeridiemPostprocessor(mode), elementState => enrichTimeSegmentsWithZeroes(elementState, {\n      mode,\n      timeSegmentMaxValues: enrichedTimeSegmentMaxValues\n    })],\n    plugins: [createTimeSegmentsSteppingPlugin({\n      fullMode: mode,\n      step,\n      timeSegmentMaxValues: enrichedTimeSegmentMaxValues\n    }), createMeridiemSteppingPlugin(mode.indexOf('AA'))],\n    overwriteMode: 'replace'\n  };\n}\n\n/**\n * Converts a formatted time string to milliseconds based on the given `options.mode`.\n *\n * @param maskedTime a formatted time string by {@link maskitoTimeOptionsGenerator} or {@link maskitoStringifyTime}\n * @param params\n */\nfunction maskitoParseTime(maskedTime, {\n  mode,\n  timeSegmentMaxValues = {}\n}) {\n  var _a, _b, _c, _d;\n  const maxValues = Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MAX_VALUES), timeSegmentMaxValues);\n  const msInSecond = maxValues.milliseconds + 1;\n  const msInMinute = (maxValues.seconds + 1) * msInSecond;\n  const msInHour = (maxValues.minutes + 1) * msInMinute;\n  const parsedTime = padEndTimeSegments(parseTimeString(maskedTime, mode));\n  return Number((_a = parsedTime.hours) !== null && _a !== void 0 ? _a : '') * msInHour + Number((_b = parsedTime.minutes) !== null && _b !== void 0 ? _b : '') * msInMinute + Number((_c = parsedTime.seconds) !== null && _c !== void 0 ? _c : '') * msInSecond + Number((_d = parsedTime.milliseconds) !== null && _d !== void 0 ? _d : '');\n}\n\n/**\n * Converts milliseconds to a formatted time string based on the given `options.mode`.\n *\n * @param milliseconds unsigned integer milliseconds\n * @param params\n */\nfunction maskitoStringifyTime(milliseconds, {\n  mode,\n  timeSegmentMaxValues = {}\n}) {\n  const maxValues = Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MAX_VALUES), timeSegmentMaxValues);\n  const msInSecond = maxValues.milliseconds + 1;\n  const msInMinute = (maxValues.seconds + 1) * msInSecond;\n  const msInHour = (maxValues.minutes + 1) * msInMinute;\n  const hours = Math.trunc(milliseconds / msInHour);\n  milliseconds -= hours * msInHour;\n  const minutes = Math.trunc(milliseconds / msInMinute);\n  milliseconds -= minutes * msInMinute;\n  const seconds = Math.trunc(milliseconds / msInSecond);\n  milliseconds -= seconds * msInSecond;\n  const result = padStartTimeSegments({\n    hours,\n    minutes,\n    seconds,\n    milliseconds\n  });\n  return mode.replaceAll(/H+/g, result.hours).replaceAll('MSS', result.milliseconds).replaceAll(/M+/g, result.minutes).replaceAll(/S+/g, result.seconds);\n}\nexport { maskitoAddOnFocusPlugin, maskitoCaretGuard, maskitoDateOptionsGenerator, maskitoDateRangeOptionsGenerator, maskitoDateTimeOptionsGenerator, maskitoEventHandler, maskitoNumberOptionsGenerator, maskitoParseNumber, maskitoParseTime, maskitoPostfixPostprocessorGenerator, maskitoPrefixPostprocessorGenerator, maskitoRejectEvent, maskitoRemoveOnBlurPlugin, maskitoStringifyTime, maskitoTimeOptionsGenerator, maskitoWithPlaceholder };"],
  "mappings": "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",
  "names": ["value", "obj", "result", "_wrapNativeSuper", "Class", "_construct", "Parent", "args", "_setPrototypeOf", "o", "p", "_getPrototypeOf", "ParseError", "_typeof", "obj", "_classCallCheck", "_defineProperties", "_createClass", "Metadata", "_classCallCheck", "_createClass", "getCountries", "country", "NumberingPlan", "_classCallCheck", "_createClass", "formats", "Format", "Type", "typeOf", "_typeof", "country", "getExtensionDigitsPattern", "result", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "result", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "a", "b", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "country", "country", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "formatNumber", "formatExtension", "ownKeys", "_objectSpread", "_defineProperty", "_classCallCheck", "_defineProperties", "_createClass", "PhoneNumber", "country", "getType", "formatNumber", "isCountryCode", "country", "country", "country", "country", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "country", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "extractFormattedPhoneNumber", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "country", "extractFormattedPhoneNumber", "text", "result", "ownKeys", "_objectSpread", "_defineProperty", "ownKeys", "_objectSpread", "_defineProperty", "_unsupportedIterableToArray", "_arrayLikeToArray", "parsePhoneNumberWithError", "ownKeys", "_objectSpread", "_defineProperty", "parsePhoneNumber", "parsePhoneNumber", "ownKeys", "_objectSpread", "_defineProperty", "result", "_defineProperties", "_createClass", "_classCallCheck", "Node", "LRUCache", "limit", "_classCallCheck", "_defineProperties", "_createClass", "RegExpCache", "parsePhoneNumber", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "_classCallCheck", "_defineProperties", "_createClass", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "PhoneNumberMatcher", "_classCallCheck", "_createClass", "result", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "_createForOfIteratorHelperLoose", "_match", "parsePhoneNumber", "_classCallCheck", "_defineProperties", "_createClass", "AsYouTypeState", "country", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "repeat", "result", "_createForOfIteratorHelperLoose", "formatNationalNumber", "_classCallCheck", "_defineProperties", "_createClass", "PatternParser", "parse", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "_classCallCheck", "_defineProperties", "_createClass", "PatternMatcher", "result", "result", "_createForOfIteratorHelperLoose", "_createForOfIteratorHelperLoose", "_unsupportedIterableToArray", "_arrayLikeToArray", "_classCallCheck", "_defineProperties", "_createClass", "repeat", "AsYouTypeFormatter", "format", "_loop", "result", "_slicedToArray", "_arrayWithHoles", "_iterableToArrayLimit", "_unsupportedIterableToArray", "_nonIterableRest", "_arrayLikeToArray", "_classCallCheck", "_defineProperties", "_createClass", "AsYouTypeParser", "extractCountryCallingCode", "country", "_slicedToArray", "_slicedToArray", "_arrayWithHoles", "_iterableToArrayLimit", "_unsupportedIterableToArray", "_nonIterableRest", "_arrayLikeToArray", "_classCallCheck", "_defineProperties", "_createClass", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "AsYouType", "country", "getCountryCallingCode", "prefix", "_c0", "_c1", "_c2", "_c0", "newValue"]
}
