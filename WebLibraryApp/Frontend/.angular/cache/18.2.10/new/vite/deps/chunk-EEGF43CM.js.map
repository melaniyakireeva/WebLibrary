{
  "version": 3,
  "sources": ["../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-constants.mjs", "../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-date-time.mjs", "../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-observables.mjs"],
  "sourcesContent": ["import { QueryList } from '@angular/core';\nconst rect = {\n  bottom: 0,\n  height: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n  width: 0,\n  x: 0,\n  y: 0\n};\n/**\n * For type safety when using @ContentChildren and @ViewChildren\n *\n * NOTE: Be careful subscribing to 'changes'\n */\nconst EMPTY_QUERY = new QueryList();\nconst EMPTY_ARRAY = [];\nconst EMPTY_FUNCTION = () => {};\nconst EMPTY_CLIENT_RECT = {\n  ...rect,\n  toJSON: () => rect\n};\n\n/**\n * Handler that always returns `false`.\n */\n// eslint-disable-next-line no-restricted-syntax\nconst TUI_FALSE_HANDLER = () => false;\n/**\n * Handler that always returns `true`.\n */\n// eslint-disable-next-line no-restricted-syntax\nconst TUI_TRUE_HANDLER = () => true;\nfunction bothEmpty(item1, item2) {\n  return Array.isArray(item1) && Array.isArray(item2) && !item1.length && !item2.length;\n}\n/**\n * Default handler for matching stringified version of an item and a search query\n * @param item arbitrary element to match with a string\n * @param search search query\n * @param stringify handler to turn item into a string\n */\nconst TUI_DEFAULT_MATCHER = (item, search, stringify = String) => stringify(item).toLowerCase().includes(search.toLowerCase());\n/**\n * Default handler for strict matching stringified version of an item and a search query\n * @param item arbitrary element to match with a string\n * @param search search query\n * @param stringify handler to turn item into a string\n */\nconst TUI_STRICT_MATCHER = (item, search, stringify = String) => stringify(item).toLowerCase() === search.toLowerCase();\n/**\n * Default handler to match equality of two elements\n * ATTENTION: considers two empty arrays equal\n *\n * @param item1 first element\n * @param item2 second element\n */\nconst TUI_DEFAULT_IDENTITY_MATCHER = (item1, item2) => item1 === item2 || bothEmpty(item1, item2);\nconst TUI_DIGIT_REGEXP = /\\d/;\nconst TUI_NON_DIGIT_REGEXP = /\\D/;\nconst TUI_NON_DIGITS_REGEXP = /\\D+/g;\nconst svgNodeFilter = {\n  acceptNode(node) {\n    return 'ownerSVGElement' in node ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n  }\n};\n\n/**\n * {@link https://unicode-table.com/en/00A0/ Non-breaking space}.\n */\nconst CHAR_NO_BREAK_SPACE = '\\u00A0';\n/**\n * {@link https://unicode-table.com/en/2013/ EN dash}\n * is used to indicate a range of numbers or a span of time.\n * @example 2006–2022\n * ___\n * Don't confuse with {@link CHAR_EM_DASH} or {@link CHAR_HYPHEN}!\n */\nconst CHAR_EN_DASH = '\\u2013';\n/**\n * {@link https://unicode-table.com/en/2014/ EM dash}\n * is used to mark a break in a sentence.\n * @example Taiga UI — powerful set of open source components for Angular\n * ___\n * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_HYPHEN}!\n */\nconst CHAR_EM_DASH = '\\u2014';\n/**\n * {@link https://unicode-table.com/en/00AB/ Left-Pointing Double Angle Quotation Mark}\n */\nconst CHAR_LAQUO = '\\u00AB';\n/**\n * {@link https://unicode-table.com/en/00BB/ Right-Pointing Double Angle Quotation Mark}\n */\nconst CHAR_RAQUO = '\\u00BB';\n/**\n * {@link https://unicode-table.com/en/002D/ Hyphen (minus sign)}\n * is used to combine words.\n * @example well-behaved\n * ___\n * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_EM_DASH}!\n */\nconst CHAR_HYPHEN = '\\u002D';\n/**\n * {@link https://unicode-table.com/en/2212/ Minus}\n * is used as math operator symbol or before negative digits.\n * ---\n * Can be used as `&minus;`. Don't confuse with {@link CHAR_HYPHEN}\n */\nconst CHAR_MINUS = '\\u2212';\n/**\n * {@link https://unicode-table.com/en/002B/ Plus}\n */\nconst CHAR_PLUS = '\\u002B';\n/**\n * {@link https://unicode-table.com/en/2022/ Bullet}.\n */\nconst CHAR_BULLET = '\\u2022';\n/**\n * {@link https://unicode-table.com/en/2026/ Suspension points}.\n */\nconst CHAR_ELLIPSIS = '\\u2026';\n/**\n * {@link https://unicode-table.com/en/00A4/ Suspension points}.\n */\nconst CHAR_CURRENCY_SIGN = '\\u00A4';\n/**\n * {@link https://unicode-table.com/en/200b/ Suspension points}.\n */\nconst CHAR_ZERO_WIDTH_SPACE = '\\u200B';\n\n/**\n * @description:\n * AUTOGENERATED\n *\n * Array of icons used in taiga-ui components\n */\nconst TUI_USED_ICONS = ['@tui.mir', '@tui.visa', '@tui.electron', '@tui.mastercard', '@tui.maestro', '@tui.amex', '@tui.diners-club', '@tui.discover', '@tui.humo', '@tui.jcb', '@tui.ru-pay', '@tui.union-pay', '@tui.uzcard', '@tui.verve', '@tui.external-link', '@tui.search', '@tui.sun', '@tui.moon', '@tui.code', '@tui.menu', '@tui.copy', '@tui.check', '@tui.link', '@tui.languages', '@tui.eye-off', '@tui.eye', '@tui.grip-vertical', '@tui.chevron-up', '@tui.chevron-down', '@tui.chevrons-up-down', '@tui.info', '@tui.circle-check', '@tui.circle-x', '@tui.circle-alert', '@tui.circle-help', '@tui.x', '@tui.chevron-right', '@tui.ellipsis', '@tui.chevron-left', '@tui.minus', '@tui.file', '@tui.trash', '@tui.phone', '@tui.heart', '@tui.heart-filled', '@tui.star', '@tui.calendar', '@tui.rotate-ccw-square', '@tui.arrow-left', '@tui.arrow-right', '@tui.plus', '@tui.minimize', '@tui.filter', '@tui.layout-grid', '@tui.move-up-right', '@tui.move-right', '@tui.move-down-right', '@tui.move-down', '@tui.move-down-left', '@tui.move-left', '@tui.move-up-left', '@tui.move-up', '@tui.clock'];\nconst TUI_VERSION = '4.12.0';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CHAR_BULLET, CHAR_CURRENCY_SIGN, CHAR_ELLIPSIS, CHAR_EM_DASH, CHAR_EN_DASH, CHAR_HYPHEN, CHAR_LAQUO, CHAR_MINUS, CHAR_NO_BREAK_SPACE, CHAR_PLUS, CHAR_RAQUO, CHAR_ZERO_WIDTH_SPACE, EMPTY_ARRAY, EMPTY_CLIENT_RECT, EMPTY_FUNCTION, EMPTY_QUERY, TUI_DEFAULT_IDENTITY_MATCHER, TUI_DEFAULT_MATCHER, TUI_DIGIT_REGEXP, TUI_FALSE_HANDLER, TUI_NON_DIGITS_REGEXP, TUI_NON_DIGIT_REGEXP, TUI_STRICT_MATCHER, TUI_TRUE_HANDLER, TUI_USED_ICONS, TUI_VERSION, svgNodeFilter };\n", "import { CHAR_NO_BREAK_SPACE, CHAR_EN_DASH } from '@taiga-ui/cdk/constants';\nimport { tuiInRange, tuiNormalizeToIntNumber } from '@taiga-ui/cdk/utils/math';\nfunction tuiDateClamp(date, min, max) {\n  if (max && max < date) {\n    return max;\n  }\n  if (min && min > date) {\n    return min;\n  }\n  return date;\n}\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_NORMAL_YEAR = 365;\nconst DAYS_IN_LEAP_YEAR = 366;\nconst MONTHS_IN_YEAR = 12;\nconst MIN_DAY = 1;\nconst MIN_MONTH = 0;\nconst MAX_MONTH = 11;\nconst MIN_YEAR = 0;\nconst MAX_YEAR = 9999;\nconst RANGE_SEPARATOR_CHAR = `${CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${CHAR_NO_BREAK_SPACE}`;\nconst MILLISECONDS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\nconst MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * MINUTES_IN_HOUR;\nconst MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * @internal 'dd.mm.yyyy'.length\n * Used in:\n * - {@link TuiInputDateComponent}\n * - {@link TuiInputDateRangeComponent}\n * - {@link TuiInputDateTimeComponent}\n */\nconst DATE_FILLER_LENGTH = 10;\n/**\n * @internal\n * Used in {@link TuiInputDateRangeComponent}\n */\nconst DATE_RANGE_FILLER_LENGTH = 2 * DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length;\nconst TuiDayOfWeek = {\n  Sunday: 0,\n  Monday: 1,\n  Tuesday: 2,\n  Wednesday: 3,\n  Thursday: 4,\n  Friday: 5,\n  Saturday: 6\n};\nconst TuiMonthNumber = {\n  January: 0,\n  February: 1,\n  March: 2,\n  April: 3,\n  May: 4,\n  June: 5,\n  July: 6,\n  August: 7,\n  September: 8,\n  October: 9,\n  November: 10,\n  December: 11\n};\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Immutable year object\n * @nosideeffects\n */\nclass TuiYear {\n  constructor(year) {\n    this.year = year;\n    ngDevMode && console.assert(TuiYear.isValidYear(year));\n  }\n  /**\n   * Checks year for validity\n   */\n  static isValidYear(year) {\n    return Number.isInteger(year) && tuiInRange(year, MIN_YEAR, MAX_YEAR + 1);\n  }\n  /**\n   * Check if passed year is a leap year\n   */\n  static isLeapYear(year) {\n    ngDevMode && console.assert(TuiYear.isValidYear(year));\n    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n  }\n  /**\n   * Returns amount of leap years from year 0 to the passed one\n   */\n  static getAbsoluteLeapYears(year) {\n    ngDevMode && console.assert(TuiYear.isValidYear(year));\n    return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));\n  }\n  static lengthBetween(from, to) {\n    return to.year - from.year;\n  }\n  /**\n   * Normalizes year by clamping it between min and max years\n   */\n  static normalizeYearPart(year) {\n    return tuiNormalizeToIntNumber(year, MIN_YEAR, MAX_YEAR);\n  }\n  get formattedYear() {\n    return String(this.year).padStart(4, '0');\n  }\n  get isLeapYear() {\n    return TuiYear.isLeapYear(this.year);\n  }\n  /**\n   * Returns amount of leap years from year 0 to current\n   */\n  get absoluteLeapYears() {\n    return TuiYear.getAbsoluteLeapYears(this.year);\n  }\n  /**\n   * Passed year is after current\n   */\n  yearBefore({\n    year\n  }) {\n    return this.year < year;\n  }\n  /**\n   * Passed year is the same or after current\n   */\n  yearSameOrBefore({\n    year\n  }) {\n    return this.year <= year;\n  }\n  /**\n   * Passed year is the same as current\n   */\n  yearSame({\n    year\n  }) {\n    return this.year === year;\n  }\n  /**\n   * Passed year is either the same of before the current\n   */\n  yearSameOrAfter({\n    year\n  }) {\n    return this.year >= year;\n  }\n  /**\n   * Passed year is before current\n   */\n  yearAfter({\n    year\n  }) {\n    return this.year > year;\n  }\n  /**\n   * Immutably offsets year\n   */\n  append({\n    year = 0\n  }) {\n    ngDevMode && console.assert(Number.isInteger(year));\n    const resultYear = this.year + year;\n    ngDevMode && console.assert(TuiYear.isValidYear(resultYear));\n    return new TuiYear(resultYear);\n  }\n  toString() {\n    return this.formattedYear;\n  }\n  valueOf() {\n    return this.year;\n  }\n  /**\n   * Returns the primitive value of the given Date object.\n   * Depending on the argument, the method can return either a string or a number.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n   */\n  [Symbol.toPrimitive](hint) {\n    return Date.prototype[Symbol.toPrimitive].call(this, hint);\n  }\n  toJSON() {\n    return this.formattedYear;\n  }\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Immutable object consisting of year and month\n */\nclass TuiMonth extends TuiYear {\n  /**\n   * @param year\n   * @param month (starting with 0)\n   */\n  constructor(year, month) {\n    super(year);\n    this.month = month;\n    ngDevMode && console.assert(TuiMonth.isValidMonth(year, month));\n  }\n  /**\n   * Tests month and year for validity\n   */\n  static isValidMonth(year, month) {\n    return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);\n  }\n  /**\n   * Returns number of days in a month\n   */\n  static getMonthDaysCount(month, isLeapYear) {\n    ngDevMode && console.assert(TuiMonth.isValidMonthPart(month));\n    switch (month) {\n      case TuiMonthNumber.April:\n      case TuiMonthNumber.June:\n      case TuiMonthNumber.November:\n      case TuiMonthNumber.September:\n        return 30;\n      case TuiMonthNumber.February:\n        return isLeapYear ? 29 : 28;\n      default:\n        return 31;\n    }\n  }\n  /**\n   * Returns current month and year based on local time zone\n   * @nosideeffects\n   */\n  static currentLocal() {\n    const nativeDate = new Date();\n    return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());\n  }\n  /**\n   * Returns current month and year based on UTC\n   */\n  static currentUtc() {\n    const nativeDate = new Date();\n    return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());\n  }\n  static lengthBetween(from, to) {\n    const absoluteFrom = from.month + from.year * 12;\n    const absoluteTo = to.month + to.year * 12;\n    return absoluteTo - absoluteFrom;\n  }\n  /**\n   * Normalizes number by clamping it between min and max month\n   */\n  static normalizeMonthPart(month) {\n    return tuiNormalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);\n  }\n  /**\n   * Tests month for validity\n   */\n  static isValidMonthPart(month) {\n    return Number.isInteger(month) && tuiInRange(month, MIN_MONTH, MAX_MONTH + 1);\n  }\n  get formattedMonthPart() {\n    return String(this.month + 1).padStart(2, '0');\n  }\n  /**\n   * Returns days in a month\n   */\n  get daysCount() {\n    return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);\n  }\n  /**\n   * Passed month and year are after current\n   */\n  monthBefore(another) {\n    return this.yearBefore(another) || this.yearSame(another) && this.month < another.month;\n  }\n  /**\n   * Passed month and year are after or the same as current\n   */\n  monthSameOrBefore(another) {\n    return this.yearBefore(another) || this.yearSame(another) && this.month <= another.month;\n  }\n  /**\n   * Passed month and year are the same as current\n   */\n  monthSame(another) {\n    return this.yearSame(another) && this.month === another.month;\n  }\n  /**\n   * Passed month and year are either before or equal to current\n   */\n  monthSameOrAfter(another) {\n    return this.yearAfter(another) || this.yearSame(another) && this.month >= another.month;\n  }\n  /**\n   * Passed month and year are before current\n   */\n  monthAfter(another) {\n    return this.yearAfter(another) || this.yearSame(another) && this.month > another.month;\n  }\n  /**\n   * Immutably alters current month and year by passed offset\n   *\n   * @param offset\n   * @return new month and year object as a result of offsetting current\n   */\n  append({\n    year = 0,\n    month = 0\n  }) {\n    const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n    return new TuiMonth(Math.floor(totalMonths / MONTHS_IN_YEAR), totalMonths % MONTHS_IN_YEAR);\n  }\n  toString() {\n    return `${this.formattedMonthPart}.${this.formattedYear}`;\n  }\n  valueOf() {\n    return this.toLocalNativeDate().valueOf();\n  }\n  toJSON() {\n    return `${super.toJSON()}-${this.formattedMonthPart}`;\n  }\n  /**\n   * Returns native {@link Date} based on local time zone\n   */\n  toLocalNativeDate() {\n    return new Date(this.year, this.month);\n  }\n  /**\n   * Returns native {@link Date} based on UTC\n   */\n  toUtcNativeDate() {\n    return new Date(Date.UTC(this.year, this.month));\n  }\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Immutable date object, consisting of day, month and year\n */\nclass TuiDay extends TuiMonth {\n  constructor(year, month, day) {\n    super(year, month);\n    this.day = day;\n    ngDevMode && console.assert(TuiDay.isValidDay(year, month, day));\n  }\n  /**\n   * Creates {@link TuiDay} from native {@link Date} based on local time zone\n   */\n  static fromLocalNativeDate(date) {\n    return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  /**\n   * Creates {@link TuiDay} from native {@link Date} using UTC\n   */\n  static fromUtcNativeDate(date) {\n    return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  }\n  /**\n   * Check validity of year, month and day\n   *\n   * @param year\n   * @param month\n   * @param day\n   * @return boolean validity\n   */\n  static isValidDay(year, month, day) {\n    return TuiMonth.isValidMonth(year, month) && Number.isInteger(day) && tuiInRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1);\n  }\n  /**\n   * Current day based on local time zone\n   */\n  static currentLocal() {\n    const nativeDate = new Date();\n    const year = nativeDate.getFullYear();\n    const month = nativeDate.getMonth();\n    const day = nativeDate.getDate();\n    return new TuiDay(year, month, day);\n  }\n  /**\n   * Returns current day based on UTC\n   */\n  static currentUtc() {\n    const nativeDate = new Date();\n    const year = nativeDate.getUTCFullYear();\n    const month = nativeDate.getUTCMonth();\n    const day = nativeDate.getUTCDate();\n    return new TuiDay(year, month, day);\n  }\n  /**\n   * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.\n   *\n   * @param year any year value, including invalid\n   * @param month any month value, including invalid (months start with 0)\n   * @param day any day value, including invalid\n   * @return normalized date\n   */\n  static normalizeOf(year, month, day) {\n    const normalizedYear = TuiYear.normalizeYearPart(year);\n    const normalizedMonth = TuiMonth.normalizeMonthPart(month);\n    const normalizedDay = TuiDay.normalizeDayPart(day, normalizedMonth, normalizedYear);\n    return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);\n  }\n  static lengthBetween(from, to) {\n    return Math.round((to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) / (1000 * 60 * 60 * 24));\n  }\n  static parseRawDateString(date, dateMode = 'DMY') {\n    ngDevMode && console.assert(date.length === DATE_FILLER_LENGTH, '[parseRawDateString]: wrong date string length');\n    switch (dateMode) {\n      case 'MDY':\n        return {\n          day: parseInt(date.slice(3, 5), 10),\n          month: parseInt(date.slice(0, 2), 10) - 1,\n          year: parseInt(date.slice(6, 10), 10)\n        };\n      case 'YMD':\n        return {\n          day: parseInt(date.slice(8, 10), 10),\n          month: parseInt(date.slice(5, 7), 10) - 1,\n          year: parseInt(date.slice(0, 4), 10)\n        };\n      case 'DMY':\n      default:\n        return {\n          day: parseInt(date.slice(0, 2), 10),\n          month: parseInt(date.slice(3, 5), 10) - 1,\n          year: parseInt(date.slice(6, 10), 10)\n        };\n    }\n  }\n  // TODO: Move month and year related code corresponding classes\n  /**\n   * Parsing a string with date with normalization\n   *\n   * @param rawDate date string\n   * @param dateMode date format of the date string (DMY | MDY | YMD)\n   * @return normalized date\n   */\n  static normalizeParse(rawDate, dateMode = 'DMY') {\n    const {\n      day,\n      month,\n      year\n    } = this.parseRawDateString(rawDate, dateMode);\n    return TuiDay.normalizeOf(year, month, day);\n  }\n  /**\n   * Parsing a date stringified in a toJSON format\n   * @param yearMonthDayString date string in format of YYYY-MM-DD\n   * @return date\n   * @throws exceptions if any part of the date is invalid\n   */\n  static jsonParse(yearMonthDayString) {\n    const {\n      day,\n      month,\n      year\n    } = this.parseRawDateString(yearMonthDayString, 'YMD');\n    if (!TuiMonth.isValidMonth(year, month) || !Number.isInteger(day) || !tuiInRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1)) {\n      throw new TuiInvalidDayException(year, month, day);\n    }\n    return new TuiDay(year, month, day);\n  }\n  static normalizeDayPart(day, month, year) {\n    ngDevMode && console.assert(TuiMonth.isValidMonth(year, month));\n    const monthDaysCount = TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year));\n    return tuiNormalizeToIntNumber(day, 1, monthDaysCount);\n  }\n  get formattedDayPart() {\n    return String(this.day).padStart(2, '0');\n  }\n  get isWeekend() {\n    const dayOfWeek = this.dayOfWeek(false);\n    return dayOfWeek === TuiDayOfWeek.Saturday || dayOfWeek === TuiDayOfWeek.Sunday;\n  }\n  /**\n   * Returns day of week\n   *\n   * @param startFromMonday whether week starts from Monday and not from Sunday\n   * @return day of week (from 0 to 6)\n   */\n  dayOfWeek(startFromMonday = true) {\n    const dayOfWeek = startFromMonday ? this.toLocalNativeDate().getDay() - 1 : this.toLocalNativeDate().getDay();\n    return dayOfWeek < 0 ? 6 : dayOfWeek;\n  }\n  /**\n   * Passed date is after current\n   */\n  dayBefore(another) {\n    return this.monthBefore(another) || this.monthSame(another) && this.day < another.day;\n  }\n  /**\n   * Passed date is after or equals to current\n   */\n  daySameOrBefore(another) {\n    return this.monthBefore(another) || this.monthSame(another) && this.day <= another.day;\n  }\n  /**\n   * Passed date is the same as current\n   */\n  daySame(another) {\n    return this.monthSame(another) && this.day === another.day;\n  }\n  /**\n   * Passed date is either before or the same as current\n   */\n  daySameOrAfter(another) {\n    return this.monthAfter(another) || this.monthSame(another) && this.day >= another.day;\n  }\n  /**\n   * Passed date is before current\n   */\n  dayAfter(another) {\n    return this.monthAfter(another) || this.monthSame(another) && this.day > another.day;\n  }\n  /**\n   * Clamping date between two limits\n   *\n   * @param min\n   * @param max\n   * @return clamped date\n   */\n  dayLimit(min, max) {\n    if (min !== null && this.dayBefore(min)) {\n      return min;\n    }\n    if (max !== null && this.dayAfter(max)) {\n      return max;\n    }\n    return this;\n  }\n  /**\n   * Immutably alters current day by passed offset\n   *\n   * If resulting month has more days than original one, date is rounded to the maximum day\n   * in the resulting month. Offset of days will be calculated based on the resulted year and month\n   * to not interfere with parent classes methods\n   *\n   * @param offset\n   * @return new date object as a result of offsetting current\n   */\n  append({\n    year = 0,\n    month = 0,\n    day = 0\n  }) {\n    const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n    let years = Math.floor(totalMonths / MONTHS_IN_YEAR);\n    let months = totalMonths % MONTHS_IN_YEAR;\n    let days = Math.min(this.day, TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) + day;\n    while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {\n      days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n      if (months === TuiMonthNumber.December) {\n        years++;\n        months = TuiMonthNumber.January;\n      } else {\n        months++;\n      }\n    }\n    while (days < MIN_DAY) {\n      if (months === TuiMonthNumber.January) {\n        years--;\n        months = TuiMonthNumber.December;\n      } else {\n        months--;\n      }\n      days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n    }\n    return new TuiDay(years, months, days);\n  }\n  /**\n   * Returns formatted whole date\n   */\n  getFormattedDay(dateFormat, separator) {\n    ngDevMode && console.assert(separator.length === 1, 'Separator should consist of only 1 symbol');\n    const dd = this.formattedDayPart;\n    const mm = this.formattedMonthPart;\n    const yyyy = this.formattedYear;\n    switch (dateFormat) {\n      case 'MDY':\n        return `${mm}${separator}${dd}${separator}${yyyy}`;\n      case 'YMD':\n        return `${yyyy}${separator}${mm}${separator}${dd}`;\n      case 'DMY':\n      default:\n        return `${dd}${separator}${mm}${separator}${yyyy}`;\n    }\n  }\n  toString(dateFormat = 'DMY', separator = '.') {\n    return this.getFormattedDay(dateFormat, separator);\n  }\n  toJSON() {\n    return `${super.toJSON()}-${this.formattedDayPart}`;\n  }\n  /**\n   * Returns native {@link Date} based on local time zone\n   */\n  toLocalNativeDate() {\n    return new Date(this.year, this.month, this.day);\n  }\n  /**\n   * Returns native {@link Date} based on UTC\n   */\n  toUtcNativeDate() {\n    return new Date(Date.UTC(this.year, this.month, this.day));\n  }\n}\nclass TuiInvalidDayException extends Error {\n  constructor(year, month, day) {\n    super(ngDevMode ? `Invalid day: ${year}-${month}-${day}` : '');\n  }\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * An immutable range of two {@link TuiMonth} objects\n */\nclass TuiMonthRange {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n    ngDevMode && console.assert(from.monthSameOrBefore(to));\n  }\n  static sort(month1, month2) {\n    return month1.monthSameOrBefore(month2) ? new TuiMonthRange(month1, month2) : new TuiMonthRange(month2, month1);\n  }\n  get isSingleMonth() {\n    return this.from.monthSame(this.to);\n  }\n  monthSame(another) {\n    return this.from.monthSame(another.from) && this.to.monthSame(another.to);\n  }\n  toString() {\n    return `${this.from}${RANGE_SEPARATOR_CHAR}${this.to}`;\n  }\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * An immutable range of two {@link TuiDay} objects\n */\nclass TuiDayRange extends TuiMonthRange {\n  constructor(from, to) {\n    super(from, to);\n    this.from = from;\n    this.to = to;\n    ngDevMode && console.assert(from.daySameOrBefore(to));\n  }\n  /**\n   * Creates range from two days after sorting them\n   *\n   * @param day1\n   * @param day2\n   * @return new range with sorted days\n   */\n  static sort(day1, day2) {\n    return day1.daySameOrBefore(day2) ? new TuiDayRange(day1, day2) : new TuiDayRange(day2, day1);\n  }\n  /**\n   * Parse and correct a day range in string format\n   *\n   * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy\n   * @param dateMode {@link TuiDateMode}\n   * @return normalized day range object\n   */\n  static normalizeParse(rangeString, dateMode = 'DMY') {\n    const leftDay = TuiDay.normalizeParse(rangeString.slice(0, DATE_FILLER_LENGTH), dateMode);\n    if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {\n      return new TuiDayRange(leftDay, leftDay);\n    }\n    return TuiDayRange.sort(leftDay, TuiDay.normalizeParse(rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), dateMode));\n  }\n  get isSingleDay() {\n    return this.from.daySame(this.to);\n  }\n  /**\n   * Tests ranges for identity\n   *\n   * @param another second range to test against current\n   * @return `true` if days are identical\n   */\n  daySame(another) {\n    return this.from.daySame(another.from) && this.to.daySame(another.to);\n  }\n  /**\n   * Locks range between two days included, or limits from one side if the other is null\n   *\n   * @param min\n   * @param max\n   * @return range — clamped range\n   */\n  dayLimit(min, max) {\n    return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));\n  }\n  /**\n   * Human readable format.\n   */\n  getFormattedDayRange(dateFormat, dateSeparator) {\n    const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n    const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n    return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n  }\n  toString(dateFormat = 'DMY', dateSeparator = '.') {\n    return this.getFormattedDayRange(dateFormat, dateSeparator);\n  }\n}\nconst TUI_FIRST_DAY = new TuiDay(MIN_YEAR, MIN_MONTH, MIN_DAY);\nconst TUI_LAST_DAY = new TuiDay(MAX_YEAR, MAX_MONTH, 31);\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\n/**\n * Immutable time object with hours, minutes, seconds and ms\n */\nclass TuiTime {\n  constructor(hours, minutes, seconds = 0, ms = 0) {\n    this.hours = hours;\n    this.minutes = minutes;\n    this.seconds = seconds;\n    this.ms = ms;\n    ngDevMode && console.assert(\n    // Currently `TuiTime` could have hours more than 23\n    // in order to not break current behaviour of `isValidTime` the logic is duplicated\n    Number.isInteger(hours) && tuiInRange(hours, 0, Infinity) && Number.isInteger(minutes) && tuiInRange(minutes, 0, MINUTES_IN_HOUR) && Number.isInteger(seconds) && tuiInRange(seconds, 0, SECONDS_IN_MINUTE) && Number.isInteger(ms) && tuiInRange(ms, 0, 1000), 'Time must be real, but got:', hours, minutes, seconds, ms);\n  }\n  /**\n   * Checks if time is valid\n   */\n  static isValidTime(hours, minutes, seconds = 0, ms = 0) {\n    return Number.isInteger(hours) && tuiInRange(hours, 0, HOURS_IN_DAY) && Number.isInteger(minutes) && tuiInRange(minutes, 0, MINUTES_IN_HOUR) && Number.isInteger(seconds) && tuiInRange(seconds, 0, SECONDS_IN_MINUTE) && Number.isInteger(ms) && tuiInRange(ms, 0, 1000);\n  }\n  /**\n   * Current UTC time.\n   */\n  static current() {\n    return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);\n  }\n  /**\n   * Current time in local timezone\n   */\n  static currentLocal() {\n    const date = new Date();\n    return TuiTime.fromAbsoluteMilliseconds((Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) % MILLISECONDS_IN_DAY);\n  }\n  /**\n   * Calculates TuiTime from milliseconds\n   */\n  static fromAbsoluteMilliseconds(milliseconds) {\n    ngDevMode && console.assert(Number.isInteger(milliseconds));\n    ngDevMode && console.assert(tuiInRange(milliseconds, 0, MILLISECONDS_IN_DAY), `Milliseconds must be below ${MILLISECONDS_IN_DAY} (milliseconds in a day).`);\n    const hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);\n    const minutes = Math.floor(milliseconds % MILLISECONDS_IN_HOUR / MILLISECONDS_IN_MINUTE);\n    const seconds = Math.floor(milliseconds % MILLISECONDS_IN_HOUR % MILLISECONDS_IN_MINUTE / 1000) || 0;\n    const ms = Math.floor(milliseconds % MILLISECONDS_IN_HOUR % MILLISECONDS_IN_MINUTE % 1000) || 0;\n    return new TuiTime(hours, minutes, seconds, ms);\n  }\n  /**\n   * Parses string into TuiTime object\n   */\n  static fromString(time) {\n    const hours = Number(time.slice(0, 2));\n    const minutes = Number(time.slice(3, 5)) || 0;\n    const seconds = Number(time.slice(6, 8)) || 0;\n    const ms = Number(time.slice(9, 12)) || 0;\n    return new TuiTime(hours, minutes, seconds, ms);\n  }\n  /**\n   * Converts Date object into TuiTime\n   * @param date\n   */\n  static fromLocalNativeDate(date) {\n    return new TuiTime(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n  }\n  /**\n   * Shifts time by hours and minutes\n   */\n  shift({\n    hours = 0,\n    minutes = 0,\n    seconds = 0,\n    ms = 0\n  }) {\n    const newMs = (1000 + this.ms + ms % 1000) % 1000;\n    const secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);\n    const secondsToAdd = secondsInMs + seconds;\n    const newSeconds = (60 + this.seconds + secondsToAdd % 60) % 60;\n    const minutesInSeconds = secondsToAdd < 0 ? Math.ceil(secondsToAdd / 60) : Math.floor(secondsToAdd / 60);\n    const minutesToAdd = minutesInSeconds + minutes;\n    const newMinutes = (60 + this.minutes + minutesToAdd % 60) % 60;\n    const hoursInMinutes = minutesToAdd < 0 ? Math.ceil(minutesToAdd / 60) : Math.floor(minutesToAdd / 60);\n    const hoursToAdd = hoursInMinutes + hours;\n    const newHours = (24 + this.hours + hoursToAdd % 24) % 24;\n    return new TuiTime(newHours, newMinutes, newSeconds, newMs);\n  }\n  /**\n   * Converts TuiTime to string\n   */\n  toString(mode) {\n    const needAddMs = mode === 'HH:MM:SS.MSS' || !mode && this.ms > 0;\n    const needAddSeconds = needAddMs || mode === 'HH:MM:SS' || !mode && this.seconds > 0;\n    const hhMm = `${this.formatTime(this.hours)}:${this.formatTime(this.minutes)}`;\n    const ss = needAddSeconds ? `:${this.formatTime(this.seconds)}` : '';\n    const mss = needAddMs ? `.${this.formatTime(this.ms, 3)}` : '';\n    return `${hhMm}${ss}${mss}`;\n  }\n  valueOf() {\n    return this.toAbsoluteMilliseconds();\n  }\n  /**\n   * Returns the primitive value of the given Date object.\n   * Depending on the argument, the method can return either a string or a number.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n   */\n  [Symbol.toPrimitive](hint) {\n    return Date.prototype[Symbol.toPrimitive].call(this, hint);\n  }\n  /**\n   * Converts TuiTime to milliseconds\n   */\n  toAbsoluteMilliseconds() {\n    return this.hours * MILLISECONDS_IN_HOUR + this.minutes * MILLISECONDS_IN_MINUTE + this.seconds * 1000 + this.ms;\n  }\n  formatTime(time, digits = 2) {\n    return String(time).padStart(digits, '0');\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, DAYS_IN_LEAP_YEAR, DAYS_IN_NORMAL_YEAR, DAYS_IN_WEEK, HOURS_IN_DAY, MAX_MONTH, MAX_YEAR, MILLISECONDS_IN_DAY, MILLISECONDS_IN_HOUR, MILLISECONDS_IN_MINUTE, MILLISECONDS_IN_SECOND, MINUTES_IN_HOUR, MIN_DAY, MIN_MONTH, MIN_YEAR, MONTHS_IN_YEAR, RANGE_SEPARATOR_CHAR, SECONDS_IN_MINUTE, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, TuiDayOfWeek, TuiDayRange, TuiInvalidDayException, TuiMonth, TuiMonthNumber, TuiMonthRange, TuiTime, TuiYear, tuiDateClamp };\n", "import { Observable, startWith, fromEvent, concat, take, map, merge, endWith, takeWhile, repeat, tap, pipe, switchMap, EMPTY, takeUntil, NEVER, catchError, defaultIfEmpty, asyncScheduler } from 'rxjs';\nimport { tuiIsPresent, tuiGetOriginalArrayFromQueryList } from '@taiga-ui/cdk/utils/miscellaneous';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { inject, ChangeDetectorRef, NgZone } from '@angular/core';\n\n/**\n * Turns AbstractControl/Abstract-control-directive valueChanges into ReplaySubject(1)\n */\nfunction tuiControlValue(control) {\n  return new Observable(subscriber => control?.valueChanges?.pipe(startWith(control.value)).subscribe(subscriber));\n}\nfunction tuiTypedFromEvent(target, event, options = {}) {\n  /**\n   * @note:\n   * in RxJS 7 type signature `TuiTypedEventTarget<E>` !== `HasEventTargetAddRemove<E>`\n   */\n  return fromEvent(target, event, options);\n}\nclass TuiDragState {\n  constructor(stage, event) {\n    this.stage = stage;\n    this.event = event;\n  }\n}\nfunction tuiDragAndDropFrom(element) {\n  const {\n    ownerDocument\n  } = element;\n  return concat(tuiTypedFromEvent(element, 'mousedown').pipe(take(1), map(event => new TuiDragState('start', event))), merge(tuiTypedFromEvent(ownerDocument, 'mousemove').pipe(map(event => new TuiDragState('continues', event))), merge(tuiTypedFromEvent(ownerDocument, 'mouseup'), tuiTypedFromEvent(ownerDocument, 'dragend')).pipe(take(1), map(event => new TuiDragState('end', event)), endWith(null))).pipe(takeWhile(tuiIsPresent))).pipe(repeat());\n}\nfunction tuiPreventDefault() {\n  return tap(event => event.preventDefault());\n}\nfunction tuiStopPropagation() {\n  return tap(event => event.stopPropagation());\n}\nfunction tuiIfMap(project, predicate = Boolean) {\n  return pipe(switchMap(value => predicate(value) ? project(value) : EMPTY));\n}\n\n/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nfunction tuiMustBePresent() {\n  return map(value => {\n    if (!tuiIsPresent(value)) {\n      throw new TuiValuePresentException();\n    }\n    return value;\n  });\n}\nclass TuiValuePresentException extends Error {\n  constructor() {\n    super(ngDevMode ? 'Value must present' : '');\n  }\n}\n\n/**\n * Converts changes observable of a QueryList to an Observable of arrays\n */\nfunction tuiQueryListChanges(queryList) {\n  return queryList.changes.pipe(startWith(null), map(() => tuiGetOriginalArrayFromQueryList(queryList)));\n}\n\n/**\n * Normalizes scroll event in case element is `html` (document.documentElement)\n */\nfunction tuiScrollFrom(element) {\n  return tuiTypedFromEvent(element === element.ownerDocument.documentElement ? element.ownerDocument : element, 'scroll');\n}\n\n// NOTE: takeUntilDestroyed and DestroyRef can cause error:\n// NG0911: View has already been destroyed\n// https://github.com/angular/angular/issues/54527\nfunction tuiTakeUntilDestroyed(destroyRef) {\n  return pipe(takeUntil(NEVER.pipe(takeUntilDestroyed(destroyRef), catchError(() => EMPTY), defaultIfEmpty(null))));\n}\nfunction tuiWatch(cdr = inject(ChangeDetectorRef)) {\n  return tap(() => cdr.markForCheck());\n}\nfunction tuiZonefull(zone = inject(NgZone)) {\n  return source => new Observable(subscriber => source.subscribe({\n    next: value => zone.run(() => subscriber.next(value)),\n    error: error => zone.run(() => subscriber.error(error)),\n    complete: () => zone.run(() => subscriber.complete())\n  }));\n}\nfunction tuiZonefree(zone = inject(NgZone)) {\n  return source => new Observable(subscriber => zone.runOutsideAngular(() => source.subscribe(subscriber)));\n}\nfunction tuiZoneOptimized(zone = inject(NgZone)) {\n  return pipe(tuiZonefree(zone), tuiZonefull(zone));\n}\nclass TuiZoneScheduler {\n  constructor(zoneConditionFn, scheduler = asyncScheduler) {\n    this.zoneConditionFn = zoneConditionFn;\n    this.scheduler = scheduler;\n  }\n  now() {\n    return this.scheduler.now();\n  }\n  schedule(...args) {\n    return this.zoneConditionFn(() => this.scheduler.schedule(...args));\n  }\n}\nfunction tuiZonefreeScheduler(zone = inject(NgZone), scheduler = asyncScheduler) {\n  return new TuiZoneScheduler(zone.runOutsideAngular.bind(zone), scheduler);\n}\nfunction tuiZonefullScheduler(zone = inject(NgZone), scheduler = asyncScheduler) {\n  return new TuiZoneScheduler(zone.run.bind(zone), scheduler);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiDragState, TuiValuePresentException, tuiControlValue, tuiDragAndDropFrom, tuiIfMap, tuiMustBePresent, tuiPreventDefault, tuiQueryListChanges, tuiScrollFrom, tuiStopPropagation, tuiTakeUntilDestroyed, tuiTypedFromEvent, tuiWatch, tuiZoneOptimized, tuiZonefree, tuiZonefreeScheduler, tuiZonefull, tuiZonefullScheduler };\n"],
  "mappings": "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",
  "names": []
}
