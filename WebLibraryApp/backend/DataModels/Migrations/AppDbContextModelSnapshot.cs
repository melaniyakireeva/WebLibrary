// <auto-generated />
using System;
using DataModels.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataModels.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataModels.DbModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Patronym")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            Name = "Александр",
                            Patronym = "Сергеевич",
                            Surname = "Пушкин"
                        },
                        new
                        {
                            Id = 1001,
                            Name = "Антон",
                            Patronym = "Павлович",
                            Surname = "Чехов"
                        },
                        new
                        {
                            Id = 1002,
                            Name = "Иван",
                            Patronym = "Сергеевич",
                            Surname = "Тургенев"
                        });
                });

            modelBuilder.Entity("DataModels.DbModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorValId")
                        .HasColumnType("integer");

                    b.Property<string>("Cipher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreValId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("PublishYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReceiptDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorValId");

                    b.HasIndex("FileId");

                    b.HasIndex("GenreValId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            AuthorValId = 1000,
                            Cipher = "3580106097",
                            Description = "Можно сказать, что весь XIX век прошел под знаком А. С. Пушкина.",
                            GenreValId = 8,
                            ISBN = "9785389049031",
                            Name = "Евгений Онегин",
                            Price = 267m,
                            PublishYear = 2021,
                            ReceiptDate = new DateTimeOffset(new DateTime(2022, 3, 2, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            State = 0
                        },
                        new
                        {
                            Id = 1001,
                            AuthorValId = 1000,
                            Cipher = "3121856336",
                            Description = "Литературная репутация Пушкина складывалась во многом благодаря популярности его поэм.",
                            GenreValId = 8,
                            ISBN = "9785389135864",
                            Name = "Руслан и Людмила",
                            Price = 375m,
                            PublishYear = 2021,
                            ReceiptDate = new DateTimeOffset(new DateTime(2023, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            State = 0
                        });
                });

            modelBuilder.Entity("DataModels.DbModels.BookingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BookingDateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BookingDateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingData");
                });

            modelBuilder.Entity("DataModels.DbModels.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileExt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DataModels.DbModels.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Научная литература"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Фантастика"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Комиксы"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Техническая литература"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Научная фантастика"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Былины"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Художественная литература"
                        });
                });

            modelBuilder.Entity("DataModels.DbModels.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CallSite")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Logger")
                        .HasColumnType("text");

                    b.Property<string>("MachineName")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<string>("Thread")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("LibraryApp.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProfileIconId")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("ProfileIconId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ivan@mail.ru",
                            Login = "ivan",
                            Name = "Иван",
                            Password = "ivan1234",
                            Role = 2,
                            Surname = "Иванович"
                        },
                        new
                        {
                            Id = 2,
                            Email = "sergey@mail.ru",
                            Login = "sergey",
                            Name = "Сергей",
                            Password = "sergey1234",
                            Role = 1,
                            Surname = "Сергеевич"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@mail.ru",
                            Login = "admin",
                            Name = "Админ",
                            Password = "admin1234",
                            Role = 0,
                            Surname = "Админович"
                        });
                });

            modelBuilder.Entity("DataModels.DbModels.Book", b =>
                {
                    b.HasOne("DataModels.DbModels.Author", "AuthorVal")
                        .WithMany()
                        .HasForeignKey("AuthorValId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.DbModels.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("DataModels.DbModels.Genre", "GenreVal")
                        .WithMany()
                        .HasForeignKey("GenreValId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorVal");

                    b.Navigation("File");

                    b.Navigation("GenreVal");
                });

            modelBuilder.Entity("DataModels.DbModels.BookingData", b =>
                {
                    b.HasOne("DataModels.DbModels.Book", "Book")
                        .WithMany("BookingInfo")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Auth.User", b =>
                {
                    b.HasOne("DataModels.DbModels.FileModel", "ProfileIcon")
                        .WithOne("Owner")
                        .HasForeignKey("LibraryApp.Auth.User", "ProfileIconId");

                    b.Navigation("ProfileIcon");
                });

            modelBuilder.Entity("DataModels.DbModels.Book", b =>
                {
                    b.Navigation("BookingInfo");
                });

            modelBuilder.Entity("DataModels.DbModels.FileModel", b =>
                {
                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
